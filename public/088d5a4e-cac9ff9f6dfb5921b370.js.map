{"version":3,"file":"088d5a4e-cac9ff9f6dfb5921b370.js","mappings":"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","sources":["webpack://freak-noize-studio/./node_modules/@babylonjs/core/Maths/math.vector.js"],"sourcesContent":["import _classCallCheck from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/* eslint-disable @typescript-eslint/naming-convention */\nimport { Scalar } from \"./math.scalar.js\";\nimport { Epsilon } from \"./math.constants.js\";\nimport { ArrayTools } from \"../Misc/arrayTools.js\";\nimport { RegisterClass } from \"../Misc/typeStore.js\";\nimport { PerformanceConfigurator } from \"../Engines/performanceConfigurator.js\";\nimport { EngineStore } from \"../Engines/engineStore.js\";\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar _ExtractAsInt = function _ExtractAsInt(value) {\n  return parseInt(value.toString().replace(/\\W/g, \"\"));\n};\n/**\n * Class representing a vector containing 2 coordinates\n * Example Playground - Overview -  https://playground.babylonjs.com/#QYBWV4#9\n */\nexport var Vector2 = /*#__PURE__*/function () {\n  /**\n   * Creates a new Vector2 from the given x and y coordinates\n   * @param x defines the first coordinate\n   * @param y defines the second coordinate\n   */\n  function Vector2() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classCallCheck(this, Vector2);\n    this.x = x;\n    this.y = y;\n  }\n  /**\n   * Gets a string with the Vector2 coordinates\n   * @returns a string with the Vector2 coordinates\n   */\n  _createClass(Vector2, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this.x, \" Y: \").concat(this.y, \"}\");\n    }\n    /**\n     * Gets class name\n     * @returns the string \"Vector2\"\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector2\";\n    }\n    /**\n     * Gets current vector hash code\n     * @returns the Vector2 hash code as a number\n     */\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this.x);\n      var y = _ExtractAsInt(this.y);\n      var hash = x;\n      hash = hash * 397 ^ y;\n      return hash;\n    }\n    // Operators\n    /**\n     * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#15\n     * @param array defines the source array\n     * @param index defines the offset in source array\n     * @returns the current Vector2\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#39\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector2\n     */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector2.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Copy the current vector to an array\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#40\n     * @returns a new array with 2 elements: the Vector2 coordinates.\n     */\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = new Array();\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given Vector2 coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#24\n     * @param source defines the source Vector2\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      this.x = source.x;\n      this.y = source.y;\n      return this;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#25\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y) {\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n    /**\n     * Sets the Vector2 coordinates with the given floats\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#62\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"set\",\n    value: function set(x, y) {\n      return this.copyFromFloats(x, y);\n    }\n    /**\n     * Add another vector with the current one\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#11\n     * @param otherVector defines the other vector\n     * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\n     */\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new this.constructor(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#12\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      result.x = this.x + otherVector.x;\n      result.y = this.y + otherVector.y;\n      return result;\n    }\n    /**\n     * Set the Vector2 coordinates by adding the given Vector2 coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#13\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      this.x += otherVector.x;\n      this.y += otherVector.y;\n      return this;\n    }\n    /**\n     * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#14\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"addVector3\",\n    value: function addVector3(otherVector) {\n      return new this.constructor(this.x + otherVector.x, this.y + otherVector.y);\n    }\n    /**\n     * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#61\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new this.constructor(this.x - otherVector.x, this.y - otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#63\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      result.x = this.x - otherVector.x;\n      result.y = this.y - otherVector.y;\n      return result;\n    }\n    /**\n     * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#88\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector.x;\n      this.y -= otherVector.y;\n      return this;\n    }\n    /**\n     * Multiplies in place the current Vector2 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#43\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector.x;\n      this.y *= otherVector.y;\n      return this;\n    }\n    /**\n     * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#42\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return new this.constructor(this.x * otherVector.x, this.y * otherVector.y);\n    }\n    /**\n     * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#44\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      result.x = this.x * otherVector.x;\n      result.y = this.y * otherVector.y;\n      return result;\n    }\n    /**\n     * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#89\n     * @param x defines the first coordinate\n     * @param y defines the second coordinate\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y) {\n      return new this.constructor(this.x * x, this.y * y);\n    }\n    /**\n     * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#27\n     * @param otherVector defines the other vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new this.constructor(this.x / otherVector.x, this.y / otherVector.y);\n    }\n    /**\n     * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#30\n     * @param otherVector defines the other vector\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      result.x = this.x / otherVector.x;\n      result.y = this.y / otherVector.y;\n      return result;\n    }\n    /**\n     * Divides the current Vector2 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#28\n     * @param otherVector defines the other vector\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Gets a new Vector2 with current Vector2 negated coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#22\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new this.constructor(-this.x, -this.y);\n    }\n    /**\n     * Negate this vector in place\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#23\n     * @returns this\n     */\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector2 and stores the result in the given vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#41\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this.x * -1, this.y * -1);\n    }\n    /**\n     * Multiply the Vector2 coordinates by\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#59\n     * @param scale defines the scaling factor\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector2 scaled by \"scale\" from the current Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#52\n     * @param scale defines the scaling factor\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(_scale) {\n      var result = new this.constructor(0, 0);\n      this.scaleToRef(_scale, result);\n      return result;\n    }\n    /**\n     * Scale the current Vector2 values by a factor to a given Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#57\n     * @param scale defines the scale factor\n     * @param result defines the Vector2 object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this.x * scale;\n      result.y = this.y * scale;\n      return result;\n    }\n    /**\n     * Scale the current Vector2 values by a factor and add the result to a given Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#58\n     * @param scale defines the scale factor\n     * @param result defines the Vector2 object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this.x * scale;\n      result.y += this.y * scale;\n      return result;\n    }\n    /**\n     * Gets a boolean if two vectors are equals\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#31\n     * @param otherVector defines the other vector\n     * @returns true if the given vector coordinates strictly equal the current Vector2 ones\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n    }\n    /**\n     * Gets a boolean if two vectors are equals (using an epsilon value)\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#32\n     * @param otherVector defines the other vector\n     * @param epsilon defines the minimal distance to consider equality\n     * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\n     */\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\n    }\n    /**\n     * Gets a new Vector2 from current Vector2 floored values\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#35\n     * eg (1.2, 2.31) returns (1, 2)\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new this.constructor(Math.floor(this.x), Math.floor(this.y));\n    }\n    /**\n     * Gets a new Vector2 from current Vector2 fractional values\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#34\n     * eg (1.2, 2.31) returns (0.2, 0.31)\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new this.constructor(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n    }\n    /**\n     * Rotate the current vector into a given result vector\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#49\n     * @param angle defines the rotation angle\n     * @param result defines the result vector where to store the rotated vector\n     * @returns result input\n     */\n  }, {\n    key: \"rotateToRef\",\n    value: function rotateToRef(angle, result) {\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      result.x = cos * this.x - sin * this.y;\n      result.y = sin * this.x + cos * this.y;\n      return result;\n    }\n    // Properties\n    /**\n     * Gets the length of the vector\n     * @returns the vector length (float)\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    /**\n     * Gets the vector squared length\n     * @returns the vector squared length (float)\n     */\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this.x * this.x + this.y * this.y;\n    }\n    // Methods\n    /**\n     * Normalize the vector\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#48\n     * @returns the current updated Vector2\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      Vector2.NormalizeToRef(this, this);\n      return this;\n    }\n    /**\n     * Gets a new Vector2 copied from the Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#20\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.x, this.y);\n    }\n    // Statics\n    /**\n     * Gets a new Vector2(0, 0)\n     * @returns a new Vector2\n     */\n  }], [{\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector2(0, 0);\n    }\n    /**\n     * Gets a new Vector2(1, 1)\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector2(1, 1);\n    }\n    /**\n     * Gets a zero Vector2 that must not be updated\n     */\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector2._ZeroReadOnly;\n    }\n    /**\n     * Gets a new Vector2 set from the given index element of the given array\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#79\n     * @param array defines the data source\n     * @param offset defines the offset in the data source\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector2(array[offset], array[offset + 1]);\n    }\n    /**\n     * Sets \"result\" from the given index element of the given array\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#80\n     * @param array defines the data source\n     * @param offset defines the offset in the data source\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      return result;\n    }\n    /**\n     * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#65\n     * @param value1 defines 1st point of control\n     * @param value2 defines 2nd point of control\n     * @param value3 defines 3rd point of control\n     * @param value4 defines 4th point of control\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"CatmullRom\",\n    value: function CatmullRom(value1, value2, value3, value4, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n      var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n      return new value1.constructor(x, y);\n    }\n    /**\n     * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\n     * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\n     * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#76\n     * @param value defines the value to clamp\n     * @param min defines the lower limit\n     * @param max defines the upper limit\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Clamp\",\n    value: function Clamp(value, min, max) {\n      var x = value.x;\n      x = x > max.x ? max.x : x;\n      x = x < min.x ? min.x : x;\n      var y = value.y;\n      y = y > max.y ? max.y : y;\n      y = y < min.y ? min.y : y;\n      return new value.constructor(x, y);\n    }\n    /**\n     * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#81\n     * @param value1 defines the 1st control point\n     * @param tangent1 defines the outgoing tangent\n     * @param value2 defines the 2nd control point\n     * @param tangent2 defines the incoming tangent\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n      var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n      return new value1.constructor(x, y);\n    }\n    /**\n     * Returns a new Vector2 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#82\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = new value1.constructor();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Returns a new Vector2 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#83\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where the derivative will be stored\n     * @returns result input\n     */\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n      return result;\n    }\n    /**\n     * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#84\n     * @param start defines the start vector\n     * @param end defines the end vector\n     * @param amount defines the interpolation factor\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(start, end, amount) {\n      var x = start.x + (end.x - start.x) * amount;\n      var y = start.y + (end.y - start.y) * amount;\n      return new start.constructor(x, y);\n    }\n    /**\n     * Gets the dot product of the vector \"left\" and the vector \"right\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#90\n     * @param left defines first vector\n     * @param right defines second vector\n     * @returns the dot product (float)\n     */\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left.x * right.x + left.y * right.y;\n    }\n    /**\n     * Returns a new Vector2 equal to the normalized given vector\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#46\n     * @param vector defines the vector to normalize\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var newVector = new vector.constructor();\n      this.NormalizeToRef(vector, newVector);\n      return newVector;\n    }\n    /**\n     * Normalize a given vector into a second one\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#50\n     * @param vector defines the vector to normalize\n     * @param result defines the vector where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      var len = vector.length();\n      if (len === 0) {\n        return result;\n      }\n      result.x = vector.x / len;\n      result.y = vector.y / len;\n      return result;\n    }\n    /**\n     * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#86\n     * @param left defines 1st vector\n     * @param right defines 2nd vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var x = left.x < right.x ? left.x : right.x;\n      var y = left.y < right.y ? left.y : right.y;\n      return new left.constructor(x, y);\n    }\n    /**\n     * Gets a new Vector2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#86\n     * @param left defines 1st vector\n     * @param right defines 2nd vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var x = left.x > right.x ? left.x : right.x;\n      var y = left.y > right.y ? left.y : right.y;\n      return new left.constructor(x, y);\n    }\n    /**\n     * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#17\n     * @param vector defines the vector to transform\n     * @param transformation defines the matrix to apply\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Transform\",\n    value: function Transform(vector, transformation) {\n      var result = new vector.constructor();\n      Vector2.TransformToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#19\n     * @param vector defines the vector to transform\n     * @param transformation defines the matrix to apply\n     * @param result defines the target vector\n     * @returns result input\n     */\n  }, {\n    key: \"TransformToRef\",\n    value: function TransformToRef(vector, transformation, result) {\n      var m = transformation.m;\n      var x = vector.x * m[0] + vector.y * m[4] + m[12];\n      var y = vector.x * m[1] + vector.y * m[5] + m[13];\n      result.x = x;\n      result.y = y;\n      return result;\n    }\n    /**\n     * Determines if a given vector is included in a triangle\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#87\n     * @param p defines the vector to test\n     * @param p0 defines 1st triangle point\n     * @param p1 defines 2nd triangle point\n     * @param p2 defines 3rd triangle point\n     * @returns true if the point \"p\" is in the triangle defined by the vectors \"p0\", \"p1\", \"p2\"\n     */\n  }, {\n    key: \"PointInTriangle\",\n    value: function PointInTriangle(p, p0, p1, p2) {\n      var a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n      var sign = a < 0 ? -1 : 1;\n      var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n      var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n      return s > 0 && t > 0 && s + t < 2 * a * sign;\n    }\n    /**\n     * Gets the distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#71\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns the distance between vectors\n     */\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#72\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns the squared distance between vectors\n     */\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1.x - value2.x;\n      var y = value1.y - value2.y;\n      return x * x + y * y;\n    }\n    /**\n     * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#86\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#66\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @returns a new Vector2\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      var result = new value1.constructor();\n      return Vector2.CenterToRef(value1, value2, result);\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#66\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1.x + value2.x) / 2, (value1.y + value2.y) / 2);\n    }\n    /**\n     * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\n     * Example Playground https://playground.babylonjs.com/#QYBWV4#77\n     * @param p defines the middle point\n     * @param segA defines one point of the segment\n     * @param segB defines the other point of the segment\n     * @returns the shortest distance\n     */\n  }, {\n    key: \"DistanceOfPointFromSegment\",\n    value: function DistanceOfPointFromSegment(p, segA, segB) {\n      var l2 = Vector2.DistanceSquared(segA, segB);\n      if (l2 === 0.0) {\n        return Vector2.Distance(p, segA);\n      }\n      var v = segB.subtract(segA);\n      var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n      var proj = segA.add(v.multiplyByFloats(t, t));\n      return Vector2.Distance(p, proj);\n    }\n  }]);\n  return Vector2;\n}();\nVector2._ZeroReadOnly = Vector2.Zero();\n/**\n * Class used to store (x,y,z) vector representation\n * A Vector3 is the main object used in 3D geometry\n * It can represent either the coordinates of a point the space, either a direction\n * Reminder: js uses a left handed forward facing system\n * Example Playground - Overview - https://playground.babylonjs.com/#R1F8YU\n */\nexport var Vector3 = /*#__PURE__*/function () {\n  /**\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\n   * @param x defines the first coordinates (on X axis)\n   * @param y defines the second coordinates (on Y axis)\n   * @param z defines the third coordinates (on Z axis)\n   */\n  function Vector3() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    _classCallCheck(this, Vector3);\n    /** @internal */\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n  /** Gets or sets the x coordinate */\n  _createClass(Vector3, [{\n    key: \"x\",\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the y coordinate */\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the z coordinate */\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    }\n    /**\n     * Creates a string representation of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#67\n     * @returns a string with the Vector3 coordinates.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this._x, \" Y: \").concat(this._y, \" Z: \").concat(this._z, \"}\");\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Vector3\"\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector3\";\n    }\n    /**\n     * Creates the Vector3 hash code\n     * @returns a number which tends to be unique between Vector3 instances\n     */\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this._x);\n      var y = _ExtractAsInt(this._y);\n      var z = _ExtractAsInt(this._z);\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      return hash;\n    }\n    // Operators\n    /**\n     * Creates an array containing three elements : the coordinates of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#10\n     * @returns a new array of numbers\n     */\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = [];\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#65\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this._x;\n      array[index + 1] = this._y;\n      array[index + 2] = this._z;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#24\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector3.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#66\n     * @returns a new Quaternion object, computed from the Vector3 coordinates\n     */\n  }, {\n    key: \"toQuaternion\",\n    value: function toQuaternion() {\n      return Quaternion.RotationYawPitchRoll(this._y, this._x, this._z);\n    }\n    /**\n     * Adds the given vector to the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#4\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      return this.addInPlaceFromFloats(otherVector._x, otherVector._y, otherVector._z);\n    }\n    /**\n     * Adds the given coordinates to the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#5\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"addInPlaceFromFloats\",\n    value: function addInPlaceFromFloats(x, y, z) {\n      this.x += x;\n      this.y += y;\n      this.z += z;\n      return this;\n    }\n    /**\n     * Gets a new Vector3, result of the addition the current Vector3 and the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#3\n     * @param otherVector defines the second operand\n     * @returns the resulting Vector3\n     */\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new this.constructor(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n    }\n    /**\n     * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#6\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      return result.copyFromFloats(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n    }\n    /**\n     * Subtract the given vector from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#61\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector._x;\n      this.y -= otherVector._y;\n      this.z -= otherVector._z;\n      return this;\n    }\n    /**\n     * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#60\n     * @param otherVector defines the second operand\n     * @returns the resulting Vector3\n     */\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new this.constructor(this._x - otherVector._x, this._y - otherVector._y, this._z - otherVector._z);\n    }\n    /**\n     * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#63\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      return this.subtractFromFloatsToRef(otherVector._x, otherVector._y, otherVector._z, result);\n    }\n    /**\n     * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#62\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the resulting Vector3\n     */\n  }, {\n    key: \"subtractFromFloats\",\n    value: function subtractFromFloats(x, y, z) {\n      return new this.constructor(this._x - x, this._y - y, this._z - z);\n    }\n    /**\n     * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#64\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"subtractFromFloatsToRef\",\n    value: function subtractFromFloatsToRef(x, y, z, result) {\n      return result.copyFromFloats(this._x - x, this._y - y, this._z - z);\n    }\n    /**\n     * Gets a new Vector3 set with the current Vector3 negated coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#35\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new this.constructor(-this._x, -this._y, -this._z);\n    }\n    /**\n     * Negate this vector in place\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#36\n     * @returns this\n     */\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector3 and stores the result in the given vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#37\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this._x * -1, this._y * -1, this._z * -1);\n    }\n    /**\n     * Multiplies the Vector3 coordinates by the float \"scale\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#56\n     * @param scale defines the multiplier factor\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      this.z *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#53\n     * @param scale defines the multiplier factor\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(_scale2) {\n      return new this.constructor(this._x * _scale2, this._y * _scale2, this._z * _scale2);\n    }\n    /**\n     * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#57\n     * @param scale defines the multiplier factor\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      return result.copyFromFloats(this._x * scale, this._y * scale, this._z * scale);\n    }\n    /**\n     * Creates a vector normal (perpendicular) to the current Vector3 and stores the result in the given vector\n     * Out of the infinite possibilities the normal chosen is the one formed by rotating the current vector\n     * 90 degrees about an axis which lies perpendicular to the current vector\n     * and its projection on the xz plane. In the case of a current vector in the xz plane\n     * the normal is calculated to be along the y axis.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#230\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#231\n     * @param result defines the Vector3 object where to store the resultant normal\n     * returns the result\n     */\n  }, {\n    key: \"getNormalToRef\",\n    value: function getNormalToRef(result) {\n      /**\n       * Calculates the spherical coordinates of the current vector\n       * so saves on memory rather than importing whole Spherical Class\n       */\n      var radius = this.length();\n      var theta = Math.acos(this.y / radius);\n      var phi = Math.atan2(this.z, this.x);\n      //makes angle 90 degs to current vector\n      if (theta > Math.PI / 2) {\n        theta -= Math.PI / 2;\n      } else {\n        theta += Math.PI / 2;\n      }\n      //Calculates resutant normal vector from spherical coordinate of perpendicular vector\n      var x = radius * Math.sin(theta) * Math.cos(phi);\n      var y = radius * Math.cos(theta);\n      var z = radius * Math.sin(theta) * Math.sin(phi);\n      result.set(x, y, z);\n      return result;\n    }\n    /**\n     * Rotates the vector using the given unit quaternion and stores the new vector in result\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#9\n     * @param q the unit quaternion representing the rotation\n     * @param result the output vector\n     * @returns the result\n     */\n  }, {\n    key: \"applyRotationQuaternionToRef\",\n    value: function applyRotationQuaternionToRef(q, result) {\n      var ix = q.w * this.x + q.y * this.z - q.z * this.y;\n      var iy = q.w * this.y + q.z * this.x - q.x * this.z;\n      var iz = q.w * this.z + q.x * this.y - q.y * this.x;\n      var iw = -q.x * this.x - q.y * this.y - q.z * this.z;\n      result.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n      result.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n      result.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n      return result;\n    }\n    /**\n     * Rotates the vector in place using the given unit quaternion\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#8\n     * @param q the unit quaternion representing the rotation\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"applyRotationQuaternionInPlace\",\n    value: function applyRotationQuaternionInPlace(q) {\n      return this.applyRotationQuaternionToRef(q, this);\n    }\n    /**\n     * Rotates the vector using the given unit quaternion and returns the new vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#7\n     * @param q the unit quaternion representing the rotation\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"applyRotationQuaternion\",\n    value: function applyRotationQuaternion(q) {\n      return this.applyRotationQuaternionToRef(q, new this.constructor());\n    }\n    /**\n     * Scale the current Vector3 values by a factor and add the result to a given Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#55\n     * @param scale defines the scale factor\n     * @param result defines the Vector3 object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      return result.addInPlaceFromFloats(this._x * scale, this._y * scale, this._z * scale);\n    }\n    /**\n     * Projects the current point Vector3 to a plane along a ray starting from a specified origin and passing through the current point Vector3.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#48\n     * @param plane defines the plane to project to\n     * @param origin defines the origin of the projection ray\n     * @returns the projected vector3\n     */\n  }, {\n    key: \"projectOnPlane\",\n    value: function projectOnPlane(plane, origin) {\n      var result = new this.constructor();\n      this.projectOnPlaneToRef(plane, origin, result);\n      return result;\n    }\n    /**\n     * Projects the current point Vector3 to a plane along a ray starting from a specified origin and passing through the current point Vector3.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#49\n     * @param plane defines the plane to project to\n     * @param origin defines the origin of the projection ray\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"projectOnPlaneToRef\",\n    value: function projectOnPlaneToRef(plane, origin, result) {\n      var n = plane.normal;\n      var d = plane.d;\n      var V = MathTmp.Vector3[0];\n      // ray direction\n      this.subtractToRef(origin, V);\n      V.normalize();\n      var denom = Vector3.Dot(V, n);\n      //When the ray is close to parallel to the plane return infinity vector\n      if (Math.abs(denom) < Math.pow(10, -10)) {\n        result.setAll(Infinity);\n      } else {\n        var t = -(Vector3.Dot(origin, n) + d) / denom;\n        // P = P0 + t*V\n        var scaledV = V.scaleInPlace(t);\n        origin.addToRef(scaledV, result);\n      }\n      return result;\n    }\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are strictly equal\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#19\n     * @param otherVector defines the second operand\n     * @returns true if both vectors are equals\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this._x === otherVector._x && this._y === otherVector._y && this._z === otherVector._z;\n    }\n    /**\n     * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#21\n     * @param otherVector defines the second operand\n     * @param epsilon defines the minimal distance to define values as equals\n     * @returns true if both vectors are distant less than epsilon\n     */\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this._x, otherVector._x, epsilon) && Scalar.WithinEpsilon(this._y, otherVector._y, epsilon) && Scalar.WithinEpsilon(this._z, otherVector._z, epsilon);\n    }\n    /**\n     * Returns true if the current Vector3 coordinates equals the given floats\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#20\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns true if both vectors are equal\n     */\n  }, {\n    key: \"equalsToFloats\",\n    value: function equalsToFloats(x, y, z) {\n      return this._x === x && this._y === y && this._z === z;\n    }\n    /**\n     * Multiplies the current Vector3 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#32\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector._x;\n      this.y *= otherVector._y;\n      this.z *= otherVector._z;\n      return this;\n    }\n    /**\n     * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#31\n     * @param otherVector defines the second operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return this.multiplyByFloats(otherVector._x, otherVector._y, otherVector._z);\n    }\n    /**\n     * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#33\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      return result.copyFromFloats(this._x * otherVector._x, this._y * otherVector._y, this._z * otherVector._z);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the multiplication of the current Vector3 coordinates by the given floats\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#34\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y, z) {\n      return new this.constructor(this._x * x, this._y * y, this._z * z);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#16\n     * @param otherVector defines the second operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new this.constructor(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#18\n     * @param otherVector defines the second operand\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      return result.copyFromFloats(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#17\n     * @param otherVector defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#29\n     * @param other defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"minimizeInPlace\",\n    value: function minimizeInPlace(other) {\n      return this.minimizeInPlaceFromFloats(other._x, other._y, other._z);\n    }\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#27\n     * @param other defines the second operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"maximizeInPlace\",\n    value: function maximizeInPlace(other) {\n      return this.maximizeInPlaceFromFloats(other._x, other._y, other._z);\n    }\n    /**\n     * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#30\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"minimizeInPlaceFromFloats\",\n    value: function minimizeInPlaceFromFloats(x, y, z) {\n      if (x < this._x) {\n        this.x = x;\n      }\n      if (y < this._y) {\n        this.y = y;\n      }\n      if (z < this._z) {\n        this.z = z;\n      }\n      return this;\n    }\n    /**\n     * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#28\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"maximizeInPlaceFromFloats\",\n    value: function maximizeInPlaceFromFloats(x, y, z) {\n      if (x > this._x) {\n        this.x = x;\n      }\n      if (y > this._y) {\n        this.y = y;\n      }\n      if (z > this._z) {\n        this.z = z;\n      }\n      return this;\n    }\n    /**\n     * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\n     * Check if is non uniform within a certain amount of decimal places to account for this\n     * @param epsilon the amount the values can differ\n     * @returns if the the vector is non uniform to a certain number of decimal places\n     */\n  }, {\n    key: \"isNonUniformWithinEpsilon\",\n    value: function isNonUniformWithinEpsilon(epsilon) {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n      if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\n        return true;\n      }\n      var absZ = Math.abs(this._z);\n      if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\n        return true;\n      }\n      if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\n     */\n  }, {\n    key: \"isNonUniform\",\n    get: function get() {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n      if (absX !== absY) {\n        return true;\n      }\n      var absZ = Math.abs(this._z);\n      if (absX !== absZ) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Gets a new Vector3 from current Vector3 floored values\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#22\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new this.constructor(Math.floor(this._x), Math.floor(this._y), Math.floor(this._z));\n    }\n    /**\n     * Gets a new Vector3 from current Vector3 fractional values\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#23\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new this.constructor(this._x - Math.floor(this._x), this._y - Math.floor(this._y), this._z - Math.floor(this._z));\n    }\n    // Properties\n    /**\n     * Gets the length of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#25\n     * @returns the length of the Vector3\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n    }\n    /**\n     * Gets the squared length of the Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#26\n     * @returns squared length of the Vector3\n     */\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this._x * this._x + this._y * this._y + this._z * this._z;\n    }\n    /**\n     * Gets a boolean indicating if the vector contains a zero in one of its components\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#1\n     */\n  }, {\n    key: \"hasAZeroComponent\",\n    get: function get() {\n      return this._x * this._y * this._z === 0;\n    }\n    /**\n     * Normalize the current Vector3.\n     * Please note that this is an in place operation.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#122\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      return this.normalizeFromLength(this.length());\n    }\n    /**\n     * Reorders the x y z properties of the vector in place\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#44\n     * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\n     * @returns the current updated vector\n     */\n  }, {\n    key: \"reorderInPlace\",\n    value: function reorderInPlace(order) {\n      var _this = this;\n      order = order.toLowerCase();\n      if (order === \"xyz\") {\n        return this;\n      }\n      MathTmp.Vector3[0].copyFrom(this);\n      [\"x\", \"y\", \"z\"].forEach(function (val, i) {\n        _this[val] = MathTmp.Vector3[0][order[i]];\n      });\n      return this;\n    }\n    /**\n     * Rotates the vector around 0,0,0 by a quaternion\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#47\n     * @param quaternion the rotation quaternion\n     * @param result vector to store the result\n     * @returns the resulting vector\n     */\n  }, {\n    key: \"rotateByQuaternionToRef\",\n    value: function rotateByQuaternionToRef(quaternion, result) {\n      quaternion.toRotationMatrix(MathTmp.Matrix[0]);\n      Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\n      return result;\n    }\n    /**\n     * Rotates a vector around a given point\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#46\n     * @param quaternion the rotation quaternion\n     * @param point the point to rotate around\n     * @param result vector to store the result\n     * @returns the resulting vector\n     */\n  }, {\n    key: \"rotateByQuaternionAroundPointToRef\",\n    value: function rotateByQuaternionAroundPointToRef(quaternion, point, result) {\n      this.subtractToRef(point, MathTmp.Vector3[0]);\n      MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\n      point.addToRef(MathTmp.Vector3[0], result);\n      return result;\n    }\n    /**\n     * Returns a new Vector3 as the cross product of the current vector and the \"other\" one\n     * The cross product is then orthogonal to both current and \"other\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#14\n     * @param other defines the right operand\n     * @returns the cross product\n     */\n  }, {\n    key: \"cross\",\n    value: function cross(other) {\n      var result = new this.constructor();\n      return Vector3.CrossToRef(this, other, result);\n    }\n    /**\n     * Normalize the current Vector3 with the given input length.\n     * Please note that this is an in place operation.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#123\n     * @param len the length of the vector\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"normalizeFromLength\",\n    value: function normalizeFromLength(len) {\n      if (len === 0 || len === 1.0) {\n        return this;\n      }\n      return this.scaleInPlace(1.0 / len);\n    }\n    /**\n     * Normalize the current Vector3 to a new vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#124\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"normalizeToNew\",\n    value: function normalizeToNew() {\n      var normalized = new this.constructor(0, 0, 0);\n      this.normalizeToRef(normalized);\n      return normalized;\n    }\n    /**\n     * Normalize the current Vector3 to the reference\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#125\n     * @param reference define the Vector3 to update\n     * @returns the updated Vector3\n     */\n  }, {\n    key: \"normalizeToRef\",\n    value: function normalizeToRef(reference) {\n      var len = this.length();\n      if (len === 0 || len === 1.0) {\n        return reference.copyFromFloats(this._x, this._y, this._z);\n      }\n      return this.scaleToRef(1.0 / len, reference);\n    }\n    /**\n     * Creates a new Vector3 copied from the current Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#11\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this._x, this._y, this._z);\n    }\n    /**\n     * Copies the given vector coordinates to the current Vector3 ones\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#12\n     * @param source defines the source Vector3\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      return this.copyFromFloats(source._x, source._y, source._z);\n    }\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#13\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      return this;\n    }\n    /**\n     * Copies the given floats to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#58\n     * @param x defines the x coordinate of the operand\n     * @param y defines the y coordinate of the operand\n     * @param z defines the z coordinate of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"set\",\n    value: function set(x, y, z) {\n      return this.copyFromFloats(x, y, z);\n    }\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#59\n     * @param v defines the x, y and z coordinates of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"setAll\",\n    value: function setAll(v) {\n      this.x = this.y = this.z = v;\n      return this;\n    }\n    // Statics\n    /**\n     * Get the clip factor between two vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#126\n     * @param vector0 defines the first operand\n     * @param vector1 defines the second operand\n     * @param axis defines the axis to use\n     * @param size defines the size along the axis\n     * @returns the clip factor\n     */\n  }], [{\n    key: \"GetClipFactor\",\n    value: function GetClipFactor(vector0, vector1, axis, size) {\n      var d0 = Vector3.Dot(vector0, axis) - size;\n      var d1 = Vector3.Dot(vector1, axis) - size;\n      var s = d0 / (d0 - d1);\n      return s;\n    }\n    /**\n     * Get angle between two vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#86\n     * @param vector0 the starting point\n     * @param vector1 the ending point\n     * @param normal direction of the normal\n     * @returns the angle between vector0 and vector1\n     */\n  }, {\n    key: \"GetAngleBetweenVectors\",\n    value: function GetAngleBetweenVectors(vector0, vector1, normal) {\n      var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\n      var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\n      var dot = Vector3.Dot(v0, v1);\n      // Vectors are normalized so dot will be in [-1, 1] (aside precision issues enough to break the result which explains the below clamp)\n      dot = Scalar.Clamp(dot, -1, 1);\n      var angle = Math.acos(dot);\n      var n = MathTmp.Vector3[3];\n      Vector3.CrossToRef(v0, v1, n);\n      if (Vector3.Dot(n, normal) > 0) {\n        return isNaN(angle) ? 0 : angle;\n      }\n      return isNaN(angle) ? -Math.PI : -Math.acos(dot);\n    }\n    /**\n     * Get angle between two vectors projected on a plane\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#87\n     * Expectation compute time: 0.01 ms (median) and 0.02 ms (percentile 95%)\n     * @param vector0 angle between vector0 and vector1\n     * @param vector1 angle between vector0 and vector1\n     * @param normal Normal of the projection plane\n     * @returns the angle in radians (float) between vector0 and vector1 projected on the plane with the specified normal\n     */\n  }, {\n    key: \"GetAngleBetweenVectorsOnPlane\",\n    value: function GetAngleBetweenVectorsOnPlane(vector0, vector1, normal) {\n      MathTmp.Vector3[0].copyFrom(vector0);\n      var v0 = MathTmp.Vector3[0];\n      MathTmp.Vector3[1].copyFrom(vector1);\n      var v1 = MathTmp.Vector3[1];\n      MathTmp.Vector3[2].copyFrom(normal);\n      var vNormal = MathTmp.Vector3[2];\n      var right = MathTmp.Vector3[3];\n      var forward = MathTmp.Vector3[4];\n      v0.normalize();\n      v1.normalize();\n      vNormal.normalize();\n      Vector3.CrossToRef(vNormal, v0, right);\n      Vector3.CrossToRef(right, vNormal, forward);\n      var angle = Math.atan2(Vector3.Dot(v1, right), Vector3.Dot(v1, forward));\n      return Scalar.NormalizeRadians(angle);\n    }\n    /**\n     * Gets the rotation that aligns the roll axis (Y) to the line joining the start point to the target point and stores it in the ref Vector3\n     * Example PG https://playground.babylonjs.com/#R1F8YU#189\n     * @param start the starting point\n     * @param target the target point\n     * @param ref the vector3 to store the result\n     * @returns ref in the form (pitch, yaw, 0)\n     */\n  }, {\n    key: \"PitchYawRollToMoveBetweenPointsToRef\",\n    value: function PitchYawRollToMoveBetweenPointsToRef(start, target, ref) {\n      var diff = TmpVectors.Vector3[0];\n      target.subtractToRef(start, diff);\n      ref.y = Math.atan2(diff.x, diff.z) || 0;\n      ref.x = Math.atan2(Math.sqrt(Math.pow(diff.x, 2) + Math.pow(diff.z, 2)), diff.y) || 0;\n      ref.z = 0;\n      return ref;\n    }\n    /**\n     * Gets the rotation that aligns the roll axis (Y) to the line joining the start point to the target point\n     * Example PG https://playground.babylonjs.com/#R1F8YU#188\n     * @param start the starting point\n     * @param target the target point\n     * @returns the rotation in the form (pitch, yaw, 0)\n     */\n  }, {\n    key: \"PitchYawRollToMoveBetweenPoints\",\n    value: function PitchYawRollToMoveBetweenPoints(start, target) {\n      var ref = Vector3.Zero();\n      return Vector3.PitchYawRollToMoveBetweenPointsToRef(start, target, ref);\n    }\n    /**\n     * Slerp between two vectors. See also `SmoothToRef`\n     * Slerp is a spherical linear interpolation\n     * giving a slow in and out effect\n     * Example Playground 1 https://playground.babylonjs.com/#R1F8YU#108\n     * Example Playground 2 https://playground.babylonjs.com/#R1F8YU#109\n     * @param vector0 Start vector\n     * @param vector1 End vector\n     * @param slerp amount (will be clamped between 0 and 1)\n     * @param result The slerped vector\n     */\n  }, {\n    key: \"SlerpToRef\",\n    value: function SlerpToRef(vector0, vector1, slerp, result) {\n      slerp = Scalar.Clamp(slerp, 0, 1);\n      var vector0Dir = MathTmp.Vector3[0];\n      var vector1Dir = MathTmp.Vector3[1];\n      vector0Dir.copyFrom(vector0);\n      var vector0Length = vector0Dir.length();\n      vector0Dir.normalizeFromLength(vector0Length);\n      vector1Dir.copyFrom(vector1);\n      var vector1Length = vector1Dir.length();\n      vector1Dir.normalizeFromLength(vector1Length);\n      var dot = Vector3.Dot(vector0Dir, vector1Dir);\n      var scale0;\n      var scale1;\n      if (dot < 1 - Epsilon) {\n        var omega = Math.acos(dot);\n        var invSin = 1 / Math.sin(omega);\n        scale0 = Math.sin((1 - slerp) * omega) * invSin;\n        scale1 = Math.sin(slerp * omega) * invSin;\n      } else {\n        // Use linear interpolation\n        scale0 = 1 - slerp;\n        scale1 = slerp;\n      }\n      vector0Dir.scaleInPlace(scale0);\n      vector1Dir.scaleInPlace(scale1);\n      result.copyFrom(vector0Dir).addInPlace(vector1Dir);\n      result.scaleInPlace(Scalar.Lerp(vector0Length, vector1Length, slerp));\n      return result;\n    }\n    /**\n     * Smooth interpolation between two vectors using Slerp\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#110\n     * @param source source vector\n     * @param goal goal vector\n     * @param deltaTime current interpolation frame\n     * @param lerpTime total interpolation time\n     * @param result the smoothed vector\n     */\n  }, {\n    key: \"SmoothToRef\",\n    value: function SmoothToRef(source, goal, deltaTime, lerpTime, result) {\n      Vector3.SlerpToRef(source, goal, lerpTime === 0 ? 1 : deltaTime / lerpTime, result);\n      return result;\n    }\n    /**\n     * Returns a new Vector3 set from the index \"offset\" of the given array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#83\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n    }\n    /**\n     * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @returns the new Vector3\n     * @deprecated Please use FromArray instead.\n     */\n  }, {\n    key: \"FromFloatArray\",\n    value: function FromFloatArray(array, offset) {\n      return Vector3.FromArray(array, offset);\n    }\n    /**\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#84\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param result defines the Vector3 where to store the result\n     * @deprecated Please use FromArrayToRef instead.\n     */\n  }, {\n    key: \"FromFloatArrayToRef\",\n    value: function FromFloatArrayToRef(array, offset, result) {\n      return Vector3.FromArrayToRef(array, offset, result);\n    }\n    /**\n     * Sets the given vector \"result\" with the given floats.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#85\n     * @param x defines the x coordinate of the source\n     * @param y defines the y coordinate of the source\n     * @param z defines the z coordinate of the source\n     * @param result defines the Vector3 where to store the result\n     */\n  }, {\n    key: \"FromFloatsToRef\",\n    value: function FromFloatsToRef(x, y, z, result) {\n      result.copyFromFloats(x, y, z);\n      return result;\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 0.0)\n     * @returns a new empty Vector3\n     */\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector3(0.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (1.0, 1.0, 1.0)\n     * @returns a new Vector3\n     */\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector3(1.0, 1.0, 1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 1.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new up Vector3\n     */\n  }, {\n    key: \"Up\",\n    value: function Up() {\n      return new Vector3(0.0, 1.0, 0.0);\n    }\n    /**\n     * Gets an up Vector3 that must not be updated\n     */\n  }, {\n    key: \"UpReadOnly\",\n    get: function get() {\n      return Vector3._UpReadOnly;\n    }\n    /**\n     * Gets a down Vector3 that must not be updated\n     */\n  }, {\n    key: \"DownReadOnly\",\n    get: function get() {\n      return Vector3._DownReadOnly;\n    }\n    /**\n     * Gets a right Vector3 that must not be updated\n     */\n  }, {\n    key: \"RightReadOnly\",\n    get: function get() {\n      return Vector3._RightReadOnly;\n    }\n    /**\n     * Gets a left Vector3 that must not be updated\n     */\n  }, {\n    key: \"LeftReadOnly\",\n    get: function get() {\n      return Vector3._LeftReadOnly;\n    }\n    /**\n     * Gets a forward Vector3 that must not be updated\n     */\n  }, {\n    key: \"LeftHandedForwardReadOnly\",\n    get: function get() {\n      return Vector3._LeftHandedForwardReadOnly;\n    }\n    /**\n     * Gets a forward Vector3 that must not be updated\n     */\n  }, {\n    key: \"RightHandedForwardReadOnly\",\n    get: function get() {\n      return Vector3._RightHandedForwardReadOnly;\n    }\n    /**\n     * Gets a zero Vector3 that must not be updated\n     */\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector3._ZeroReadOnly;\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, -1.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new down Vector3\n     */\n  }, {\n    key: \"Down\",\n    value: function Down() {\n      return new Vector3(0.0, -1.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, 1.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @param rightHandedSystem is the scene right-handed (negative z)\n     * @returns a new forward Vector3\n     */\n  }, {\n    key: \"Forward\",\n    value: function Forward() {\n      var rightHandedSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Vector3(0.0, 0.0, rightHandedSystem ? -1.0 : 1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (0.0, 0.0, -1.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @param rightHandedSystem is the scene right-handed (negative-z)\n     * @returns a new Backward Vector3\n     */\n  }, {\n    key: \"Backward\",\n    value: function Backward() {\n      var rightHandedSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return new Vector3(0.0, 0.0, rightHandedSystem ? 1.0 : -1.0);\n    }\n    /**\n     * Returns a new Vector3 set to (1.0, 0.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new right Vector3\n     */\n  }, {\n    key: \"Right\",\n    value: function Right() {\n      return new Vector3(1.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#71\n     * @returns a new left Vector3\n     */\n  }, {\n    key: \"Left\",\n    value: function Left() {\n      return new Vector3(-1.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes transformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#111\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the transformed Vector3\n     */\n  }, {\n    key: \"TransformCoordinates\",\n    value: function TransformCoordinates(vector, transformation) {\n      var result = Vector3.Zero();\n      Vector3.TransformCoordinatesToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes transformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#113\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformCoordinatesToRef\",\n    value: function TransformCoordinatesToRef(vector, transformation, result) {\n      Vector3.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes transformed coordinates only, not transformed direction vectors\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#115\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformCoordinatesFromFloatsToRef\",\n    value: function TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n      var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n      var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n      var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n      result.x = rx * rw;\n      result.y = ry * rw;\n      result.z = rz * rw;\n      return result;\n    }\n    /**\n     * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#112\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"TransformNormal\",\n    value: function TransformNormal(vector, transformation) {\n      var result = Vector3.Zero();\n      Vector3.TransformNormalToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#114\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformNormalToRef\",\n    value: function TransformNormalToRef(vector, transformation, result) {\n      this.TransformNormalFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\n     * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#116\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformNormalFromFloatsToRef\",\n    value: function TransformNormalFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      result.x = x * m[0] + y * m[4] + z * m[8];\n      result.y = x * m[1] + y * m[5] + z * m[9];\n      result.z = x * m[2] + y * m[6] + z * m[10];\n      return result;\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#69\n     * @param value1 defines the first control point\n     * @param value2 defines the second control point\n     * @param value3 defines the third control point\n     * @param value4 defines the fourth control point\n     * @param amount defines the amount on the spline to use\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"CatmullRom\",\n    value: function CatmullRom(value1, value2, value3, value4, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var x = 0.5 * (2.0 * value2._x + (-value1._x + value3._x) * amount + (2.0 * value1._x - 5.0 * value2._x + 4.0 * value3._x - value4._x) * squared + (-value1._x + 3.0 * value2._x - 3.0 * value3._x + value4._x) * cubed);\n      var y = 0.5 * (2.0 * value2._y + (-value1._y + value3._y) * amount + (2.0 * value1._y - 5.0 * value2._y + 4.0 * value3._y - value4._y) * squared + (-value1._y + 3.0 * value2._y - 3.0 * value3._y + value4._y) * cubed);\n      var z = 0.5 * (2.0 * value2._z + (-value1._z + value3._z) * amount + (2.0 * value1._z - 5.0 * value2._z + 4.0 * value3._z - value4._z) * squared + (-value1._z + 3.0 * value2._z - 3.0 * value3._z + value4._z) * cubed);\n      return new value1.constructor(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#76\n     * @param value defines the current value\n     * @param min defines the lower range value\n     * @param max defines the upper range value\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Clamp\",\n    value: function Clamp(value, min, max) {\n      var result = new value.constructor();\n      Vector3.ClampToRef(value, min, max, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\n     * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\n     * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#77\n     * @param value defines the current value\n     * @param min defines the lower range value\n     * @param max defines the upper range value\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"ClampToRef\",\n    value: function ClampToRef(value, min, max, result) {\n      var x = value._x;\n      x = x > max._x ? max._x : x;\n      x = x < min._x ? min._x : x;\n      var y = value._y;\n      y = y > max._y ? max._y : y;\n      y = y < min._y ? min._y : y;\n      var z = value._z;\n      z = z > max._z ? max._z : z;\n      z = z < min._z ? min._z : z;\n      result.copyFromFloats(x, y, z);\n      return result;\n    }\n    /**\n     * Checks if a given vector is inside a specific range\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#75\n     * @param v defines the vector to test\n     * @param min defines the minimum range\n     * @param max defines the maximum range\n     */\n  }, {\n    key: \"CheckExtends\",\n    value: function CheckExtends(v, min, max) {\n      min.minimizeInPlace(v);\n      max.maximizeInPlace(v);\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#89\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent vector\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent vector\n     * @param amount defines the amount on the interpolation spline (between 0 and 1)\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n      var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n      var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n      return new value1.constructor(x, y, z);\n    }\n    /**\n     * Returns a new Vector3 which is the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#90\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = new value1.constructor();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Update a Vector3 with the 1st derivative of the Hermite spline defined by the vectors \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#91\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where to store the derivative\n     * @returns result input\n     */\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n      result.z = (t2 - time) * 6 * value1.z + (3 * t2 - 4 * time + 1) * tangent1.z + (-t2 + time) * 6 * value2.z + (3 * t2 - 2 * time) * tangent2.z;\n      return result;\n    }\n    /**\n     * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#95\n     * @param start defines the start value\n     * @param end defines the end value\n     * @param amount max defines amount between both (between 0 and 1)\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(start, end, amount) {\n      var result = new start.constructor(0, 0, 0);\n      Vector3.LerpToRef(start, end, amount, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#93\n     * @param start defines the start value\n     * @param end defines the end value\n     * @param amount max defines amount between both (between 0 and 1)\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"LerpToRef\",\n    value: function LerpToRef(start, end, amount, result) {\n      result.x = start._x + (end._x - start._x) * amount;\n      result.y = start._y + (end._y - start._y) * amount;\n      result.z = start._z + (end._z - start._z) * amount;\n      return result;\n    }\n    /**\n     * Returns the dot product (float) between the vectors \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#82\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the dot product\n     */\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left._x * right._x + left._y * right._y + left._z * right._z;\n    }\n    /**\n     * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\n     * The cross product is then orthogonal to both \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#15\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the cross product\n     */\n  }, {\n    key: \"Cross\",\n    value: function Cross(left, right) {\n      var result = new left.constructor();\n      Vector3.CrossToRef(left, right, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\n     * The cross product is then orthogonal to both \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#78\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"CrossToRef\",\n    value: function CrossToRef(left, right, result) {\n      var x = left._y * right._z - left._z * right._y;\n      var y = left._z * right._x - left._x * right._z;\n      var z = left._x * right._y - left._y * right._x;\n      result.copyFromFloats(x, y, z);\n      return result;\n    }\n    /**\n     * Returns a new Vector3 as the normalization of the given vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#98\n     * @param vector defines the Vector3 to normalize\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var result = Vector3.Zero();\n      Vector3.NormalizeToRef(vector, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the normalization of the given first vector\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#98\n     * @param vector defines the Vector3 to normalize\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      vector.normalizeToRef(result);\n      return result;\n    }\n    /**\n     * Project a Vector3 onto screen space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#101\n     * @param vector defines the Vector3 to project\n     * @param world defines the world matrix to use\n     * @param transform defines the transform (view x projection) matrix to use\n     * @param viewport defines the screen viewport to use\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Project\",\n    value: function Project(vector, world, transform, viewport) {\n      var result = new vector.constructor();\n      Vector3.ProjectToRef(vector, world, transform, viewport, result);\n      return result;\n    }\n    /**\n     * Project a Vector3 onto screen space to reference\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#102\n     * @param vector defines the Vector3 to project\n     * @param world defines the world matrix to use\n     * @param transform defines the transform (view x projection) matrix to use\n     * @param viewport defines the screen viewport to use\n     * @param result the vector in which the screen space will be stored\n     * @returns result input\n     */\n  }, {\n    key: \"ProjectToRef\",\n    value: function ProjectToRef(vector, world, transform, viewport, result) {\n      var cw = viewport.width;\n      var ch = viewport.height;\n      var cx = viewport.x;\n      var cy = viewport.y;\n      var viewportMatrix = MathTmp.Matrix[1];\n      Matrix.FromValuesToRef(cw / 2.0, 0, 0, 0, 0, -ch / 2.0, 0, 0, 0, 0, 0.5, 0, cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\n      var matrix = MathTmp.Matrix[0];\n      world.multiplyToRef(transform, matrix);\n      matrix.multiplyToRef(viewportMatrix, matrix);\n      Vector3.TransformCoordinatesToRef(vector, matrix, result);\n      return result;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_UnprojectFromInvertedMatrixToRef\",\n    value: function _UnprojectFromInvertedMatrixToRef(source, matrix, result) {\n      Vector3.TransformCoordinatesToRef(source, matrix, result);\n      var m = matrix.m;\n      var num = source._x * m[3] + source._y * m[7] + source._z * m[11] + m[15];\n      if (Scalar.WithinEpsilon(num, 1.0)) {\n        result.scaleInPlace(1.0 / num);\n      }\n      return result;\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#121\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param transform defines the transform (view x projection) matrix to use\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"UnprojectFromTransform\",\n    value: function UnprojectFromTransform(source, viewportWidth, viewportHeight, world, transform) {\n      return this.Unproject(source, viewportWidth, viewportHeight, world, transform, Matrix.IdentityReadOnly);\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#117\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Unproject\",\n    value: function Unproject(source, viewportWidth, viewportHeight, world, view, projection) {\n      var result = new source.constructor();\n      Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\n      return result;\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#119\n     * @param source defines the screen space Vector3 to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"UnprojectToRef\",\n    value: function UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result) {\n      Vector3.UnprojectFloatsToRef(source._x, source._y, source._z, viewportWidth, viewportHeight, world, view, projection, result);\n      return result;\n    }\n    /**\n     * Unproject from screen space to object space\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#120\n     * @param sourceX defines the screen space x coordinate to use\n     * @param sourceY defines the screen space y coordinate to use\n     * @param sourceZ defines the screen space z coordinate to use\n     * @param viewportWidth defines the current width of the viewport\n     * @param viewportHeight defines the current height of the viewport\n     * @param world defines the world matrix to use (can be set to Identity to go to world space)\n     * @param view defines the view matrix to use\n     * @param projection defines the projection matrix to use\n     * @param result defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"UnprojectFloatsToRef\",\n    value: function UnprojectFloatsToRef(sourceX, sourceY, sourceZ, viewportWidth, viewportHeight, world, view, projection, result) {\n      var _a;\n      var matrix = MathTmp.Matrix[0];\n      world.multiplyToRef(view, matrix);\n      matrix.multiplyToRef(projection, matrix);\n      matrix.invert();\n      var screenSource = MathTmp.Vector3[0];\n      screenSource.x = sourceX / viewportWidth * 2 - 1;\n      screenSource.y = -(sourceY / viewportHeight * 2 - 1);\n      if ((_a = EngineStore.LastCreatedEngine) === null || _a === void 0 ? void 0 : _a.isNDCHalfZRange) {\n        screenSource.z = sourceZ;\n      } else {\n        screenSource.z = 2 * sourceZ - 1.0;\n      }\n      Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\n      return result;\n    }\n    /**\n     * Gets the minimal coordinate values between two Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#97\n     * @param left defines the first operand\n     * @param right defines the second operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var min = new left.constructor();\n      min.copyFrom(left);\n      min.minimizeInPlace(right);\n      return min;\n    }\n    /**\n     * Gets the maximal coordinate values between two Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#96\n     * @param left defines the first operand\n     * @param right defines the second operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var max = new left.constructor();\n      max.copyFrom(left);\n      max.maximizeInPlace(right);\n      return max;\n    }\n    /**\n     * Returns the distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#81\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the distance\n     */\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance between the vectors \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#80\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the squared distance\n     */\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1._x - value2._x;\n      var y = value1._y - value2._y;\n      var z = value1._z - value2._z;\n      return x * x + y * y + z * z;\n    }\n    /**\n     * Projects \"vector\" on the triangle determined by its extremities \"p0\", \"p1\" and \"p2\", stores the result in \"ref\"\n     * and returns the distance to the projected point.\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#104\n     * From http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.104.4264&rep=rep1&type=pdf\n     *\n     * @param vector the vector to get distance from\n     * @param p0 extremity of the triangle\n     * @param p1 extremity of the triangle\n     * @param p2 extremity of the triangle\n     * @param ref variable to store the result to\n     * @returns The distance between \"ref\" and \"vector\"\n     */\n  }, {\n    key: \"ProjectOnTriangleToRef\",\n    value: function ProjectOnTriangleToRef(vector, p0, p1, p2, ref) {\n      var p1p0 = MathTmp.Vector3[0];\n      var p2p0 = MathTmp.Vector3[1];\n      var p2p1 = MathTmp.Vector3[2];\n      var normal = MathTmp.Vector3[3];\n      var vectorp0 = MathTmp.Vector3[4];\n      // Triangle vectors\n      p1.subtractToRef(p0, p1p0);\n      p2.subtractToRef(p0, p2p0);\n      p2.subtractToRef(p1, p2p1);\n      var p1p0L = p1p0.length();\n      var p2p0L = p2p0.length();\n      var p2p1L = p2p1.length();\n      if (p1p0L < Epsilon || p2p0L < Epsilon || p2p1L < Epsilon) {\n        // This is a degenerate triangle. As we assume this is part of a non-degenerate mesh,\n        // we will find a better intersection later.\n        // Let's just return one of the extremities\n        ref.copyFrom(p0);\n        return Vector3.Distance(vector, p0);\n      }\n      // Compute normal and vector to p0\n      vector.subtractToRef(p0, vectorp0);\n      Vector3.CrossToRef(p1p0, p2p0, normal);\n      var nl = normal.length();\n      if (nl < Epsilon) {\n        // Extremities are aligned, we are back on the case of a degenerate triangle\n        ref.copyFrom(p0);\n        return Vector3.Distance(vector, p0);\n      }\n      normal.normalizeFromLength(nl);\n      var l = vectorp0.length();\n      if (l < Epsilon) {\n        // Vector is p0\n        ref.copyFrom(p0);\n        return 0;\n      }\n      vectorp0.normalizeFromLength(l);\n      // Project to \"proj\" that lies on the triangle plane\n      var cosA = Vector3.Dot(normal, vectorp0);\n      var projVector = MathTmp.Vector3[5];\n      var proj = MathTmp.Vector3[6];\n      projVector.copyFrom(normal).scaleInPlace(-l * cosA);\n      proj.copyFrom(vector).addInPlace(projVector);\n      // Compute barycentric coordinates (v0, v1 and v2 are axis from barycenter to extremities)\n      var v0 = MathTmp.Vector3[4];\n      var v1 = MathTmp.Vector3[5];\n      var v2 = MathTmp.Vector3[7];\n      var tmp = MathTmp.Vector3[8];\n      v0.copyFrom(p1p0).scaleInPlace(1 / p1p0L);\n      tmp.copyFrom(p2p0).scaleInPlace(1 / p2p0L);\n      v0.addInPlace(tmp).scaleInPlace(-1);\n      v1.copyFrom(p1p0).scaleInPlace(-1 / p1p0L);\n      tmp.copyFrom(p2p1).scaleInPlace(1 / p2p1L);\n      v1.addInPlace(tmp).scaleInPlace(-1);\n      v2.copyFrom(p2p1).scaleInPlace(-1 / p2p1L);\n      tmp.copyFrom(p2p0).scaleInPlace(-1 / p2p0L);\n      v2.addInPlace(tmp).scaleInPlace(-1);\n      // Determines which edge of the triangle is closest to \"proj\"\n      var projP = MathTmp.Vector3[9];\n      var dot;\n      projP.copyFrom(proj).subtractInPlace(p0);\n      Vector3.CrossToRef(v0, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s0 = dot;\n      projP.copyFrom(proj).subtractInPlace(p1);\n      Vector3.CrossToRef(v1, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s1 = dot;\n      projP.copyFrom(proj).subtractInPlace(p2);\n      Vector3.CrossToRef(v2, projP, tmp);\n      dot = Vector3.Dot(tmp, normal);\n      var s2 = dot;\n      var edge = MathTmp.Vector3[10];\n      var e0, e1;\n      if (s0 > 0 && s1 < 0) {\n        edge.copyFrom(p1p0);\n        e0 = p0;\n        e1 = p1;\n      } else if (s1 > 0 && s2 < 0) {\n        edge.copyFrom(p2p1);\n        e0 = p1;\n        e1 = p2;\n      } else {\n        edge.copyFrom(p2p0).scaleInPlace(-1);\n        e0 = p2;\n        e1 = p0;\n      }\n      // Determines if \"proj\" lies inside the triangle\n      var tmp2 = MathTmp.Vector3[9];\n      var tmp3 = MathTmp.Vector3[4];\n      e0.subtractToRef(proj, tmp);\n      e1.subtractToRef(proj, tmp2);\n      Vector3.CrossToRef(tmp, tmp2, tmp3);\n      var isOutside = Vector3.Dot(tmp3, normal) < 0;\n      // If inside, we already found the projected point, \"proj\"\n      if (!isOutside) {\n        ref.copyFrom(proj);\n        return Math.abs(l * cosA);\n      }\n      // If outside, we find \"triProj\", the closest point from \"proj\" on the closest edge\n      var r = MathTmp.Vector3[5];\n      Vector3.CrossToRef(edge, tmp3, r);\n      r.normalize();\n      var e0proj = MathTmp.Vector3[9];\n      e0proj.copyFrom(e0).subtractInPlace(proj);\n      var e0projL = e0proj.length();\n      if (e0projL < Epsilon) {\n        // Proj is e0\n        ref.copyFrom(e0);\n        return Vector3.Distance(vector, e0);\n      }\n      e0proj.normalizeFromLength(e0projL);\n      var cosG = Vector3.Dot(r, e0proj);\n      var triProj = MathTmp.Vector3[7];\n      triProj.copyFrom(proj).addInPlace(r.scaleInPlace(e0projL * cosG));\n      // Now we clamp \"triProj\" so it lies between e0 and e1\n      tmp.copyFrom(triProj).subtractInPlace(e0);\n      l = edge.length();\n      edge.normalizeFromLength(l);\n      var t = Vector3.Dot(tmp, edge) / Math.max(l, Epsilon);\n      t = Scalar.Clamp(t, 0, 1);\n      triProj.copyFrom(e0).addInPlace(edge.scaleInPlace(t * l));\n      ref.copyFrom(triProj);\n      return Vector3.Distance(vector, triProj);\n    }\n    /**\n     * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#72\n     * @param value1 defines the first operand\n     * @param value2 defines the second operand\n     * @returns the new Vector3\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      return Vector3.CenterToRef(value1, value2, Vector3.Zero());\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#73\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1._x + value2._x) / 2, (value1._y + value2._y) / 2, (value1._z + value2._z) / 2);\n    }\n    /**\n     * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\n     * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\n     * to something in order to rotate it from its local system to the given target system\n     * Note: axis1, axis2 and axis3 are normalized during this operation\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#106\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @returns a new Vector3\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/target_align\n     */\n  }, {\n    key: \"RotationFromAxis\",\n    value: function RotationFromAxis(axis1, axis2, axis3) {\n      var rotation = new axis1.constructor();\n      Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n      return rotation;\n    }\n    /**\n     * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\n     * Example Playground https://playground.babylonjs.com/#R1F8YU#107\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @param ref defines the Vector3 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"RotationFromAxisToRef\",\n    value: function RotationFromAxisToRef(axis1, axis2, axis3, ref) {\n      var quat = MathTmp.Quaternion[0];\n      Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n      quat.toEulerAnglesToRef(ref);\n      return ref;\n    }\n  }]);\n  return Vector3;\n}();\nVector3._UpReadOnly = Vector3.Up();\nVector3._DownReadOnly = Vector3.Down();\nVector3._LeftHandedForwardReadOnly = Vector3.Forward(false);\nVector3._RightHandedForwardReadOnly = Vector3.Forward(true);\nVector3._RightReadOnly = Vector3.Right();\nVector3._LeftReadOnly = Vector3.Left();\nVector3._ZeroReadOnly = Vector3.Zero();\n/**\n * Vector4 class created for EulerAngle class conversion to Quaternion\n */\nexport var Vector4 = /*#__PURE__*/function () {\n  /**\n   * Creates a Vector4 object from the given floats.\n   * @param x x value of the vector\n   * @param y y value of the vector\n   * @param z z value of the vector\n   * @param w w value of the vector\n   */\n  function Vector4() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    _classCallCheck(this, Vector4);\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\n   * Returns the string with the Vector4 coordinates.\n   * @returns a string containing all the vector values\n   */\n  _createClass(Vector4, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this.x, \" Y: \").concat(this.y, \" Z: \").concat(this.z, \" W: \").concat(this.w, \"}\");\n    }\n    /**\n     * Returns the string \"Vector4\".\n     * @returns \"Vector4\"\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Vector4\";\n    }\n    /**\n     * Returns the Vector4 hash code.\n     * @returns a unique hash code\n     */\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this.x);\n      var y = _ExtractAsInt(this.y);\n      var z = _ExtractAsInt(this.z);\n      var w = _ExtractAsInt(this.w);\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      hash = hash * 397 ^ w;\n      return hash;\n    }\n    // Operators\n    /**\n     * Returns a new array populated with 4 elements : the Vector4 coordinates.\n     * @returns the resulting array\n     */\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      var result = new Array();\n      this.toArray(result, 0);\n      return result;\n    }\n    /**\n     * Populates the given array from the given index with the Vector4 coordinates.\n     * @param array array to populate\n     * @param index index of the array to start at (default: 0)\n     * @returns the Vector4.\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray(array, index) {\n      if (index === undefined) {\n        index = 0;\n      }\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      array[index + 2] = this.z;\n      array[index + 3] = this.w;\n      return this;\n    }\n    /**\n     * Update the current vector from an array\n     * @param array defines the destination array\n     * @param index defines the offset in the destination array\n     * @returns the current Vector3\n     */\n  }, {\n    key: \"fromArray\",\n    value: function fromArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Vector4.FromArrayToRef(array, index, this);\n      return this;\n    }\n    /**\n     * Adds the given vector to the current Vector4.\n     * @param otherVector the vector to add\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(otherVector) {\n      this.x += otherVector.x;\n      this.y += otherVector.y;\n      this.z += otherVector.z;\n      this.w += otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\n     * @param otherVector the vector to add\n     * @returns the resulting vector\n     */\n  }, {\n    key: \"add\",\n    value: function add(otherVector) {\n      return new this.constructor(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\n     * @param otherVector the vector to add\n     * @param result the vector to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(otherVector, result) {\n      result.x = this.x + otherVector.x;\n      result.y = this.y + otherVector.y;\n      result.z = this.z + otherVector.z;\n      result.w = this.w + otherVector.w;\n      return result;\n    }\n    /**\n     * Subtract in place the given vector from the current Vector4.\n     * @param otherVector the vector to subtract\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(otherVector) {\n      this.x -= otherVector.x;\n      this.y -= otherVector.y;\n      this.z -= otherVector.z;\n      this.w -= otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector the vector to add\n     * @returns the new vector with the result\n     */\n  }, {\n    key: \"subtract\",\n    value: function subtract(otherVector) {\n      return new this.constructor(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\n     * @param otherVector the vector to subtract\n     * @param result the vector to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"subtractToRef\",\n    value: function subtractToRef(otherVector, result) {\n      result.x = this.x - otherVector.x;\n      result.y = this.y - otherVector.y;\n      result.z = this.z - otherVector.z;\n      result.w = this.w - otherVector.w;\n      return result;\n    }\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     */\n    /**\n     * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x value to subtract\n     * @param y value to subtract\n     * @param z value to subtract\n     * @param w value to subtract\n     * @returns new vector containing the result\n     */\n  }, {\n    key: \"subtractFromFloats\",\n    value: function subtractFromFloats(x, y, z, w) {\n      return new this.constructor(this.x - x, this.y - y, this.z - z, this.w - w);\n    }\n    /**\n     * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\n     * @param x value to subtract\n     * @param y value to subtract\n     * @param z value to subtract\n     * @param w value to subtract\n     * @param result the vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"subtractFromFloatsToRef\",\n    value: function subtractFromFloatsToRef(x, y, z, w, result) {\n      result.x = this.x - x;\n      result.y = this.y - y;\n      result.z = this.z - z;\n      result.w = this.w - w;\n      return result;\n    }\n    /**\n     * Returns a new Vector4 set with the current Vector4 negated coordinates.\n     * @returns a new vector with the negated values\n     */\n  }, {\n    key: \"negate\",\n    value: function negate() {\n      return new this.constructor(-this.x, -this.y, -this.z, -this.w);\n    }\n    /**\n     * Negate this vector in place\n     * @returns this\n     */\n  }, {\n    key: \"negateInPlace\",\n    value: function negateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      this.w *= -1;\n      return this;\n    }\n    /**\n     * Negate the current Vector4 and stores the result in the given vector \"result\" coordinates\n     * @param result defines the Vector3 object where to store the result\n     * @returns the result\n     */\n  }, {\n    key: \"negateToRef\",\n    value: function negateToRef(result) {\n      return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1, this.w * -1);\n    }\n    /**\n     * Multiplies the current Vector4 coordinates by scale (float).\n     * @param scale the number to scale with\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(scale) {\n      this.x *= scale;\n      this.y *= scale;\n      this.z *= scale;\n      this.w *= scale;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale the number to scale with\n     * @returns a new vector with the result\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(_scale3) {\n      return new this.constructor(this.x * _scale3, this.y * _scale3, this.z * _scale3, this.w * _scale3);\n    }\n    /**\n     * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\n     * @param scale the number to scale with\n     * @param result a vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this.x * scale;\n      result.y = this.y * scale;\n      result.z = this.z * scale;\n      result.w = this.w * scale;\n      return result;\n    }\n    /**\n     * Scale the current Vector4 values by a factor and add the result to a given Vector4\n     * @param scale defines the scale factor\n     * @param result defines the Vector4 object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this.x * scale;\n      result.y += this.y * scale;\n      result.z += this.z * scale;\n      result.w += this.w * scale;\n      return result;\n    }\n    /**\n     * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\n     * @param otherVector the vector to compare against\n     * @returns true if they are equal\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(otherVector) {\n      return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\n    }\n    /**\n     * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\n     * @param otherVector vector to compare against\n     * @param epsilon (Default: very small number)\n     * @returns true if they are equal\n     */\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherVector) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\n    }\n    /**\n     * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\n     * @param x x value to compare against\n     * @param y y value to compare against\n     * @param z z value to compare against\n     * @param w w value to compare against\n     * @returns true if equal\n     */\n  }, {\n    key: \"equalsToFloats\",\n    value: function equalsToFloats(x, y, z, w) {\n      return this.x === x && this.y === y && this.z === z && this.w === w;\n    }\n    /**\n     * Multiplies in place the current Vector4 by the given one.\n     * @param otherVector vector to multiple with\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(otherVector) {\n      this.x *= otherVector.x;\n      this.y *= otherVector.y;\n      this.z *= otherVector.z;\n      this.w *= otherVector.w;\n      return this;\n    }\n    /**\n     * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector vector to multiple with\n     * @returns resulting new vector\n     */\n  }, {\n    key: \"multiply\",\n    value: function multiply(otherVector) {\n      return new this.constructor(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\n     * @param otherVector vector to multiple with\n     * @param result vector to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(otherVector, result) {\n      result.x = this.x * otherVector.x;\n      result.y = this.y * otherVector.y;\n      result.z = this.z * otherVector.z;\n      result.w = this.w * otherVector.w;\n      return result;\n    }\n    /**\n     * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\n     * @param x x value multiply with\n     * @param y y value multiply with\n     * @param z z value multiply with\n     * @param w w value multiply with\n     * @returns resulting new vector\n     */\n  }, {\n    key: \"multiplyByFloats\",\n    value: function multiplyByFloats(x, y, z, w) {\n      return new this.constructor(this.x * x, this.y * y, this.z * z, this.w * w);\n    }\n    /**\n     * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\n     * @param otherVector vector to devide with\n     * @returns resulting new vector\n     */\n  }, {\n    key: \"divide\",\n    value: function divide(otherVector) {\n      return new this.constructor(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n    }\n    /**\n     * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\n     * @param otherVector vector to devide with\n     * @param result vector to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"divideToRef\",\n    value: function divideToRef(otherVector, result) {\n      result.x = this.x / otherVector.x;\n      result.y = this.y / otherVector.y;\n      result.z = this.z / otherVector.z;\n      result.w = this.w / otherVector.w;\n      return result;\n    }\n    /**\n     * Divides the current Vector3 coordinates by the given ones.\n     * @param otherVector vector to devide with\n     * @returns the updated Vector3.\n     */\n  }, {\n    key: \"divideInPlace\",\n    value: function divideInPlace(otherVector) {\n      return this.divideToRef(otherVector, this);\n    }\n    /**\n     * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\n     * @param other defines the second operand\n     * @returns the current updated Vector4\n     */\n  }, {\n    key: \"minimizeInPlace\",\n    value: function minimizeInPlace(other) {\n      if (other.x < this.x) {\n        this.x = other.x;\n      }\n      if (other.y < this.y) {\n        this.y = other.y;\n      }\n      if (other.z < this.z) {\n        this.z = other.z;\n      }\n      if (other.w < this.w) {\n        this.w = other.w;\n      }\n      return this;\n    }\n    /**\n     * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\n     * @param other defines the second operand\n     * @returns the current updated Vector4\n     */\n  }, {\n    key: \"maximizeInPlace\",\n    value: function maximizeInPlace(other) {\n      if (other.x > this.x) {\n        this.x = other.x;\n      }\n      if (other.y > this.y) {\n        this.y = other.y;\n      }\n      if (other.z > this.z) {\n        this.z = other.z;\n      }\n      if (other.w > this.w) {\n        this.w = other.w;\n      }\n      return this;\n    }\n    /**\n     * Gets a new Vector4 from current Vector4 floored values\n     * @returns a new Vector4\n     */\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      return new this.constructor(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n    }\n    /**\n     * Gets a new Vector4 from current Vector4 fractional values\n     * @returns a new Vector4\n     */\n  }, {\n    key: \"fract\",\n    value: function fract() {\n      return new this.constructor(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n    }\n    // Properties\n    /**\n     * Returns the Vector4 length (float).\n     * @returns the length\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n    }\n    /**\n     * Returns the Vector4 squared length (float).\n     * @returns the length squared\n     */\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n    }\n    // Methods\n    /**\n     * Normalizes in place the Vector4.\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var len = this.length();\n      if (len === 0) {\n        return this;\n      }\n      return this.scaleInPlace(1.0 / len);\n    }\n    /**\n     * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\n     * @returns this converted to a new vector3\n     */\n  }, {\n    key: \"toVector3\",\n    value: function toVector3() {\n      return new Vector3(this.x, this.y, this.z);\n    }\n    /**\n     * Returns a new Vector4 copied from the current one.\n     * @returns the new cloned vector\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this.x, this.y, this.z, this.w);\n    }\n    /**\n     * Updates the current Vector4 with the given one coordinates.\n     * @param source the source vector to copy from\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(source) {\n      this.x = source.x;\n      this.y = source.y;\n      this.z = source.z;\n      this.w = source.w;\n      return this;\n    }\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x float to copy from\n     * @param y float to copy from\n     * @param z float to copy from\n     * @param w float to copy from\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n    /**\n     * Updates the current Vector4 coordinates with the given floats.\n     * @param x float to set from\n     * @param y float to set from\n     * @param z float to set from\n     * @param w float to set from\n     * @returns the updated Vector4.\n     */\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      return this.copyFromFloats(x, y, z, w);\n    }\n    /**\n     * Copies the given float to the current Vector3 coordinates\n     * @param v defines the x, y, z and w coordinates of the operand\n     * @returns the current updated Vector3\n     */\n  }, {\n    key: \"setAll\",\n    value: function setAll(v) {\n      this.x = this.y = this.z = this.w = v;\n      return this;\n    }\n    // Statics\n    /**\n     * Returns a new Vector4 set from the starting index of the given array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @returns the new vector\n     */\n  }], [{\n    key: \"FromArray\",\n    value: function FromArray(array, offset) {\n      if (!offset) {\n        offset = 0;\n      }\n      return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    /**\n     * Updates the given vector \"result\" from the starting index of the given array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n      result.w = array[offset + 3];\n      return result;\n    }\n    /**\n     * Updates the given vector \"result\" from the starting index of the given Float32Array.\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"FromFloatArrayToRef\",\n    value: function FromFloatArrayToRef(array, offset, result) {\n      Vector4.FromArrayToRef(array, offset, result);\n      return result;\n    }\n    /**\n     * Updates the given vector \"result\" coordinates from the given floats.\n     * @param x float to set from\n     * @param y float to set from\n     * @param z float to set from\n     * @param w float to set from\n     * @param result the vector to the floats in\n     * @returns result input\n     */\n  }, {\n    key: \"FromFloatsToRef\",\n    value: function FromFloatsToRef(x, y, z, w, result) {\n      result.x = x;\n      result.y = y;\n      result.z = z;\n      result.w = w;\n      return result;\n    }\n    /**\n     * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\n     * @returns the new vector\n     */\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Vector4(0.0, 0.0, 0.0, 0.0);\n    }\n    /**\n     * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\n     * @returns the new vector\n     */\n  }, {\n    key: \"One\",\n    value: function One() {\n      return new Vector4(1.0, 1.0, 1.0, 1.0);\n    }\n    /**\n     * Gets a zero Vector4 that must not be updated\n     */\n  }, {\n    key: \"ZeroReadOnly\",\n    get: function get() {\n      return Vector4._ZeroReadOnly;\n    }\n    /**\n     * Returns a new normalized Vector4 from the given one.\n     * @param vector the vector to normalize\n     * @returns the vector\n     */\n  }, {\n    key: \"Normalize\",\n    value: function Normalize(vector) {\n      var result = Vector4.Zero();\n      Vector4.NormalizeToRef(vector, result);\n      return result;\n    }\n    /**\n     * Updates the given vector \"result\" from the normalization of the given one.\n     * @param vector the vector to normalize\n     * @param result the vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"NormalizeToRef\",\n    value: function NormalizeToRef(vector, result) {\n      result.copyFrom(vector);\n      result.normalize();\n      return result;\n    }\n    /**\n     * Returns a vector with the minimum values from the left and right vectors\n     * @param left left vector to minimize\n     * @param right right vector to minimize\n     * @returns a new vector with the minimum of the left and right vector values\n     */\n  }, {\n    key: \"Minimize\",\n    value: function Minimize(left, right) {\n      var min = new left.constructor();\n      min.copyFrom(left);\n      min.minimizeInPlace(right);\n      return min;\n    }\n    /**\n     * Returns a vector with the maximum values from the left and right vectors\n     * @param left left vector to maximize\n     * @param right right vector to maximize\n     * @returns a new vector with the maximum of the left and right vector values\n     */\n  }, {\n    key: \"Maximize\",\n    value: function Maximize(left, right) {\n      var max = new left.constructor();\n      max.copyFrom(left);\n      max.maximizeInPlace(right);\n      return max;\n    }\n    /**\n     * Returns the distance (float) between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the distance between\n     * @param value2 value to calulate the distance between\n     * @returns the distance between the two vectors\n     */\n  }, {\n    key: \"Distance\",\n    value: function Distance(value1, value2) {\n      return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n    }\n    /**\n     * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the distance between\n     * @param value2 value to calulate the distance between\n     * @returns the distance between the two vectors squared\n     */\n  }, {\n    key: \"DistanceSquared\",\n    value: function DistanceSquared(value1, value2) {\n      var x = value1.x - value2.x;\n      var y = value1.y - value2.y;\n      var z = value1.z - value2.z;\n      var w = value1.w - value2.w;\n      return x * x + y * y + z * z + w * w;\n    }\n    /**\n     * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\n     * @param value1 value to calulate the center between\n     * @param value2 value to calulate the center between\n     * @returns the center between the two vectors\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(value1, value2) {\n      return Vector4.CenterToRef(value1, value2, Vector4.Zero());\n    }\n    /**\n     * Gets the center of the vectors \"value1\" and \"value2\" and stores the result in the vector \"ref\"\n     * @param value1 defines first vector\n     * @param value2 defines second vector\n     * @param ref defines third vector\n     * @returns ref\n     */\n  }, {\n    key: \"CenterToRef\",\n    value: function CenterToRef(value1, value2, ref) {\n      return ref.copyFromFloats((value1.x + value2.x) / 2, (value1.y + value2.y) / 2, (value1.z + value2.z) / 2, (value1.w + value2.w) / 2);\n    }\n    /**\n     * Returns a new Vector4 set with the result of the transformation by the given matrix of the given vector.\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * The difference with Vector3.TransformCoordinates is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @returns the transformed Vector4\n     */\n  }, {\n    key: \"TransformCoordinates\",\n    value: function TransformCoordinates(vector, transformation) {\n      var result = Vector4.Zero();\n      Vector4.TransformCoordinatesToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\n     * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\n     * The difference with Vector3.TransformCoordinatesToRef is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param vector defines the Vector3 to transform\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector4 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformCoordinatesToRef\",\n    value: function TransformCoordinatesToRef(vector, transformation, result) {\n      Vector4.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\n     * This method computes tranformed coordinates only, not transformed direction vectors\n     * The difference with Vector3.TransformCoordinatesFromFloatsToRef is that the w component is not used to divide the other coordinates but is returned in the w coordinate instead\n     * @param x define the x coordinate of the source vector\n     * @param y define the y coordinate of the source vector\n     * @param z define the z coordinate of the source vector\n     * @param transformation defines the transformation matrix\n     * @param result defines the Vector4 where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"TransformCoordinatesFromFloatsToRef\",\n    value: function TransformCoordinatesFromFloatsToRef(x, y, z, transformation, result) {\n      var m = transformation.m;\n      var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n      var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n      var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n      var rw = x * m[3] + y * m[7] + z * m[11] + m[15];\n      result.x = rx;\n      result.y = ry;\n      result.z = rz;\n      result.w = rw;\n      return result;\n    }\n    /**\n     * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector the vector to transform\n     * @param transformation the transformation matrix to apply\n     * @returns the new vector\n     */\n  }, {\n    key: \"TransformNormal\",\n    value: function TransformNormal(vector, transformation) {\n      var result = new vector.constructor();\n      Vector4.TransformNormalToRef(vector, transformation, result);\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\n     * This methods computes transformed normalized direction vectors only.\n     * @param vector the vector to transform\n     * @param transformation the transformation matrix to apply\n     * @param result the vector to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"TransformNormalToRef\",\n    value: function TransformNormalToRef(vector, transformation, result) {\n      var m = transformation.m;\n      var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n      var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n      var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n      result.x = x;\n      result.y = y;\n      result.z = z;\n      result.w = vector.w;\n      return result;\n    }\n    /**\n     * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\n     * This methods computes transformed normalized direction vectors only.\n     * @param x value to transform\n     * @param y value to transform\n     * @param z value to transform\n     * @param w value to transform\n     * @param transformation the transformation matrix to apply\n     * @param result the vector to store the results in\n     * @returns result input\n     */\n  }, {\n    key: \"TransformNormalFromFloatsToRef\",\n    value: function TransformNormalFromFloatsToRef(x, y, z, w, transformation, result) {\n      var m = transformation.m;\n      result.x = x * m[0] + y * m[4] + z * m[8];\n      result.y = x * m[1] + y * m[5] + z * m[9];\n      result.z = x * m[2] + y * m[6] + z * m[10];\n      result.w = w;\n      return result;\n    }\n    /**\n     * Creates a new Vector4 from a Vector3\n     * @param source defines the source data\n     * @param w defines the 4th component (default is 0)\n     * @returns a new Vector4\n     */\n  }, {\n    key: \"FromVector3\",\n    value: function FromVector3(source) {\n      var w = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      return new Vector4(source._x, source._y, source._z, w);\n    }\n  }]);\n  return Vector4;\n}();\nVector4._ZeroReadOnly = Vector4.Zero();\n/**\n * Class used to store quaternion data\n * Example Playground - Overview - https://playground.babylonjs.com/#L49EJ7#100\n * @see https://en.wikipedia.org/wiki/Quaternion\n * @see https://doc.babylonjs.com/features/position,_rotation,_scaling\n */\nexport var Quaternion = /*#__PURE__*/function () {\n  /**\n   * Creates a new Quaternion from the given floats\n   * @param x defines the first component (0 by default)\n   * @param y defines the second component (0 by default)\n   * @param z defines the third component (0 by default)\n   * @param w defines the fourth component (1.0 by default)\n   */\n  function Quaternion() {\n    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n    var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.0;\n    var w = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n    _classCallCheck(this, Quaternion);\n    /** @internal */\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n  /** Gets or sets the x coordinate */\n  _createClass(Quaternion, [{\n    key: \"x\",\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the y coordinate */\n  }, {\n    key: \"y\",\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the z coordinate */\n  }, {\n    key: \"z\",\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    }\n    /** Gets or sets the w coordinate */\n  }, {\n    key: \"w\",\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n      this._isDirty = true;\n    }\n    /**\n     * Gets a string representation for the current quaternion\n     * @returns a string with the Quaternion coordinates\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"{X: \".concat(this._x, \" Y: \").concat(this._y, \" Z: \").concat(this._z, \" W: \").concat(this._w, \"}\");\n    }\n    /**\n     * Gets the class name of the quaternion\n     * @returns the string \"Quaternion\"\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Quaternion\";\n    }\n    /**\n     * Gets a hash code for this quaternion\n     * @returns the quaternion hash code\n     */\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var x = _ExtractAsInt(this._x);\n      var y = _ExtractAsInt(this._y);\n      var z = _ExtractAsInt(this._z);\n      var w = _ExtractAsInt(this._w);\n      var hash = x;\n      hash = hash * 397 ^ y;\n      hash = hash * 397 ^ z;\n      hash = hash * 397 ^ w;\n      return hash;\n    }\n    /**\n     * Copy the quaternion to an array\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#13\n     * @returns a new array populated with 4 elements from the quaternion coordinates\n     */\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      return [this._x, this._y, this._z, this._w];\n    }\n    /**\n     * Stores from the starting index in the given array the Quaternion successive values\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#59\n     * @param array defines the array where to store the x,y,z,w components\n     * @param index defines an optional index in the target array to define where to start storing values\n     * @returns the current Quaternion object\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray(array) {\n      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      array[index] = this.x;\n      array[index + 1] = this.y;\n      array[index + 2] = this.z;\n      array[index + 3] = this.w;\n      return this;\n    }\n    /**\n     * Check if two quaternions are equals\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#38\n     * @param otherQuaternion defines the second operand\n     * @returns true if the current quaternion and the given one coordinates are strictly equals\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(otherQuaternion) {\n      return otherQuaternion && this._x === otherQuaternion._x && this._y === otherQuaternion._y && this._z === otherQuaternion._z && this._w === otherQuaternion._w;\n    }\n    /**\n     * Gets a boolean if two quaternions are equals (using an epsilon value)\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#37\n     * @param otherQuaternion defines the other quaternion\n     * @param epsilon defines the minimal distance to consider equality\n     * @returns true if the given quaternion coordinates are close to the current ones by a distance of epsilon.\n     */\n  }, {\n    key: \"equalsWithEpsilon\",\n    value: function equalsWithEpsilon(otherQuaternion) {\n      var epsilon = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Epsilon;\n      return otherQuaternion && Scalar.WithinEpsilon(this._x, otherQuaternion._x, epsilon) && Scalar.WithinEpsilon(this._y, otherQuaternion._y, epsilon) && Scalar.WithinEpsilon(this._z, otherQuaternion._z, epsilon) && Scalar.WithinEpsilon(this._w, otherQuaternion._w, epsilon);\n    }\n    /**\n     * Clone the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#12\n     * @returns a new quaternion copied from the current one\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new this.constructor(this._x, this._y, this._z, this._w);\n    }\n    /**\n     * Copy a quaternion to the current one\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#86\n     * @param other defines the other quaternion\n     * @returns the updated current quaternion\n     */\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      this.x = other._x;\n      this.y = other._y;\n      this.z = other._z;\n      this.w = other._w;\n      return this;\n    }\n    /**\n     * Updates the current quaternion with the given float coordinates\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#87\n     * @param x defines the x coordinate\n     * @param y defines the y coordinate\n     * @param z defines the z coordinate\n     * @param w defines the w coordinate\n     * @returns the updated current quaternion\n     */\n  }, {\n    key: \"copyFromFloats\",\n    value: function copyFromFloats(x, y, z, w) {\n      this.x = x;\n      this.y = y;\n      this.z = z;\n      this.w = w;\n      return this;\n    }\n    /**\n     * Updates the current quaternion from the given float coordinates\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#56\n     * @param x defines the x coordinate\n     * @param y defines the y coordinate\n     * @param z defines the z coordinate\n     * @param w defines the w coordinate\n     * @returns the updated current quaternion\n     */\n  }, {\n    key: \"set\",\n    value: function set(x, y, z, w) {\n      return this.copyFromFloats(x, y, z, w);\n    }\n    /**\n     * Adds two quaternions\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#10\n     * @param other defines the second operand\n     * @returns a new quaternion as the addition result of the given one and the current quaternion\n     */\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      return new this.constructor(this._x + other._x, this._y + other._y, this._z + other._z, this._w + other._w);\n    }\n    /**\n     * Add a quaternion to the current one\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#11\n     * @param other defines the quaternion to add\n     * @returns the current quaternion\n     */\n  }, {\n    key: \"addInPlace\",\n    value: function addInPlace(other) {\n      this._x += other._x;\n      this._y += other._y;\n      this._z += other._z;\n      this._w += other._w;\n      return this;\n    }\n    /**\n     * Subtract two quaternions\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#57\n     * @param other defines the second operand\n     * @returns a new quaternion as the subtraction result of the given one from the current one\n     */\n  }, {\n    key: \"subtract\",\n    value: function subtract(other) {\n      return new this.constructor(this._x - other._x, this._y - other._y, this._z - other._z, this._w - other._w);\n    }\n    /**\n     * Subtract a quaternion to the current one\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#58\n     * @param other defines the quaternion to subtract\n     * @returns the current quaternion\n     */\n  }, {\n    key: \"subtractInPlace\",\n    value: function subtractInPlace(other) {\n      this._x -= other._x;\n      this._y -= other._y;\n      this._z -= other._z;\n      this._w -= other._w;\n      return this;\n    }\n    /**\n     * Multiplies the current quaternion by a scale factor\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#88\n     * @param value defines the scale factor\n     * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(value) {\n      return new this.constructor(this._x * value, this._y * value, this._z * value, this._w * value);\n    }\n    /**\n     * Scale the current quaternion values by a factor and stores the result to a given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#89\n     * @param scale defines the scale factor\n     * @param result defines the Quaternion object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      result.x = this._x * scale;\n      result.y = this._y * scale;\n      result.z = this._z * scale;\n      result.w = this._w * scale;\n      return result;\n    }\n    /**\n     * Multiplies in place the current quaternion by a scale factor\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#90\n     * @param value defines the scale factor\n     * @returns the current modified quaternion\n     */\n  }, {\n    key: \"scaleInPlace\",\n    value: function scaleInPlace(value) {\n      this.x *= value;\n      this.y *= value;\n      this.z *= value;\n      this.w *= value;\n      return this;\n    }\n    /**\n     * Scale the current quaternion values by a factor and add the result to a given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#91\n     * @param scale defines the scale factor\n     * @param result defines the Quaternion object where to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      result.x += this._x * scale;\n      result.y += this._y * scale;\n      result.z += this._z * scale;\n      result.w += this._w * scale;\n      return result;\n    }\n    /**\n     * Multiplies two quaternions\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#43\n     * @param q1 defines the second operand\n     * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\n     */\n  }, {\n    key: \"multiply\",\n    value: function multiply(q1) {\n      var result = new this.constructor(0, 0, 0, 1.0);\n      this.multiplyToRef(q1, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#45\n     * @param q1 defines the second operand\n     * @param result defines the target quaternion\n     * @returns the current quaternion\n     */\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(q1, result) {\n      var x = this._x * q1._w + this._y * q1._z - this._z * q1._y + this._w * q1._x;\n      var y = -this._x * q1._z + this._y * q1._w + this._z * q1._x + this._w * q1._y;\n      var z = this._x * q1._y - this._y * q1._x + this._z * q1._w + this._w * q1._z;\n      var w = -this._x * q1._x - this._y * q1._y - this._z * q1._z + this._w * q1._w;\n      result.copyFromFloats(x, y, z, w);\n      return result;\n    }\n    /**\n     * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#46\n     * @param q1 defines the second operand\n     * @returns the currentupdated quaternion\n     */\n  }, {\n    key: \"multiplyInPlace\",\n    value: function multiplyInPlace(q1) {\n      this.multiplyToRef(q1, this);\n      return this;\n    }\n    /**\n     * Conjugates the current quaternion and stores the result in the given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#81\n     * @param ref defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"conjugateToRef\",\n    value: function conjugateToRef(ref) {\n      ref.copyFromFloats(-this._x, -this._y, -this._z, this._w);\n      return ref;\n    }\n    /**\n     * Conjugates in place the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#82\n     * @returns the current updated quaternion\n     */\n  }, {\n    key: \"conjugateInPlace\",\n    value: function conjugateInPlace() {\n      this.x *= -1;\n      this.y *= -1;\n      this.z *= -1;\n      return this;\n    }\n    /**\n     * Conjugates (1-q) the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#83\n     * @returns a new quaternion\n     */\n  }, {\n    key: \"conjugate\",\n    value: function conjugate() {\n      return new this.constructor(-this._x, -this._y, -this._z, this._w);\n    }\n    /**\n     * Returns the inverse of the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#84\n     * @returns a new quaternion\n     */\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      var conjugate = this.conjugate();\n      var lengthSquared = this.lengthSquared();\n      if (lengthSquared == 0 || lengthSquared == 1) {\n        return conjugate;\n      }\n      conjugate.scaleInPlace(1 / lengthSquared);\n      return conjugate;\n    }\n    /**\n     * Invert in place the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#85\n     * @returns this quaternion\n     */\n  }, {\n    key: \"invertInPlace\",\n    value: function invertInPlace() {\n      this.conjugateInPlace();\n      var lengthSquared = this.lengthSquared();\n      if (lengthSquared == 0 || lengthSquared == 1) {\n        return this;\n      }\n      this.scaleInPlace(1 / lengthSquared);\n      return this;\n    }\n    /**\n     * Gets squared length of current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#29\n     * @returns the quaternion length (float)\n     */\n  }, {\n    key: \"lengthSquared\",\n    value: function lengthSquared() {\n      return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\n    }\n    /**\n     * Gets length of current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#28\n     * @returns the quaternion length (float)\n     */\n  }, {\n    key: \"length\",\n    value: function length() {\n      return Math.sqrt(this.lengthSquared());\n    }\n    /**\n     * Normalize in place the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#54\n     * @returns the current updated quaternion\n     */\n  }, {\n    key: \"normalize\",\n    value: function normalize() {\n      var len = this.length();\n      if (len === 0) {\n        return this;\n      }\n      var inv = 1.0 / len;\n      this.scaleInPlace(inv);\n      return this;\n    }\n    /**\n     * Normalize a copy of the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#55\n     * @returns the normalized quaternion\n     */\n  }, {\n    key: \"normalizeToNew\",\n    value: function normalizeToNew() {\n      var len = this.length();\n      if (len === 0) {\n        return this.clone();\n      }\n      var inv = 1.0 / len;\n      return this.scale(inv);\n    }\n    /**\n     * Returns a new Vector3 set with the Euler angles translated from the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#32\n     * @returns a new Vector3 containing the Euler angles\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/rotation_conventions\n     */\n  }, {\n    key: \"toEulerAngles\",\n    value: function toEulerAngles() {\n      var result = Vector3.Zero();\n      this.toEulerAnglesToRef(result);\n      return result;\n    }\n    /**\n     * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#31\n     * @param result defines the vector which will be filled with the Euler angles\n     * @returns result input\n     * @see https://doc.babylonjs.com/divingDeeper/mesh/transforms/center_origin/rotation_conventions\n     */\n  }, {\n    key: \"toEulerAnglesToRef\",\n    value: function toEulerAnglesToRef(result) {\n      var qz = this._z;\n      var qx = this._x;\n      var qy = this._y;\n      var qw = this._w;\n      var zAxisY = qy * qz - qx * qw;\n      var limit = 0.4999999;\n      if (zAxisY < -limit) {\n        result.y = 2 * Math.atan2(qy, qw);\n        result.x = Math.PI / 2;\n        result.z = 0;\n      } else if (zAxisY > limit) {\n        result.y = 2 * Math.atan2(qy, qw);\n        result.x = -Math.PI / 2;\n        result.z = 0;\n      } else {\n        var sqw = qw * qw;\n        var sqz = qz * qz;\n        var sqx = qx * qx;\n        var sqy = qy * qy;\n        result.z = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n        result.x = Math.asin(-2.0 * zAxisY);\n        result.y = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n      }\n      return result;\n    }\n    /**\n     * Updates the given rotation matrix with the current quaternion values\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#67\n     * @param result defines the target matrix\n     * @returns the current unchanged quaternion\n     */\n  }, {\n    key: \"toRotationMatrix\",\n    value: function toRotationMatrix(result) {\n      Matrix.FromQuaternionToRef(this, result);\n      return result;\n    }\n    /**\n     * Updates the current quaternion from the given rotation matrix values\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#41\n     * @param matrix defines the source matrix\n     * @returns the current updated quaternion\n     */\n  }, {\n    key: \"fromRotationMatrix\",\n    value: function fromRotationMatrix(matrix) {\n      Quaternion.FromRotationMatrixToRef(matrix, this);\n      return this;\n    }\n    // Statics\n    /**\n     * Creates a new quaternion from a rotation matrix\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#101\n     * @param matrix defines the source matrix\n     * @returns a new quaternion created from the given rotation matrix values\n     */\n  }], [{\n    key: \"FromRotationMatrix\",\n    value: function FromRotationMatrix(matrix) {\n      var result = new Quaternion();\n      Quaternion.FromRotationMatrixToRef(matrix, result);\n      return result;\n    }\n    /**\n     * Updates the given quaternion with the given rotation matrix values\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#102\n     * @param matrix defines the source matrix\n     * @param result defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"FromRotationMatrixToRef\",\n    value: function FromRotationMatrixToRef(matrix, result) {\n      var data = matrix.m;\n      var m11 = data[0],\n        m12 = data[4],\n        m13 = data[8];\n      var m21 = data[1],\n        m22 = data[5],\n        m23 = data[9];\n      var m31 = data[2],\n        m32 = data[6],\n        m33 = data[10];\n      var trace = m11 + m22 + m33;\n      var s;\n      if (trace > 0) {\n        s = 0.5 / Math.sqrt(trace + 1.0);\n        result.w = 0.25 / s;\n        result.x = (m32 - m23) * s;\n        result.y = (m13 - m31) * s;\n        result.z = (m21 - m12) * s;\n      } else if (m11 > m22 && m11 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n        result.w = (m32 - m23) / s;\n        result.x = 0.25 * s;\n        result.y = (m12 + m21) / s;\n        result.z = (m13 + m31) / s;\n      } else if (m22 > m33) {\n        s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n        result.w = (m13 - m31) / s;\n        result.x = (m12 + m21) / s;\n        result.y = 0.25 * s;\n        result.z = (m23 + m32) / s;\n      } else {\n        s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n        result.w = (m21 - m12) / s;\n        result.x = (m13 + m31) / s;\n        result.y = (m23 + m32) / s;\n        result.z = 0.25 * s;\n      }\n      return result;\n    }\n    /**\n     * Returns the dot product (float) between the quaternions \"left\" and \"right\"\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#61\n     * @param left defines the left operand\n     * @param right defines the right operand\n     * @returns the dot product\n     */\n  }, {\n    key: \"Dot\",\n    value: function Dot(left, right) {\n      return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n    }\n    /**\n     * Checks if the orientations of two rotation quaternions are close to each other\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#60\n     * @param quat0 defines the first quaternion to check\n     * @param quat1 defines the second quaternion to check\n     * @param epsilon defines closeness, 0 same orientation, 1 PI apart, default 0.1\n     * @returns true if the two quaternions are close to each other within epsilon\n     */\n  }, {\n    key: \"AreClose\",\n    value: function AreClose(quat0, quat1) {\n      var epsilon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.1;\n      var dot = Quaternion.Dot(quat0, quat1);\n      return 1 - dot * dot <= epsilon;\n    }\n    /**\n     * Smooth interpolation between two quaternions using Slerp\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#93\n     * @param source source quaternion\n     * @param goal goal quaternion\n     * @param deltaTime current interpolation frame\n     * @param lerpTime total interpolation time\n     * @param result the smoothed quaternion\n     */\n  }, {\n    key: \"SmoothToRef\",\n    value: function SmoothToRef(source, goal, deltaTime, lerpTime, result) {\n      var slerp = lerpTime === 0 ? 1 : deltaTime / lerpTime;\n      slerp = Scalar.Clamp(slerp, 0, 1);\n      Quaternion.SlerpToRef(source, goal, slerp, result);\n      return result;\n    }\n    /**\n     * Creates an empty quaternion\n     * @returns a new quaternion set to (0.0, 0.0, 0.0)\n     */\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      return new Quaternion(0.0, 0.0, 0.0, 0.0);\n    }\n    /**\n     * Inverse a given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#103\n     * @param q defines the source quaternion\n     * @returns a new quaternion as the inverted current quaternion\n     */\n  }, {\n    key: \"Inverse\",\n    value: function Inverse(q) {\n      return new q.constructor(-q._x, -q._y, -q._z, q._w);\n    }\n    /**\n     * Inverse a given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#104\n     * @param q defines the source quaternion\n     * @param result the quaternion the result will be stored in\n     * @returns the result quaternion\n     */\n  }, {\n    key: \"InverseToRef\",\n    value: function InverseToRef(q, result) {\n      result.set(-q._x, -q._y, -q._z, q._w);\n      return result;\n    }\n    /**\n     * Creates an identity quaternion\n     * @returns the identity quaternion\n     */\n  }, {\n    key: \"Identity\",\n    value: function Identity() {\n      return new Quaternion(0.0, 0.0, 0.0, 1.0);\n    }\n    /**\n     * Gets a boolean indicating if the given quaternion is identity\n     * @param quaternion defines the quaternion to check\n     * @returns true if the quaternion is identity\n     */\n  }, {\n    key: \"IsIdentity\",\n    value: function IsIdentity(quaternion) {\n      return quaternion && quaternion._x === 0 && quaternion._y === 0 && quaternion._z === 0 && quaternion._w === 1;\n    }\n    /**\n     * Creates a quaternion from a rotation around an axis\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#72\n     * @param axis defines the axis to use\n     * @param angle defines the angle to use\n     * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\n     */\n  }, {\n    key: \"RotationAxis\",\n    value: function RotationAxis(axis, angle) {\n      return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\n    }\n    /**\n     * Creates a rotation around an axis and stores it into the given quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#73\n     * @param axis defines the axis to use\n     * @param angle defines the angle to use\n     * @param result defines the target quaternion\n     * @returns the target quaternion\n     */\n  }, {\n    key: \"RotationAxisToRef\",\n    value: function RotationAxisToRef(axis, angle, result) {\n      var sin = Math.sin(angle / 2);\n      axis.normalize();\n      result.w = Math.cos(angle / 2);\n      result.x = axis._x * sin;\n      result.y = axis._y * sin;\n      result.z = axis._z * sin;\n      return result;\n    }\n    /**\n     * Creates a new quaternion from data stored into an array\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#63\n     * @param array defines the data source\n     * @param offset defines the offset in the source array where the data starts\n     * @returns a new quaternion\n     */\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array, offset) {\n      if (!offset) {\n        offset = 0;\n      }\n      return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n    }\n    /**\n     * Updates the given quaternion \"result\" from the starting index of the given array.\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#64\n     * @param array the array to pull values from\n     * @param offset the offset into the array to start at\n     * @param result the quaternion to store the result in\n     * @returns result input\n     */\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      result.x = array[offset];\n      result.y = array[offset + 1];\n      result.z = array[offset + 2];\n      result.w = array[offset + 3];\n      return result;\n    }\n    /**\n     * Create a quaternion from Euler rotation angles\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#33\n     * @param x Pitch\n     * @param y Yaw\n     * @param z Roll\n     * @returns the new Quaternion\n     */\n  }, {\n    key: \"FromEulerAngles\",\n    value: function FromEulerAngles(x, y, z) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(y, x, z, q);\n      return q;\n    }\n    /**\n     * Updates a quaternion from Euler rotation angles\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#34\n     * @param x Pitch\n     * @param y Yaw\n     * @param z Roll\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n  }, {\n    key: \"FromEulerAnglesToRef\",\n    value: function FromEulerAnglesToRef(x, y, z, result) {\n      Quaternion.RotationYawPitchRollToRef(y, x, z, result);\n      return result;\n    }\n    /**\n     * Create a quaternion from Euler rotation vector\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#35\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\n     * @returns the new Quaternion\n     */\n  }, {\n    key: \"FromEulerVector\",\n    value: function FromEulerVector(vec) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, q);\n      return q;\n    }\n    /**\n     * Updates a quaternion from Euler rotation vector\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#36\n     * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n  }, {\n    key: \"FromEulerVectorToRef\",\n    value: function FromEulerVectorToRef(vec, result) {\n      Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, result);\n      return result;\n    }\n    /**\n     * Updates a quaternion so that it rotates vector vecFrom to vector vecTo\n     * Example Playground - https://playground.babylonjs.com/#L49EJ7#70\n     * @param vecFrom defines the direction vector from which to rotate\n     * @param vecTo defines the direction vector to which to rotate\n     * @param result the quaternion to store the result\n     * @returns the updated quaternion\n     */\n  }, {\n    key: \"FromUnitVectorsToRef\",\n    value: function FromUnitVectorsToRef(vecFrom, vecTo, result) {\n      var r = Vector3.Dot(vecFrom, vecTo) + 1;\n      if (r < Epsilon) {\n        if (Math.abs(vecFrom.x) > Math.abs(vecFrom.z)) {\n          result.set(-vecFrom.y, vecFrom.x, 0, 0);\n        } else {\n          result.set(0, -vecFrom.z, vecFrom.y, 0);\n        }\n      } else {\n        Vector3.CrossToRef(vecFrom, vecTo, TmpVectors.Vector3[0]);\n        result.set(TmpVectors.Vector3[0].x, TmpVectors.Vector3[0].y, TmpVectors.Vector3[0].z, r);\n      }\n      return result.normalize();\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles (y, x, z)\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#77\n     * @param yaw defines the rotation around Y axis\n     * @param pitch defines the rotation around X axis\n     * @param roll defines the rotation around Z axis\n     * @returns the new quaternion\n     */\n  }, {\n    key: \"RotationYawPitchRoll\",\n    value: function RotationYawPitchRoll(yaw, pitch, roll) {\n      var q = new Quaternion();\n      Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n      return q;\n    }\n    /**\n     * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#78\n     * @param yaw defines the rotation around Y axis\n     * @param pitch defines the rotation around X axis\n     * @param roll defines the rotation around Z axis\n     * @param result defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"RotationYawPitchRollToRef\",\n    value: function RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n      // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\n      var halfRoll = roll * 0.5;\n      var halfPitch = pitch * 0.5;\n      var halfYaw = yaw * 0.5;\n      var sinRoll = Math.sin(halfRoll);\n      var cosRoll = Math.cos(halfRoll);\n      var sinPitch = Math.sin(halfPitch);\n      var cosPitch = Math.cos(halfPitch);\n      var sinYaw = Math.sin(halfYaw);\n      var cosYaw = Math.cos(halfYaw);\n      result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n      result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n      result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n      result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n      return result;\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#68\n     * @param alpha defines the rotation around first axis\n     * @param beta defines the rotation around second axis\n     * @param gamma defines the rotation around third axis\n     * @returns the new quaternion\n     */\n  }, {\n    key: \"RotationAlphaBetaGamma\",\n    value: function RotationAlphaBetaGamma(alpha, beta, gamma) {\n      var result = new Quaternion();\n      Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n      return result;\n    }\n    /**\n     * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#69\n     * @param alpha defines the rotation around first axis\n     * @param beta defines the rotation around second axis\n     * @param gamma defines the rotation around third axis\n     * @param result defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"RotationAlphaBetaGammaToRef\",\n    value: function RotationAlphaBetaGammaToRef(alpha, beta, gamma, result) {\n      // Produces a quaternion from Euler angles in the z-x-z orientation\n      var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n      var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n      var halfBeta = beta * 0.5;\n      result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n      result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n      result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n      return result;\n    }\n    /**\n     * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#75\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @returns the new quaternion\n     */\n  }, {\n    key: \"RotationQuaternionFromAxis\",\n    value: function RotationQuaternionFromAxis(axis1, axis2, axis3) {\n      var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n      Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n      return quat;\n    }\n    /**\n     * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#76\n     * @param axis1 defines the first axis\n     * @param axis2 defines the second axis\n     * @param axis3 defines the third axis\n     * @param ref defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"RotationQuaternionFromAxisToRef\",\n    value: function RotationQuaternionFromAxisToRef(axis1, axis2, axis3, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n      Quaternion.FromRotationMatrixToRef(rotMat, ref);\n      return ref;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#96\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns A new quaternion oriented toward the specified forward and up.\n     */\n  }, {\n    key: \"FromLookDirectionLH\",\n    value: function FromLookDirectionLH(forward, up) {\n      var quat = new Quaternion();\n      Quaternion.FromLookDirectionLHToRef(forward, up, quat);\n      return quat;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like \"up\", and stores it in the target quaternion.\n     * This function works in left handed mode\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#97\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param ref defines the target quaternion.\n     * @returns result input\n     */\n  }, {\n    key: \"FromLookDirectionLHToRef\",\n    value: function FromLookDirectionLHToRef(forward, up, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.LookDirectionLHToRef(forward, up, rotMat);\n      Quaternion.FromRotationMatrixToRef(rotMat, ref);\n      return ref;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction, the up direction being oriented like \"up\".\n     * This function works in right handed mode\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#98\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns A new quaternion oriented toward the specified forward and up.\n     */\n  }, {\n    key: \"FromLookDirectionRH\",\n    value: function FromLookDirectionRH(forward, up) {\n      var quat = new Quaternion();\n      Quaternion.FromLookDirectionRHToRef(forward, up, quat);\n      return quat;\n    }\n    /**\n     * Creates a new rotation value to orient an object to look towards the given forward direction with the up direction being oriented like \"up\", and stores it in the target quaternion.\n     * This function works in right handed mode\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#105\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param ref defines the target quaternion.\n     * @returns result input\n     */\n  }, {\n    key: \"FromLookDirectionRHToRef\",\n    value: function FromLookDirectionRHToRef(forward, up, ref) {\n      var rotMat = MathTmp.Matrix[0];\n      Matrix.LookDirectionRHToRef(forward, up, rotMat);\n      return Quaternion.FromRotationMatrixToRef(rotMat, ref);\n    }\n    /**\n     * Interpolates between two quaternions\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#79\n     * @param left defines first quaternion\n     * @param right defines second quaternion\n     * @param amount defines the gradient to use\n     * @returns the new interpolated quaternion\n     */\n  }, {\n    key: \"Slerp\",\n    value: function Slerp(left, right, amount) {\n      var result = Quaternion.Identity();\n      Quaternion.SlerpToRef(left, right, amount, result);\n      return result;\n    }\n    /**\n     * Interpolates between two quaternions and stores it into a target quaternion\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#92\n     * @param left defines first quaternion\n     * @param right defines second quaternion\n     * @param amount defines the gradient to use\n     * @param result defines the target quaternion\n     * @returns result input\n     */\n  }, {\n    key: \"SlerpToRef\",\n    value: function SlerpToRef(left, right, amount, result) {\n      var num2;\n      var num3;\n      var num4 = left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n      var flag = false;\n      if (num4 < 0) {\n        flag = true;\n        num4 = -num4;\n      }\n      if (num4 > 0.999999) {\n        num3 = 1 - amount;\n        num2 = flag ? -amount : amount;\n      } else {\n        var num5 = Math.acos(num4);\n        var num6 = 1.0 / Math.sin(num5);\n        num3 = Math.sin((1.0 - amount) * num5) * num6;\n        num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n      }\n      result.x = num3 * left._x + num2 * right._x;\n      result.y = num3 * left._y + num2 * right._y;\n      result.z = num3 * left._z + num2 * right._z;\n      result.w = num3 * left._w + num2 * right._w;\n      return result;\n    }\n    /**\n     * Interpolate between two quaternions using Hermite interpolation\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#47\n     * @see https://doc.babylonjs.com/features/featuresDeepDive/mesh/drawCurves#hermite-quaternion-spline\n     * @param value1 defines first quaternion\n     * @param tangent1 defines the incoming tangent\n     * @param value2 defines second quaternion\n     * @param tangent2 defines the outgoing tangent\n     * @param amount defines the target quaternion\n     * @returns the new interpolated quaternion\n     */\n  }, {\n    key: \"Hermite\",\n    value: function Hermite(value1, tangent1, value2, tangent2, amount) {\n      var squared = amount * amount;\n      var cubed = amount * squared;\n      var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n      var part2 = -2.0 * cubed + 3.0 * squared;\n      var part3 = cubed - 2.0 * squared + amount;\n      var part4 = cubed - squared;\n      var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n      var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n      var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n      var w = value1._w * part1 + value2._w * part2 + tangent1._w * part3 + tangent2._w * part4;\n      return new value1.constructor(x, y, z, w);\n    }\n    /**\n     * Returns a new Quaternion which is the 1st derivative of the Hermite spline defined by the quaternions \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#48\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @returns 1st derivative\n     */\n  }, {\n    key: \"Hermite1stDerivative\",\n    value: function Hermite1stDerivative(value1, tangent1, value2, tangent2, time) {\n      var result = new value1.constructor();\n      this.Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result);\n      return result;\n    }\n    /**\n     * Update a Quaternion with the 1st derivative of the Hermite spline defined by the quaternions \"value1\", \"value2\", \"tangent1\", \"tangent2\".\n     * Example Playground https://playground.babylonjs.com/#L49EJ7#49\n     * @param value1 defines the first control point\n     * @param tangent1 defines the first tangent\n     * @param value2 defines the second control point\n     * @param tangent2 defines the second tangent\n     * @param time define where the derivative must be done\n     * @param result define where to store the derivative\n     * @returns result input\n     */\n  }, {\n    key: \"Hermite1stDerivativeToRef\",\n    value: function Hermite1stDerivativeToRef(value1, tangent1, value2, tangent2, time, result) {\n      var t2 = time * time;\n      result.x = (t2 - time) * 6 * value1.x + (3 * t2 - 4 * time + 1) * tangent1.x + (-t2 + time) * 6 * value2.x + (3 * t2 - 2 * time) * tangent2.x;\n      result.y = (t2 - time) * 6 * value1.y + (3 * t2 - 4 * time + 1) * tangent1.y + (-t2 + time) * 6 * value2.y + (3 * t2 - 2 * time) * tangent2.y;\n      result.z = (t2 - time) * 6 * value1.z + (3 * t2 - 4 * time + 1) * tangent1.z + (-t2 + time) * 6 * value2.z + (3 * t2 - 2 * time) * tangent2.z;\n      result.w = (t2 - time) * 6 * value1.w + (3 * t2 - 4 * time + 1) * tangent1.w + (-t2 + time) * 6 * value2.w + (3 * t2 - 2 * time) * tangent2.w;\n      return result;\n    }\n  }]);\n  return Quaternion;\n}();\n/**\n * Class used to store matrix data (4x4)\n */\nexport var Matrix = /*#__PURE__*/function () {\n  /**\n   * Creates an empty matrix (filled with zeros)\n   */\n  function Matrix() {\n    _classCallCheck(this, Matrix);\n    this._isIdentity = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2 = true;\n    this._isIdentity3x2Dirty = true;\n    /**\n     * Gets the update flag of the matrix which is an unique number for the matrix.\n     * It will be incremented every time the matrix data change.\n     * You can use it to speed the comparison between two versions of the same matrix.\n     */\n    this.updateFlag = -1;\n    if (PerformanceConfigurator.MatrixTrackPrecisionChange) {\n      PerformanceConfigurator.MatrixTrackedMatrices.push(this);\n    }\n    this._m = new PerformanceConfigurator.MatrixCurrentType(16);\n    this.markAsUpdated();\n  }\n  /**\n   * Gets the precision of matrix computations\n   */\n  _createClass(Matrix, [{\n    key: \"m\",\n    get:\n    /**\n     * Gets the internal data of the matrix\n     */\n    function get() {\n      return this._m;\n    }\n    /**\n     * Update the updateFlag to indicate that the matrix has been updated\n     */\n  }, {\n    key: \"markAsUpdated\",\n    value: function markAsUpdated() {\n      this.updateFlag = Matrix._UpdateFlagSeed++;\n      this._isIdentity = false;\n      this._isIdentity3x2 = false;\n      this._isIdentityDirty = true;\n      this._isIdentity3x2Dirty = true;\n    }\n  }, {\n    key: \"_updateIdentityStatus\",\n    value: function _updateIdentityStatus(isIdentity) {\n      var isIdentityDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isIdentity3x2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var isIdentity3x2Dirty = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      this._isIdentity = isIdentity;\n      this._isIdentity3x2 = isIdentity || isIdentity3x2;\n      this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n      this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n    }\n    // Properties\n    /**\n     * Check if the current matrix is identity\n     * @returns true is the matrix is the identity matrix\n     */\n  }, {\n    key: \"isIdentity\",\n    value: function isIdentity() {\n      if (this._isIdentityDirty) {\n        this._isIdentityDirty = false;\n        var m = this._m;\n        this._isIdentity = m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 && m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 && m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 && m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0;\n      }\n      return this._isIdentity;\n    }\n    /**\n     * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\n     * @returns true is the matrix is the identity matrix\n     */\n  }, {\n    key: \"isIdentityAs3x2\",\n    value: function isIdentityAs3x2() {\n      if (this._isIdentity3x2Dirty) {\n        this._isIdentity3x2Dirty = false;\n        if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n          this._isIdentity3x2 = false;\n        } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 || this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 || this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 || this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\n          this._isIdentity3x2 = false;\n        } else {\n          this._isIdentity3x2 = true;\n        }\n      }\n      return this._isIdentity3x2;\n    }\n    /**\n     * Gets the determinant of the matrix\n     * @returns the matrix determinant\n     */\n  }, {\n    key: \"determinant\",\n    value: function determinant() {\n      if (this._isIdentity === true) {\n        return 1;\n      }\n      var m = this._m;\n      var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n      var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n      var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n      var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15];\n      // https://en.wikipedia.org/wiki/Laplace_expansion\n      // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n      // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n      // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n      // where\n      //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n      //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n      //\n      // Here we do that for the 1st row.\n      var det_22_33 = m22 * m33 - m32 * m23;\n      var det_21_33 = m21 * m33 - m31 * m23;\n      var det_21_32 = m21 * m32 - m31 * m22;\n      var det_20_33 = m20 * m33 - m30 * m23;\n      var det_20_32 = m20 * m32 - m22 * m30;\n      var det_20_31 = m20 * m31 - m30 * m21;\n      var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n      var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n      var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n      var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n      return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n    }\n    // Methods\n    /**\n     * Returns the matrix as a Float32Array or Array<number>\n     * @returns the matrix underlying array\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this._m;\n    }\n    /**\n     * Returns the matrix as a Float32Array or Array<number>\n     * @returns the matrix underlying array.\n     */\n  }, {\n    key: \"asArray\",\n    value: function asArray() {\n      return this._m;\n    }\n    /**\n     * Inverts the current matrix in place\n     * @returns the current inverted matrix\n     */\n  }, {\n    key: \"invert\",\n    value: function invert() {\n      this.invertToRef(this);\n      return this;\n    }\n    /**\n     * Sets all the matrix elements to zero\n     * @returns the current matrix\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n      this._updateIdentityStatus(false);\n      return this;\n    }\n    /**\n     * Adds the current matrix with a second one\n     * @param other defines the matrix to add\n     * @returns a new matrix as the addition of the current matrix and the given one\n     */\n  }, {\n    key: \"add\",\n    value: function add(other) {\n      var result = new this.constructor();\n      this.addToRef(other, result);\n      return result;\n    }\n    /**\n     * Sets the given matrix \"result\" to the addition of the current matrix and the given one\n     * @param other defines the matrix to add\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"addToRef\",\n    value: function addToRef(other, result) {\n      var m = this._m;\n      var resultM = result._m;\n      var otherM = other.m;\n      for (var index = 0; index < 16; index++) {\n        resultM[index] = m[index] + otherM[index];\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Adds in place the given matrix to the current matrix\n     * @param other defines the second operand\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"addToSelf\",\n    value: function addToSelf(other) {\n      var m = this._m;\n      var otherM = other.m;\n      for (var index = 0; index < 16; index++) {\n        m[index] += otherM[index];\n      }\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Sets the given matrix to the current inverted Matrix\n     * @param other defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"invertToRef\",\n    value: function invertToRef(other) {\n      if (this._isIdentity === true) {\n        Matrix.IdentityToRef(other);\n        return other;\n      }\n      // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n      var m = this._m;\n      var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n      var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n      var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n      var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15];\n      var det_22_33 = m22 * m33 - m32 * m23;\n      var det_21_33 = m21 * m33 - m31 * m23;\n      var det_21_32 = m21 * m32 - m31 * m22;\n      var det_20_33 = m20 * m33 - m30 * m23;\n      var det_20_32 = m20 * m32 - m22 * m30;\n      var det_20_31 = m20 * m31 - m30 * m21;\n      var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n      var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n      var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n      var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n      var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n      if (det === 0) {\n        // not invertible\n        other.copyFrom(this);\n        return other;\n      }\n      var detInv = 1 / det;\n      var det_12_33 = m12 * m33 - m32 * m13;\n      var det_11_33 = m11 * m33 - m31 * m13;\n      var det_11_32 = m11 * m32 - m31 * m12;\n      var det_10_33 = m10 * m33 - m30 * m13;\n      var det_10_32 = m10 * m32 - m30 * m12;\n      var det_10_31 = m10 * m31 - m30 * m11;\n      var det_12_23 = m12 * m23 - m22 * m13;\n      var det_11_23 = m11 * m23 - m21 * m13;\n      var det_11_22 = m11 * m22 - m21 * m12;\n      var det_10_23 = m10 * m23 - m20 * m13;\n      var det_10_22 = m10 * m22 - m20 * m12;\n      var det_10_21 = m10 * m21 - m20 * m11;\n      var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n      var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n      var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n      var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n      var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n      var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n      var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n      var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n      var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n      var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n      var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n      var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n      Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n      return other;\n    }\n    /**\n     * add a value at the specified position in the current Matrix\n     * @param index the index of the value within the matrix. between 0 and 15.\n     * @param value the value to be added\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"addAtIndex\",\n    value: function addAtIndex(index, value) {\n      this._m[index] += value;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * mutiply the specified position in the current Matrix by a value\n     * @param index the index of the value within the matrix. between 0 and 15.\n     * @param value the value to be added\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"multiplyAtIndex\",\n    value: function multiplyAtIndex(index, value) {\n      this._m[index] *= value;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Inserts the translation vector (using 3 floats) in the current matrix\n     * @param x defines the 1st component of the translation\n     * @param y defines the 2nd component of the translation\n     * @param z defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"setTranslationFromFloats\",\n    value: function setTranslationFromFloats(x, y, z) {\n      this._m[12] = x;\n      this._m[13] = y;\n      this._m[14] = z;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Adds the translation vector (using 3 floats) in the current matrix\n     * @param x defines the 1st component of the translation\n     * @param y defines the 2nd component of the translation\n     * @param z defines the 3rd component of the translation\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"addTranslationFromFloats\",\n    value: function addTranslationFromFloats(x, y, z) {\n      this._m[12] += x;\n      this._m[13] += y;\n      this._m[14] += z;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Inserts the translation vector in the current matrix\n     * @param vector3 defines the translation to insert\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"setTranslation\",\n    value: function setTranslation(vector3) {\n      return this.setTranslationFromFloats(vector3._x, vector3._y, vector3._z);\n    }\n    /**\n     * Gets the translation value of the current matrix\n     * @returns a new Vector3 as the extracted translation from the matrix\n     */\n  }, {\n    key: \"getTranslation\",\n    value: function getTranslation() {\n      return new Vector3(this._m[12], this._m[13], this._m[14]);\n    }\n    /**\n     * Fill a Vector3 with the extracted translation from the matrix\n     * @param result defines the Vector3 where to store the translation\n     * @returns the current matrix\n     */\n  }, {\n    key: \"getTranslationToRef\",\n    value: function getTranslationToRef(result) {\n      result.x = this._m[12];\n      result.y = this._m[13];\n      result.z = this._m[14];\n      return result;\n    }\n    /**\n     * Remove rotation and scaling part from the matrix\n     * @returns the updated matrix\n     */\n  }, {\n    key: \"removeRotationAndScaling\",\n    value: function removeRotationAndScaling() {\n      var m = this.m;\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n      this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n      return this;\n    }\n    /**\n     * Multiply two matrices\n     * @param other defines the second operand\n     * @returns a new matrix set with the multiplication result of the current Matrix and the given one\n     */\n  }, {\n    key: \"multiply\",\n    value: function multiply(other) {\n      var result = new this.constructor();\n      this.multiplyToRef(other, result);\n      return result;\n    }\n    /**\n     * Copy the current matrix from the given one\n     * @param other defines the source matrix\n     * @returns the current updated matrix\n     */\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      other.copyToArray(this._m);\n      var o = other;\n      this.updateFlag = o.updateFlag;\n      this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n      return this;\n    }\n    /**\n     * Populates the given array from the starting index with the current matrix values\n     * @param array defines the target array\n     * @param offset defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n  }, {\n    key: \"copyToArray\",\n    value: function copyToArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var source = this._m;\n      array[offset] = source[0];\n      array[offset + 1] = source[1];\n      array[offset + 2] = source[2];\n      array[offset + 3] = source[3];\n      array[offset + 4] = source[4];\n      array[offset + 5] = source[5];\n      array[offset + 6] = source[6];\n      array[offset + 7] = source[7];\n      array[offset + 8] = source[8];\n      array[offset + 9] = source[9];\n      array[offset + 10] = source[10];\n      array[offset + 11] = source[11];\n      array[offset + 12] = source[12];\n      array[offset + 13] = source[13];\n      array[offset + 14] = source[14];\n      array[offset + 15] = source[15];\n      return this;\n    }\n    /**\n     * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\n     * @param other defines the second operand\n     * @param result defines the matrix where to store the multiplication\n     * @returns result input\n     */\n  }, {\n    key: \"multiplyToRef\",\n    value: function multiplyToRef(other, result) {\n      if (this._isIdentity) {\n        result.copyFrom(other);\n        return result;\n      }\n      if (other._isIdentity) {\n        result.copyFrom(this);\n        return result;\n      }\n      this.multiplyToArray(other, result._m, 0);\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\n     * @param other defines the second operand\n     * @param result defines the array where to store the multiplication\n     * @param offset defines the offset in the target array where to start storing values\n     * @returns the current matrix\n     */\n  }, {\n    key: \"multiplyToArray\",\n    value: function multiplyToArray(other, result, offset) {\n      var m = this._m;\n      var otherM = other.m;\n      var tm0 = m[0],\n        tm1 = m[1],\n        tm2 = m[2],\n        tm3 = m[3];\n      var tm4 = m[4],\n        tm5 = m[5],\n        tm6 = m[6],\n        tm7 = m[7];\n      var tm8 = m[8],\n        tm9 = m[9],\n        tm10 = m[10],\n        tm11 = m[11];\n      var tm12 = m[12],\n        tm13 = m[13],\n        tm14 = m[14],\n        tm15 = m[15];\n      var om0 = otherM[0],\n        om1 = otherM[1],\n        om2 = otherM[2],\n        om3 = otherM[3];\n      var om4 = otherM[4],\n        om5 = otherM[5],\n        om6 = otherM[6],\n        om7 = otherM[7];\n      var om8 = otherM[8],\n        om9 = otherM[9],\n        om10 = otherM[10],\n        om11 = otherM[11];\n      var om12 = otherM[12],\n        om13 = otherM[13],\n        om14 = otherM[14],\n        om15 = otherM[15];\n      result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n      result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n      result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n      result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n      result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n      result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n      result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n      result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n      result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n      result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n      result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n      result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n      result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n      result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n      result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n      result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n      return this;\n    }\n    /**\n     * Check equality between this matrix and a second one\n     * @param value defines the second matrix to compare\n     * @returns true is the current matrix and the given one values are strictly equal\n     */\n  }, {\n    key: \"equals\",\n    value: function equals(value) {\n      var other = value;\n      if (!other) {\n        return false;\n      }\n      if (this._isIdentity || other._isIdentity) {\n        if (!this._isIdentityDirty && !other._isIdentityDirty) {\n          return this._isIdentity && other._isIdentity;\n        }\n      }\n      var m = this.m;\n      var om = other.m;\n      return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];\n    }\n    /**\n     * Clone the current matrix\n     * @returns a new matrix from the current matrix\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var matrix = new this.constructor();\n      matrix.copyFrom(this);\n      return matrix;\n    }\n    /**\n     * Returns the name of the current matrix class\n     * @returns the string \"Matrix\"\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Matrix\";\n    }\n    /**\n     * Gets the hash code of the current matrix\n     * @returns the hash code\n     */\n  }, {\n    key: \"getHashCode\",\n    value: function getHashCode() {\n      var hash = _ExtractAsInt(this._m[0]);\n      for (var i = 1; i < 16; i++) {\n        hash = hash * 397 ^ _ExtractAsInt(this._m[i]);\n      }\n      return hash;\n    }\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components of the provided node\n     * @param node the node to decompose the matrix to\n     * @returns true if operation was successful\n     */\n  }, {\n    key: \"decomposeToTransformNode\",\n    value: function decomposeToTransformNode(node) {\n      node.rotationQuaternion = node.rotationQuaternion || new Quaternion();\n      return this.decompose(node.scaling, node.rotationQuaternion, node.position);\n    }\n    /**\n     * Decomposes the current Matrix into a translation, rotation and scaling components\n     * @param scale defines the scale vector3 given as a reference to update\n     * @param rotation defines the rotation quaternion given as a reference to update\n     * @param translation defines the translation vector3 given as a reference to update\n     * @param preserveScalingNode Use scaling sign coming from this node. Otherwise scaling sign might change.\n     * @returns true if operation was successful\n     */\n  }, {\n    key: \"decompose\",\n    value: function decompose(scale, rotation, translation, preserveScalingNode) {\n      if (this._isIdentity) {\n        if (translation) {\n          translation.setAll(0);\n        }\n        if (scale) {\n          scale.setAll(1);\n        }\n        if (rotation) {\n          rotation.copyFromFloats(0, 0, 0, 1);\n        }\n        return true;\n      }\n      var m = this._m;\n      if (translation) {\n        translation.copyFromFloats(m[12], m[13], m[14]);\n      }\n      scale = scale || MathTmp.Vector3[0];\n      scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n      scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n      scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n      if (preserveScalingNode) {\n        var signX = preserveScalingNode.scaling.x < 0 ? -1 : 1;\n        var signY = preserveScalingNode.scaling.y < 0 ? -1 : 1;\n        var signZ = preserveScalingNode.scaling.z < 0 ? -1 : 1;\n        scale.x *= signX;\n        scale.y *= signY;\n        scale.z *= signZ;\n      } else {\n        if (this.determinant() <= 0) {\n          scale.y *= -1;\n        }\n      }\n      if (scale._x === 0 || scale._y === 0 || scale._z === 0) {\n        if (rotation) {\n          rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n        }\n        return false;\n      }\n      if (rotation) {\n        var sx = 1 / scale._x,\n          sy = 1 / scale._y,\n          sz = 1 / scale._z;\n        Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\n        Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\n      }\n      return true;\n    }\n    /**\n     * Gets specific row of the matrix\n     * @param index defines the number of the row to get\n     * @returns the index-th row of the current matrix as a new Vector4\n     */\n  }, {\n    key: \"getRow\",\n    value: function getRow(index) {\n      if (index < 0 || index > 3) {\n        return null;\n      }\n      var i = index * 4;\n      return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n    }\n    /**\n     * Gets specific row of the matrix to ref\n     * @param index defines the number of the row to get\n     * @param rowVector vector to store the index-th row of the current matrix\n     * @returns result input\n     */\n  }, {\n    key: \"getRowToRef\",\n    value: function getRowToRef(index, rowVector) {\n      if (index >= 0 && index < 3) {\n        var i = index * 4;\n        rowVector.x = this._m[i + 0];\n        rowVector.y = this._m[i + 1];\n        rowVector.z = this._m[i + 2];\n        rowVector.w = this._m[i + 3];\n      }\n      return rowVector;\n    }\n    /**\n     * Sets the index-th row of the current matrix to the vector4 values\n     * @param index defines the number of the row to set\n     * @param row defines the target vector4\n     * @returns the updated current matrix\n     */\n  }, {\n    key: \"setRow\",\n    value: function setRow(index, row) {\n      return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n    }\n    /**\n     * Compute the transpose of the matrix\n     * @returns the new transposed matrix\n     */\n  }, {\n    key: \"transpose\",\n    value: function transpose() {\n      var result = new this.constructor();\n      Matrix.TransposeToRef(this, result);\n      return result;\n    }\n    /**\n     * Compute the transpose of the matrix and store it in a given matrix\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"transposeToRef\",\n    value: function transposeToRef(result) {\n      Matrix.TransposeToRef(this, result);\n      return result;\n    }\n    /**\n     * Sets the index-th row of the current matrix with the given 4 x float values\n     * @param index defines the row index\n     * @param x defines the x component to set\n     * @param y defines the y component to set\n     * @param z defines the z component to set\n     * @param w defines the w component to set\n     * @returns the updated current matrix\n     */\n  }, {\n    key: \"setRowFromFloats\",\n    value: function setRowFromFloats(index, x, y, z, w) {\n      if (index < 0 || index > 3) {\n        return this;\n      }\n      var i = index * 4;\n      this._m[i + 0] = x;\n      this._m[i + 1] = y;\n      this._m[i + 2] = z;\n      this._m[i + 3] = w;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Compute a new matrix set with the current matrix values multiplied by scale (float)\n     * @param scale defines the scale factor\n     * @returns a new matrix\n     */\n  }, {\n    key: \"scale\",\n    value: function scale(_scale4) {\n      var result = new this.constructor();\n      this.scaleToRef(_scale4, result);\n      return result;\n    }\n    /**\n     * Scale the current matrix values by a factor to a given result matrix\n     * @param scale defines the scale factor\n     * @param result defines the matrix to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleToRef\",\n    value: function scaleToRef(scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = this._m[index] * scale;\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Scale the current matrix values by a factor and add the result to a given matrix\n     * @param scale defines the scale factor\n     * @param result defines the Matrix to store the result\n     * @returns result input\n     */\n  }, {\n    key: \"scaleAndAddToRef\",\n    value: function scaleAndAddToRef(scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] += this._m[index] * scale;\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\n     * @param ref matrix to store the result\n     */\n  }, {\n    key: \"toNormalMatrix\",\n    value: function toNormalMatrix(ref) {\n      var tmp = MathTmp.Matrix[0];\n      this.invertToRef(tmp);\n      tmp.transposeToRef(ref);\n      var m = ref._m;\n      Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n      return ref;\n    }\n    /**\n     * Gets only rotation part of the current matrix\n     * @returns a new matrix sets to the extracted rotation matrix from the current one\n     */\n  }, {\n    key: \"getRotationMatrix\",\n    value: function getRotationMatrix() {\n      var result = new this.constructor();\n      this.getRotationMatrixToRef(result);\n      return result;\n    }\n    /**\n     * Extracts the rotation matrix from the current one and sets it as the given \"result\"\n     * @param result defines the target matrix to store data to\n     * @returns result input\n     */\n  }, {\n    key: \"getRotationMatrixToRef\",\n    value: function getRotationMatrixToRef(result) {\n      var scale = MathTmp.Vector3[0];\n      if (!this.decompose(scale)) {\n        Matrix.IdentityToRef(result);\n        return result;\n      }\n      var m = this._m;\n      var sx = 1 / scale._x,\n        sy = 1 / scale._y,\n        sz = 1 / scale._z;\n      Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      return result;\n    }\n    /**\n     * Toggles model matrix from being right handed to left handed in place and vice versa\n     */\n  }, {\n    key: \"toggleModelMatrixHandInPlace\",\n    value: function toggleModelMatrixHandInPlace() {\n      var m = this._m;\n      m[2] *= -1;\n      m[6] *= -1;\n      m[8] *= -1;\n      m[9] *= -1;\n      m[14] *= -1;\n      this.markAsUpdated();\n      return this;\n    }\n    /**\n     * Toggles projection matrix from being right handed to left handed in place and vice versa\n     */\n  }, {\n    key: \"toggleProjectionMatrixHandInPlace\",\n    value: function toggleProjectionMatrixHandInPlace() {\n      var m = this._m;\n      m[8] *= -1;\n      m[9] *= -1;\n      m[10] *= -1;\n      m[11] *= -1;\n      this.markAsUpdated();\n      return this;\n    }\n    // Statics\n    /**\n     * Creates a matrix from an array\n     * @param array defines the source array\n     * @param offset defines an offset in the source array\n     * @returns a new Matrix set from the starting index of the given array\n     */\n  }], [{\n    key: \"Use64Bits\",\n    get: function get() {\n      return PerformanceConfigurator.MatrixUse64Bits;\n    }\n  }, {\n    key: \"FromArray\",\n    value: function FromArray(array) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var result = new Matrix();\n      Matrix.FromArrayToRef(array, offset, result);\n      return result;\n    }\n    /**\n     * Copy the content of an array into a given matrix\n     * @param array defines the source array\n     * @param offset defines an offset in the source array\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"FromArrayToRef\",\n    value: function FromArrayToRef(array, offset, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = array[index + offset];\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Stores an array into a matrix after having multiplied each component by a given factor\n     * @param array defines the source array\n     * @param offset defines the offset in the source array\n     * @param scale defines the scaling factor\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"FromFloat32ArrayToRefScaled\",\n    value: function FromFloat32ArrayToRefScaled(array, offset, scale, result) {\n      for (var index = 0; index < 16; index++) {\n        result._m[index] = array[index + offset] * scale;\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Gets an identity matrix that must not be updated\n     */\n  }, {\n    key: \"IdentityReadOnly\",\n    get: function get() {\n      return Matrix._IdentityReadOnly;\n    }\n    /**\n     * Stores a list of values (16) inside a given matrix\n     * @param initialM11 defines 1st value of 1st row\n     * @param initialM12 defines 2nd value of 1st row\n     * @param initialM13 defines 3rd value of 1st row\n     * @param initialM14 defines 4th value of 1st row\n     * @param initialM21 defines 1st value of 2nd row\n     * @param initialM22 defines 2nd value of 2nd row\n     * @param initialM23 defines 3rd value of 2nd row\n     * @param initialM24 defines 4th value of 2nd row\n     * @param initialM31 defines 1st value of 3rd row\n     * @param initialM32 defines 2nd value of 3rd row\n     * @param initialM33 defines 3rd value of 3rd row\n     * @param initialM34 defines 4th value of 3rd row\n     * @param initialM41 defines 1st value of 4th row\n     * @param initialM42 defines 2nd value of 4th row\n     * @param initialM43 defines 3rd value of 4th row\n     * @param initialM44 defines 4th value of 4th row\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"FromValuesToRef\",\n    value: function FromValuesToRef(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n      var m = result._m;\n      m[0] = initialM11;\n      m[1] = initialM12;\n      m[2] = initialM13;\n      m[3] = initialM14;\n      m[4] = initialM21;\n      m[5] = initialM22;\n      m[6] = initialM23;\n      m[7] = initialM24;\n      m[8] = initialM31;\n      m[9] = initialM32;\n      m[10] = initialM33;\n      m[11] = initialM34;\n      m[12] = initialM41;\n      m[13] = initialM42;\n      m[14] = initialM43;\n      m[15] = initialM44;\n      result.markAsUpdated();\n    }\n    /**\n     * Creates new matrix from a list of values (16)\n     * @param initialM11 defines 1st value of 1st row\n     * @param initialM12 defines 2nd value of 1st row\n     * @param initialM13 defines 3rd value of 1st row\n     * @param initialM14 defines 4th value of 1st row\n     * @param initialM21 defines 1st value of 2nd row\n     * @param initialM22 defines 2nd value of 2nd row\n     * @param initialM23 defines 3rd value of 2nd row\n     * @param initialM24 defines 4th value of 2nd row\n     * @param initialM31 defines 1st value of 3rd row\n     * @param initialM32 defines 2nd value of 3rd row\n     * @param initialM33 defines 3rd value of 3rd row\n     * @param initialM34 defines 4th value of 3rd row\n     * @param initialM41 defines 1st value of 4th row\n     * @param initialM42 defines 2nd value of 4th row\n     * @param initialM43 defines 3rd value of 4th row\n     * @param initialM44 defines 4th value of 4th row\n     * @returns the new matrix\n     */\n  }, {\n    key: \"FromValues\",\n    value: function FromValues(initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n      var result = new Matrix();\n      var m = result._m;\n      m[0] = initialM11;\n      m[1] = initialM12;\n      m[2] = initialM13;\n      m[3] = initialM14;\n      m[4] = initialM21;\n      m[5] = initialM22;\n      m[6] = initialM23;\n      m[7] = initialM24;\n      m[8] = initialM31;\n      m[9] = initialM32;\n      m[10] = initialM33;\n      m[11] = initialM34;\n      m[12] = initialM41;\n      m[13] = initialM42;\n      m[14] = initialM43;\n      m[15] = initialM44;\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale defines the scale vector3\n     * @param rotation defines the rotation quaternion\n     * @param translation defines the translation vector3\n     * @returns a new matrix\n     */\n  }, {\n    key: \"Compose\",\n    value: function Compose(scale, rotation, translation) {\n      var result = new Matrix();\n      Matrix.ComposeToRef(scale, rotation, translation, result);\n      return result;\n    }\n    /**\n     * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\n     * @param scale defines the scale vector3\n     * @param rotation defines the rotation quaternion\n     * @param translation defines the translation vector3\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"ComposeToRef\",\n    value: function ComposeToRef(scale, rotation, translation, result) {\n      var m = result._m;\n      var x = rotation._x,\n        y = rotation._y,\n        z = rotation._z,\n        w = rotation._w;\n      var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n      var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n      var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n      var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n      var sx = scale._x,\n        sy = scale._y,\n        sz = scale._z;\n      m[0] = (1 - (yy + zz)) * sx;\n      m[1] = (xy + wz) * sx;\n      m[2] = (xz - wy) * sx;\n      m[3] = 0;\n      m[4] = (xy - wz) * sy;\n      m[5] = (1 - (xx + zz)) * sy;\n      m[6] = (yz + wx) * sy;\n      m[7] = 0;\n      m[8] = (xz + wy) * sz;\n      m[9] = (yz - wx) * sz;\n      m[10] = (1 - (xx + yy)) * sz;\n      m[11] = 0;\n      m[12] = translation._x;\n      m[13] = translation._y;\n      m[14] = translation._z;\n      m[15] = 1;\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Creates a new identity matrix\n     * @returns a new identity matrix\n     */\n  }, {\n    key: \"Identity\",\n    value: function Identity() {\n      var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n      identity._updateIdentityStatus(true);\n      return identity;\n    }\n    /**\n     * Creates a new identity matrix and stores the result in a given matrix\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"IdentityToRef\",\n    value: function IdentityToRef(result) {\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      result._updateIdentityStatus(true);\n      return result;\n    }\n    /**\n     * Creates a new zero matrix\n     * @returns a new zero matrix\n     */\n  }, {\n    key: \"Zero\",\n    value: function Zero() {\n      var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n      zero._updateIdentityStatus(false);\n      return zero;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the X axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n  }, {\n    key: \"RotationX\",\n    value: function RotationX(angle) {\n      var result = new Matrix();\n      Matrix.RotationXToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new matrix as the invert of a given matrix\n     * @param source defines the source matrix\n     * @returns the new matrix\n     */\n  }, {\n    key: \"Invert\",\n    value: function Invert(source) {\n      var result = new source.constructor();\n      source.invertToRef(result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationXToRef\",\n    value: function RotationXToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      result._updateIdentityStatus(c === 1 && s === 0);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n  }, {\n    key: \"RotationY\",\n    value: function RotationY(angle) {\n      var result = new Matrix();\n      Matrix.RotationYToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationYToRef\",\n    value: function RotationYToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      result._updateIdentityStatus(c === 1 && s === 0);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n  }, {\n    key: \"RotationZ\",\n    value: function RotationZ(angle) {\n      var result = new Matrix();\n      Matrix.RotationZToRef(angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationZToRef\",\n    value: function RotationZToRef(angle, result) {\n      var s = Math.sin(angle);\n      var c = Math.cos(angle);\n      Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      result._updateIdentityStatus(c === 1 && s === 0);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the given axis\n     * @param axis defines the axis to use\n     * @param angle defines the angle (in radians) to use\n     * @returns the new matrix\n     */\n  }, {\n    key: \"RotationAxis\",\n    value: function RotationAxis(axis, angle) {\n      var result = new Matrix();\n      Matrix.RotationAxisToRef(axis, angle, result);\n      return result;\n    }\n    /**\n     * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\n     * @param axis defines the axis to use\n     * @param angle defines the angle (in radians) to use\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationAxisToRef\",\n    value: function RotationAxisToRef(axis, angle, result) {\n      var s = Math.sin(-angle);\n      var c = Math.cos(-angle);\n      var c1 = 1 - c;\n      axis.normalize();\n      var m = result._m;\n      m[0] = axis._x * axis._x * c1 + c;\n      m[1] = axis._x * axis._y * c1 - axis._z * s;\n      m[2] = axis._x * axis._z * c1 + axis._y * s;\n      m[3] = 0.0;\n      m[4] = axis._y * axis._x * c1 + axis._z * s;\n      m[5] = axis._y * axis._y * c1 + c;\n      m[6] = axis._y * axis._z * c1 - axis._x * s;\n      m[7] = 0.0;\n      m[8] = axis._z * axis._x * c1 - axis._y * s;\n      m[9] = axis._z * axis._y * c1 + axis._x * s;\n      m[10] = axis._z * axis._z * c1 + c;\n      m[11] = 0.0;\n      m[12] = 0.0;\n      m[13] = 0.0;\n      m[14] = 0.0;\n      m[15] = 1.0;\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\n     * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\n     * @param from defines the vector to align\n     * @param to defines the vector to align to\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationAlignToRef\",\n    value: function RotationAlignToRef(from, to, result) {\n      var c = Vector3.Dot(to, from);\n      var m = result._m;\n      if (c < -1 + Epsilon) {\n        // from and to are colinear and opposite direction.\n        // compute a PI rotation on Z axis\n        m[0] = -1;\n        m[1] = 0;\n        m[2] = 0;\n        m[3] = 0;\n        m[4] = 0;\n        m[5] = -1;\n        m[6] = 0;\n        m[7] = 0;\n        m[8] = 0;\n        m[9] = 0;\n        m[10] = 1;\n        m[11] = 0;\n      } else {\n        var v = Vector3.Cross(to, from);\n        var k = 1 / (1 + c);\n        m[0] = v._x * v._x * k + c;\n        m[1] = v._y * v._x * k - v._z;\n        m[2] = v._z * v._x * k + v._y;\n        m[3] = 0;\n        m[4] = v._x * v._y * k + v._z;\n        m[5] = v._y * v._y * k + c;\n        m[6] = v._z * v._y * k - v._x;\n        m[7] = 0;\n        m[8] = v._x * v._z * k - v._y;\n        m[9] = v._y * v._z * k + v._x;\n        m[10] = v._z * v._z * k + c;\n        m[11] = 0;\n      }\n      m[12] = 0;\n      m[13] = 0;\n      m[14] = 0;\n      m[15] = 1;\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Creates a rotation matrix\n     * @param yaw defines the yaw angle in radians (Y axis)\n     * @param pitch defines the pitch angle in radians (X axis)\n     * @param roll defines the roll angle in radians (Z axis)\n     * @returns the new rotation matrix\n     */\n  }, {\n    key: \"RotationYawPitchRoll\",\n    value: function RotationYawPitchRoll(yaw, pitch, roll) {\n      var result = new Matrix();\n      Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n      return result;\n    }\n    /**\n     * Creates a rotation matrix and stores it in a given matrix\n     * @param yaw defines the yaw angle in radians (Y axis)\n     * @param pitch defines the pitch angle in radians (X axis)\n     * @param roll defines the roll angle in radians (Z axis)\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"RotationYawPitchRollToRef\",\n    value: function RotationYawPitchRollToRef(yaw, pitch, roll, result) {\n      Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\n      MathTmp.Quaternion[0].toRotationMatrix(result);\n      return result;\n    }\n    /**\n     * Creates a scaling matrix\n     * @param x defines the scale factor on X axis\n     * @param y defines the scale factor on Y axis\n     * @param z defines the scale factor on Z axis\n     * @returns the new matrix\n     */\n  }, {\n    key: \"Scaling\",\n    value: function Scaling(x, y, z) {\n      var result = new Matrix();\n      Matrix.ScalingToRef(x, y, z, result);\n      return result;\n    }\n    /**\n     * Creates a scaling matrix and stores it in a given matrix\n     * @param x defines the scale factor on X axis\n     * @param y defines the scale factor on Y axis\n     * @param z defines the scale factor on Z axis\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"ScalingToRef\",\n    value: function ScalingToRef(x, y, z, result) {\n      Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n      return result;\n    }\n    /**\n     * Creates a translation matrix\n     * @param x defines the translation on X axis\n     * @param y defines the translation on Y axis\n     * @param z defines the translationon Z axis\n     * @returns the new matrix\n     */\n  }, {\n    key: \"Translation\",\n    value: function Translation(x, y, z) {\n      var result = new Matrix();\n      Matrix.TranslationToRef(x, y, z, result);\n      return result;\n    }\n    /**\n     * Creates a translation matrix and stores it in a given matrix\n     * @param x defines the translation on X axis\n     * @param y defines the translation on Y axis\n     * @param z defines the translationon Z axis\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"TranslationToRef\",\n    value: function TranslationToRef(x, y, z, result) {\n      Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n      result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n      return result;\n    }\n    /**\n     * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n     * @param startValue defines the start value\n     * @param endValue defines the end value\n     * @param gradient defines the gradient factor\n     * @returns the new matrix\n     */\n  }, {\n    key: \"Lerp\",\n    value: function Lerp(startValue, endValue, gradient) {\n      var result = new startValue.constructor();\n      Matrix.LerpToRef(startValue, endValue, gradient, result);\n      return result;\n    }\n    /**\n     * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\n     * @param startValue defines the start value\n     * @param endValue defines the end value\n     * @param gradient defines the gradient factor\n     * @param result defines the Matrix object where to store data\n     * @returns result input\n     */\n  }, {\n    key: \"LerpToRef\",\n    value: function LerpToRef(startValue, endValue, gradient, result) {\n      var resultM = result._m;\n      var startM = startValue.m;\n      var endM = endValue.m;\n      for (var index = 0; index < 16; index++) {\n        resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Builds a new matrix whose values are computed by:\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue defines the first matrix\n     * @param endValue defines the second matrix\n     * @param gradient defines the gradient between the two matrices\n     * @returns the new matrix\n     */\n  }, {\n    key: \"DecomposeLerp\",\n    value: function DecomposeLerp(startValue, endValue, gradient) {\n      var result = new startValue.constructor();\n      Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n      return result;\n    }\n    /**\n     * Update a matrix to values which are computed by:\n     * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\n     * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\n     * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\n     * @param startValue defines the first matrix\n     * @param endValue defines the second matrix\n     * @param gradient defines the gradient between the two matrices\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"DecomposeLerpToRef\",\n    value: function DecomposeLerpToRef(startValue, endValue, gradient, result) {\n      var startScale = MathTmp.Vector3[0];\n      var startRotation = MathTmp.Quaternion[0];\n      var startTranslation = MathTmp.Vector3[1];\n      startValue.decompose(startScale, startRotation, startTranslation);\n      var endScale = MathTmp.Vector3[2];\n      var endRotation = MathTmp.Quaternion[1];\n      var endTranslation = MathTmp.Vector3[3];\n      endValue.decompose(endScale, endRotation, endTranslation);\n      var resultScale = MathTmp.Vector3[4];\n      Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n      var resultRotation = MathTmp.Quaternion[2];\n      Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n      var resultTranslation = MathTmp.Vector3[5];\n      Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n      Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n      return result;\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n     * This function works in left handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @returns the new matrix\n     */\n  }, {\n    key: \"LookAtLH\",\n    value: function LookAtLH(eye, target, up) {\n      var result = new Matrix();\n      Matrix.LookAtLHToRef(eye, target, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n     * This function works in left handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"LookAtLHToRef\",\n    value: function LookAtLHToRef(eye, target, up, result) {\n      var xAxis = MathTmp.Vector3[0];\n      var yAxis = MathTmp.Vector3[1];\n      var zAxis = MathTmp.Vector3[2];\n      // Z axis\n      target.subtractToRef(eye, zAxis);\n      zAxis.normalize();\n      // X axis\n      Vector3.CrossToRef(up, zAxis, xAxis);\n      var xSquareLength = xAxis.lengthSquared();\n      if (xSquareLength === 0) {\n        xAxis.x = 1.0;\n      } else {\n        xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n      }\n      // Y axis\n      Vector3.CrossToRef(zAxis, xAxis, yAxis);\n      yAxis.normalize();\n      // Eye angles\n      var ex = -Vector3.Dot(xAxis, eye);\n      var ey = -Vector3.Dot(yAxis, eye);\n      var ez = -Vector3.Dot(zAxis, eye);\n      Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\n     * This function works in right handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @returns the new matrix\n     */\n  }, {\n    key: \"LookAtRH\",\n    value: function LookAtRH(eye, target, up) {\n      var result = new Matrix();\n      Matrix.LookAtRHToRef(eye, target, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param eye defines the final position of the entity\n     * @param target defines where the entity should look at\n     * @param up defines the up vector for the entity\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"LookAtRHToRef\",\n    value: function LookAtRHToRef(eye, target, up, result) {\n      var xAxis = MathTmp.Vector3[0];\n      var yAxis = MathTmp.Vector3[1];\n      var zAxis = MathTmp.Vector3[2];\n      // Z axis\n      eye.subtractToRef(target, zAxis);\n      zAxis.normalize();\n      // X axis\n      Vector3.CrossToRef(up, zAxis, xAxis);\n      var xSquareLength = xAxis.lengthSquared();\n      if (xSquareLength === 0) {\n        xAxis.x = 1.0;\n      } else {\n        xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n      }\n      // Y axis\n      Vector3.CrossToRef(zAxis, xAxis, yAxis);\n      yAxis.normalize();\n      // Eye angles\n      var ex = -Vector3.Dot(xAxis, eye);\n      var ey = -Vector3.Dot(yAxis, eye);\n      var ez = -Vector3.Dot(zAxis, eye);\n      Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n      return result;\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks in the direction specified by forward from the eye position, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns the new matrix\n     */\n  }, {\n    key: \"LookDirectionLH\",\n    value: function LookDirectionLH(forward, up) {\n      var result = new Matrix();\n      Matrix.LookDirectionLHToRef(forward, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks in the direction of forward, the up direction being oriented like \"up\".\n     * This function works in left handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"LookDirectionLHToRef\",\n    value: function LookDirectionLHToRef(forward, up, result) {\n      var back = MathTmp.Vector3[0];\n      back.copyFrom(forward);\n      back.scaleInPlace(-1);\n      var left = MathTmp.Vector3[1];\n      Vector3.CrossToRef(up, back, left);\n      // Generate the rotation matrix.\n      Matrix.FromValuesToRef(left._x, left._y, left._z, 0.0, up._x, up._y, up._z, 0.0, back._x, back._y, back._z, 0.0, 0, 0, 0, 1.0, result);\n      return result;\n    }\n    /**\n     * Gets a new rotation matrix used to rotate an entity so as it looks in the direction specified by forward from the eye position, the up Vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @returns the new matrix\n     */\n  }, {\n    key: \"LookDirectionRH\",\n    value: function LookDirectionRH(forward, up) {\n      var result = new Matrix();\n      Matrix.LookDirectionRHToRef(forward, up, result);\n      return result;\n    }\n    /**\n     * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks in the direction of forward, the up vector3 being oriented like \"up\".\n     * This function works in right handed mode\n     * @param forward defines the forward direction - Must be normalized and orthogonal to up.\n     * @param up defines the up vector for the entity - Must be normalized and orthogonal to forward.\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"LookDirectionRHToRef\",\n    value: function LookDirectionRHToRef(forward, up, result) {\n      var right = MathTmp.Vector3[2];\n      Vector3.CrossToRef(up, forward, right);\n      // Generate the rotation matrix.\n      Matrix.FromValuesToRef(right._x, right._y, right._z, 0.0, up._x, up._y, up._z, 0.0, forward._x, forward._y, forward._z, 0.0, 0, 0, 0, 1.0, result);\n      return result;\n    }\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n  }, {\n    key: \"OrthoLH\",\n    value: function OrthoLH(width, height, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoLHToRef(width, height, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Store a left-handed orthographic projection to a given matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns result input\n     */\n  }, {\n    key: \"OrthoLHToRef\",\n    value: function OrthoLHToRef(width, height, znear, zfar, result, halfZRange) {\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 / width;\n      var b = 2.0 / height;\n      var c = 2.0 / (f - n);\n      var d = -(f + n) / (f - n);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n      return result;\n    }\n    /**\n     * Create a left-handed orthographic projection matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a left-handed orthographic projection matrix\n     */\n  }, {\n    key: \"OrthoOffCenterLH\",\n    value: function OrthoOffCenterLH(left, right, bottom, top, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Stores a left-handed orthographic projection into a given matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns result input\n     */\n  }, {\n    key: \"OrthoOffCenterLHToRef\",\n    value: function OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result, halfZRange) {\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 / (right - left);\n      var b = 2.0 / (top - bottom);\n      var c = 2.0 / (f - n);\n      var d = -(f + n) / (f - n);\n      var i0 = (left + right) / (left - right);\n      var i1 = (top + bottom) / (bottom - top);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Creates a right-handed orthographic projection matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns a new matrix as a right-handed orthographic projection matrix\n     */\n  }, {\n    key: \"OrthoOffCenterRH\",\n    value: function OrthoOffCenterRH(left, right, bottom, top, znear, zfar, halfZRange) {\n      var matrix = new Matrix();\n      Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix, halfZRange);\n      return matrix;\n    }\n    /**\n     * Stores a right-handed orthographic projection into a given matrix\n     * @param left defines the viewport left coordinate\n     * @param right defines the viewport right coordinate\n     * @param bottom defines the viewport bottom coordinate\n     * @param top defines the viewport top coordinate\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @returns result input\n     */\n  }, {\n    key: \"OrthoOffCenterRHToRef\",\n    value: function OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, result, halfZRange) {\n      Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result, halfZRange);\n      result._m[10] *= -1; // No need to call markAsUpdated as previous function already called it and let _isIdentityDirty to true\n      return result;\n    }\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param width defines the viewport width\n     * @param height defines the viewport height\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n  }, {\n    key: \"PerspectiveLH\",\n    value: function PerspectiveLH(width, height, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var matrix = new Matrix();\n      var n = znear;\n      var f = zfar;\n      var a = 2.0 * n / width;\n      var b = 2.0 * n / height;\n      var c = (f + n) / (f - n);\n      var d = -2.0 * f * n / (f - n);\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n      if (halfZRange) {\n        matrix.multiplyToRef(mtxConvertNDCToHalfZRange, matrix);\n      }\n      matrix._updateIdentityStatus(false);\n      return matrix;\n    }\n    /**\n     * Creates a left-handed perspective projection matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns a new matrix as a left-handed perspective projection matrix\n     */\n  }, {\n    key: \"PerspectiveFovLH\",\n    value: function PerspectiveFovLH(fov, aspect, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var reverseDepthBufferMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var matrix = new Matrix();\n      Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix, true, halfZRange, projectionPlaneTilt, reverseDepthBufferMode);\n      return matrix;\n    }\n    /**\n     * Stores a left-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns result input\n     */\n  }, {\n    key: \"PerspectiveFovLHToRef\",\n    value: function PerspectiveFovLHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var reverseDepthBufferMode = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      var n = znear;\n      var f = zfar;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var c = reverseDepthBufferMode && n === 0 ? -1 : f !== 0 ? (f + n) / (f - n) : 1;\n      var d = reverseDepthBufferMode && n === 0 ? 2 * f : f !== 0 ? -2.0 * f * n / (f - n) : -2 * n;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result._updateIdentityStatus(false);\n      return result;\n    }\n    /**\n     * Stores a left-handed perspective projection into a given matrix with depth reversed\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar not used as infinity is used as far clip\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @returns result input\n     */\n  }, {\n    key: \"PerspectiveFovReverseLHToRef\",\n    value: function PerspectiveFovReverseLHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, -znear, 1.0, 0.0, 0.0, 1.0, 0.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result._updateIdentityStatus(false);\n      return result;\n    }\n    /**\n     * Creates a right-handed perspective projection matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns a new matrix as a right-handed perspective projection matrix\n     */\n  }, {\n    key: \"PerspectiveFovRH\",\n    value: function PerspectiveFovRH(fov, aspect, znear, zfar, halfZRange) {\n      var projectionPlaneTilt = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n      var reverseDepthBufferMode = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var matrix = new Matrix();\n      Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix, true, halfZRange, projectionPlaneTilt, reverseDepthBufferMode);\n      return matrix;\n    }\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane. If 0, assume we are in \"infinite zfar\" mode\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @param reverseDepthBufferMode true to indicate that we are in a reverse depth buffer mode (meaning znear and zfar have been inverted when calling the function)\n     * @returns result input\n     */\n  }, {\n    key: \"PerspectiveFovRHToRef\",\n    value: function PerspectiveFovRHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var reverseDepthBufferMode = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n      //alternatively this could be expressed as:\n      //    m = PerspectiveFovLHToRef\n      //    m[10] *= -1.0;\n      //    m[11] *= -1.0;\n      var n = znear;\n      var f = zfar;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var c = reverseDepthBufferMode && n === 0 ? 1 : f !== 0 ? -(f + n) / (f - n) : -1;\n      var d = reverseDepthBufferMode && n === 0 ? 2 * f : f !== 0 ? -2 * f * n / (f - n) : -2 * n;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result._updateIdentityStatus(false);\n      return result;\n    }\n    /**\n     * Stores a right-handed perspective projection into a given matrix\n     * @param fov defines the horizontal field of view\n     * @param aspect defines the aspect ratio\n     * @param znear defines the near clip plane\n     * @param zfar not used as infinity is used as far clip\n     * @param result defines the target matrix\n     * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @returns result input\n     */\n  }, {\n    key: \"PerspectiveFovReverseRHToRef\",\n    value: function PerspectiveFovReverseRHToRef(fov, aspect, znear, zfar, result) {\n      var isVerticalFovFixed = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n      var halfZRange = arguments.length > 6 ? arguments[6] : undefined;\n      var projectionPlaneTilt = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;\n      var t = 1.0 / Math.tan(fov * 0.5);\n      var a = isVerticalFovFixed ? t / aspect : t;\n      var b = isVerticalFovFixed ? t : t * aspect;\n      var rot = Math.tan(projectionPlaneTilt);\n      Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, rot, 0.0, 0.0, -znear, -1.0, 0.0, 0.0, -1.0, 0.0, result);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result._updateIdentityStatus(false);\n      return result;\n    }\n    /**\n     * Stores a perspective projection for WebVR info a given matrix\n     * @param fov defines the field of view\n     * @param fov.upDegrees\n     * @param fov.downDegrees\n     * @param fov.leftDegrees\n     * @param fov.rightDegrees\n     * @param znear defines the near clip plane\n     * @param zfar defines the far clip plane\n     * @param result defines the target matrix\n     * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\n     * @param halfZRange true to generate NDC coordinates between 0 and 1 instead of -1 and 1 (default: false)\n     * @param projectionPlaneTilt optional tilt angle of the projection plane around the X axis (horizontal)\n     * @returns result input\n     */\n  }, {\n    key: \"PerspectiveFovWebVRToRef\",\n    value: function PerspectiveFovWebVRToRef(fov, znear, zfar, result) {\n      var rightHanded = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n      var halfZRange = arguments.length > 5 ? arguments[5] : undefined;\n      var projectionPlaneTilt = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n      var rightHandedFactor = rightHanded ? -1 : 1;\n      var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n      var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n      var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n      var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n      var xScale = 2.0 / (leftTan + rightTan);\n      var yScale = 2.0 / (upTan + downTan);\n      var rot = Math.tan(projectionPlaneTilt);\n      var m = result._m;\n      m[0] = xScale;\n      m[1] = m[2] = m[3] = m[4] = 0.0;\n      m[5] = yScale;\n      m[6] = 0.0;\n      m[7] = rot;\n      m[8] = (leftTan - rightTan) * xScale * 0.5;\n      m[9] = -((upTan - downTan) * yScale * 0.5);\n      m[10] = -zfar / (znear - zfar);\n      m[11] = 1.0 * rightHandedFactor;\n      m[12] = m[13] = m[15] = 0.0;\n      m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n      if (halfZRange) {\n        result.multiplyToRef(mtxConvertNDCToHalfZRange, result);\n      }\n      result.markAsUpdated();\n      return result;\n    }\n    /**\n     * Computes a complete transformation matrix\n     * @param viewport defines the viewport to use\n     * @param world defines the world matrix\n     * @param view defines the view matrix\n     * @param projection defines the projection matrix\n     * @param zmin defines the near clip plane\n     * @param zmax defines the far clip plane\n     * @returns the transformation matrix\n     */\n  }, {\n    key: \"GetFinalMatrix\",\n    value: function GetFinalMatrix(viewport, world, view, projection, zmin, zmax) {\n      var cw = viewport.width;\n      var ch = viewport.height;\n      var cx = viewport.x;\n      var cy = viewport.y;\n      var viewportMatrix = Matrix.FromValues(cw / 2.0, 0.0, 0.0, 0.0, 0.0, -ch / 2.0, 0.0, 0.0, 0.0, 0.0, zmax - zmin, 0.0, cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\n      var matrix = new world.constructor();\n      world.multiplyToRef(view, matrix);\n      matrix.multiplyToRef(projection, matrix);\n      return matrix.multiplyToRef(viewportMatrix, matrix);\n    }\n    /**\n     * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\n     * @param matrix defines the matrix to use\n     * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\n     */\n  }, {\n    key: \"GetAsMatrix2x2\",\n    value: function GetAsMatrix2x2(matrix) {\n      var m = matrix.m;\n      var arr = [m[0], m[1], m[4], m[5]];\n      return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n    }\n    /**\n     * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\n     * @param matrix defines the matrix to use\n     * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\n     */\n  }, {\n    key: \"GetAsMatrix3x3\",\n    value: function GetAsMatrix3x3(matrix) {\n      var m = matrix.m;\n      var arr = [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]];\n      return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n    }\n    /**\n     * Compute the transpose of a given matrix\n     * @param matrix defines the matrix to transpose\n     * @returns the new matrix\n     */\n  }, {\n    key: \"Transpose\",\n    value: function Transpose(matrix) {\n      var result = new matrix.constructor();\n      Matrix.TransposeToRef(matrix, result);\n      return result;\n    }\n    /**\n     * Compute the transpose of a matrix and store it in a target matrix\n     * @param matrix defines the matrix to transpose\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"TransposeToRef\",\n    value: function TransposeToRef(matrix, result) {\n      var rm = result._m;\n      var mm = matrix.m;\n      rm[0] = mm[0];\n      rm[1] = mm[4];\n      rm[2] = mm[8];\n      rm[3] = mm[12];\n      rm[4] = mm[1];\n      rm[5] = mm[5];\n      rm[6] = mm[9];\n      rm[7] = mm[13];\n      rm[8] = mm[2];\n      rm[9] = mm[6];\n      rm[10] = mm[10];\n      rm[11] = mm[14];\n      rm[12] = mm[3];\n      rm[13] = mm[7];\n      rm[14] = mm[11];\n      rm[15] = mm[15];\n      result.markAsUpdated();\n      // identity-ness does not change when transposing\n      result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n      return result;\n    }\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane defines the reflection plane\n     * @returns a new matrix\n     */\n  }, {\n    key: \"Reflection\",\n    value: function Reflection(plane) {\n      var matrix = new Matrix();\n      Matrix.ReflectionToRef(plane, matrix);\n      return matrix;\n    }\n    /**\n     * Computes a reflection matrix from a plane\n     * @param plane defines the reflection plane\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"ReflectionToRef\",\n    value: function ReflectionToRef(plane, result) {\n      plane.normalize();\n      var x = plane.normal.x;\n      var y = plane.normal.y;\n      var z = plane.normal.z;\n      var temp = -2 * x;\n      var temp2 = -2 * y;\n      var temp3 = -2 * z;\n      Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n      return result;\n    }\n    /**\n     * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\n     * @param xaxis defines the value of the 1st axis\n     * @param yaxis defines the value of the 2nd axis\n     * @param zaxis defines the value of the 3rd axis\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"FromXYZAxesToRef\",\n    value: function FromXYZAxesToRef(xaxis, yaxis, zaxis, result) {\n      Matrix.FromValuesToRef(xaxis._x, xaxis._y, xaxis._z, 0.0, yaxis._x, yaxis._y, yaxis._z, 0.0, zaxis._x, zaxis._y, zaxis._z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n      return result;\n    }\n    /**\n     * Creates a rotation matrix from a quaternion and stores it in a target matrix\n     * @param quat defines the quaternion to use\n     * @param result defines the target matrix\n     * @returns result input\n     */\n  }, {\n    key: \"FromQuaternionToRef\",\n    value: function FromQuaternionToRef(quat, result) {\n      var xx = quat._x * quat._x;\n      var yy = quat._y * quat._y;\n      var zz = quat._z * quat._z;\n      var xy = quat._x * quat._y;\n      var zw = quat._z * quat._w;\n      var zx = quat._z * quat._x;\n      var yw = quat._y * quat._w;\n      var yz = quat._y * quat._z;\n      var xw = quat._x * quat._w;\n      result._m[0] = 1.0 - 2.0 * (yy + zz);\n      result._m[1] = 2.0 * (xy + zw);\n      result._m[2] = 2.0 * (zx - yw);\n      result._m[3] = 0.0;\n      result._m[4] = 2.0 * (xy - zw);\n      result._m[5] = 1.0 - 2.0 * (zz + xx);\n      result._m[6] = 2.0 * (yz + xw);\n      result._m[7] = 0.0;\n      result._m[8] = 2.0 * (zx + yw);\n      result._m[9] = 2.0 * (yz - xw);\n      result._m[10] = 1.0 - 2.0 * (yy + xx);\n      result._m[11] = 0.0;\n      result._m[12] = 0.0;\n      result._m[13] = 0.0;\n      result._m[14] = 0.0;\n      result._m[15] = 1.0;\n      result.markAsUpdated();\n      return result;\n    }\n  }]);\n  return Matrix;\n}();\nMatrix._UpdateFlagSeed = 0;\nMatrix._IdentityReadOnly = Matrix.Identity();\n/**\n * @internal\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\n */\nvar MathTmp = /*#__PURE__*/_createClass(function MathTmp() {\n  _classCallCheck(this, MathTmp);\n});\nMathTmp.Vector3 = ArrayTools.BuildTuple(11, Vector3.Zero);\nMathTmp.Matrix = ArrayTools.BuildTuple(2, Matrix.Identity);\nMathTmp.Quaternion = ArrayTools.BuildTuple(3, Quaternion.Zero);\n/**\n * @internal\n */\nexport var TmpVectors = /*#__PURE__*/_createClass(function TmpVectors() {\n  _classCallCheck(this, TmpVectors);\n});\nTmpVectors.Vector2 = ArrayTools.BuildTuple(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\nTmpVectors.Vector3 = ArrayTools.BuildTuple(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\nTmpVectors.Vector4 = ArrayTools.BuildTuple(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\nTmpVectors.Quaternion = ArrayTools.BuildTuple(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\nTmpVectors.Matrix = ArrayTools.BuildTuple(8, Matrix.Identity); // 8 temp Matrices at once should be enough\nRegisterClass(\"BABYLON.Vector2\", Vector2);\nRegisterClass(\"BABYLON.Vector3\", Vector3);\nRegisterClass(\"BABYLON.Vector4\", Vector4);\nRegisterClass(\"BABYLON.Matrix\", Matrix);\nvar mtxConvertNDCToHalfZRange = Matrix.FromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 1);"],"names":["_ExtractAsInt","value","parseInt","toString","replace","Vector2","x","arguments","length","undefined","y","this","key","concat","hash","array","index","FromArrayToRef","result","Array","toArray","source","copyFromFloats","otherVector","constructor","divideToRef","scale","_scale","scaleToRef","epsilon","Math","floor","angle","cos","sin","sqrt","NormalizeToRef","get","_ZeroReadOnly","offset","value1","value2","value3","value4","amount","squared","cubed","min","max","tangent1","tangent2","part1","part2","part3","part4","time","Hermite1stDerivativeToRef","t2","start","end","left","right","vector","newVector","len","transformation","TransformToRef","m","p","p0","p1","p2","a","sign","s","t","DistanceSquared","CenterToRef","ref","segA","segB","l2","Distance","v","subtract","Dot","proj","add","multiplyByFloats","Zero","Vector3","z","_isDirty","_x","_y","_z","set","Quaternion","RotationYawPitchRoll","addInPlaceFromFloats","subtractFromFloatsToRef","_scale2","radius","theta","acos","phi","atan2","PI","q","ix","w","iy","iz","iw","applyRotationQuaternionToRef","plane","origin","projectOnPlaneToRef","n","normal","d","V","MathTmp","subtractToRef","normalize","denom","abs","pow","setAll","Infinity","scaledV","scaleInPlace","addToRef","other","minimizeInPlaceFromFloats","maximizeInPlaceFromFloats","absX","absY","absZ","normalizeFromLength","order","_this","toLowerCase","copyFrom","forEach","val","i","quaternion","toRotationMatrix","Matrix","TransformCoordinatesToRef","point","rotateByQuaternionToRef","CrossToRef","normalized","normalizeToRef","reference","vector0","vector1","axis","size","d0","v0","v1","dot","isNaN","vNormal","forward","target","diff","TmpVectors","PitchYawRollToMoveBetweenPointsToRef","slerp","vector0Dir","vector1Dir","vector0Length","vector1Length","scale0","scale1","omega","invSin","addInPlace","goal","deltaTime","lerpTime","SlerpToRef","FromArray","_UpReadOnly","_DownReadOnly","_RightReadOnly","_LeftReadOnly","_LeftHandedForwardReadOnly","_RightHandedForwardReadOnly","rightHandedSystem","TransformCoordinatesFromFloatsToRef","rx","ry","rz","rw","TransformNormalToRef","TransformNormalFromFloatsToRef","ClampToRef","minimizeInPlace","maximizeInPlace","LerpToRef","world","transform","viewport","ProjectToRef","cw","width","ch","height","cx","cy","viewportMatrix","FromValuesToRef","matrix","multiplyToRef","num","viewportWidth","viewportHeight","Unproject","IdentityReadOnly","view","projection","UnprojectToRef","UnprojectFloatsToRef","sourceX","sourceY","sourceZ","_a","invert","screenSource","isNDCHalfZRange","_UnprojectFromInvertedMatrixToRef","p1p0","p2p0","p2p1","vectorp0","p1p0L","p2p0L","p2p1L","nl","l","cosA","projVector","v2","tmp","projP","subtractInPlace","s0","s1","e0","e1","s2","edge","tmp2","tmp3","r","e0proj","e0projL","cosG","triProj","axis1","axis2","axis3","rotation","RotationFromAxisToRef","quat","RotationQuaternionFromAxisToRef","toEulerAnglesToRef","Up","Down","Forward","Right","Left","Vector4","_scale3","_w","otherQuaternion","q1","conjugate","lengthSquared","conjugateInPlace","inv","clone","qz","qx","qy","qw","zAxisY","limit","sqw","sqz","sqx","sqy","asin","FromQuaternionToRef","FromRotationMatrixToRef","data","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","quat0","quat1","RotationAxisToRef","RotationYawPitchRollToRef","vec","vecFrom","vecTo","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","alpha","beta","gamma","RotationAlphaBetaGammaToRef","halfGammaPlusAlpha","halfGammaMinusAlpha","halfBeta","rotMat","FromXYZAxesToRef","up","FromLookDirectionLHToRef","LookDirectionLHToRef","FromLookDirectionRHToRef","LookDirectionRHToRef","Identity","num2","num3","num4","flag","num5","num6","_isIdentity","_isIdentityDirty","_isIdentity3x2","_isIdentity3x2Dirty","updateFlag","_m","markAsUpdated","_UpdateFlagSeed","isIdentity","isIdentityDirty","isIdentity3x2","isIdentity3x2Dirty","m00","m01","m02","m03","m10","m20","m30","det_22_33","det_21_33","det_21_32","det_20_33","det_20_32","det_20_31","invertToRef","_updateIdentityStatus","resultM","otherM","IdentityToRef","cofact_00","cofact_01","cofact_02","cofact_03","det","detInv","det_12_33","det_11_33","det_11_32","det_10_33","det_10_32","det_10_31","det_12_23","det_11_23","det_11_22","det_10_23","det_10_22","det_10_21","cofact_10","cofact_11","cofact_12","cofact_13","cofact_20","cofact_21","cofact_22","cofact_23","cofact_30","cofact_31","cofact_32","cofact_33","vector3","setTranslationFromFloats","copyToArray","o","multiplyToArray","tm0","tm1","tm2","tm3","tm4","tm5","tm6","tm7","tm8","tm9","tm10","tm11","tm12","tm13","tm14","tm15","om0","om1","om2","om3","om4","om5","om6","om7","om8","om9","om10","om11","om12","om13","om14","om15","om","node","rotationQuaternion","decompose","scaling","position","translation","preserveScalingNode","signX","signY","signZ","determinant","sx","sy","sz","rowVector","row","setRowFromFloats","TransposeToRef","_scale4","transposeToRef","getRotationMatrixToRef","_IdentityReadOnly","initialM11","initialM12","initialM13","initialM14","initialM21","initialM22","initialM23","initialM24","initialM31","initialM32","initialM33","initialM34","initialM41","initialM42","initialM43","initialM44","ComposeToRef","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","identity","FromValues","zero","RotationXToRef","c","RotationYToRef","RotationZToRef","c1","from","to","Cross","k","ScalingToRef","TranslationToRef","startValue","endValue","gradient","startM","endM","DecomposeLerpToRef","startScale","startRotation","startTranslation","endScale","endRotation","endTranslation","resultScale","resultRotation","resultTranslation","eye","LookAtLHToRef","xAxis","yAxis","zAxis","xSquareLength","ex","ey","ez","LookAtRHToRef","back","znear","zfar","halfZRange","OrthoLHToRef","b","mtxConvertNDCToHalfZRange","bottom","top","OrthoOffCenterLHToRef","i0","i1","OrthoOffCenterRHToRef","projectionPlaneTilt","f","rot","tan","fov","aspect","reverseDepthBufferMode","PerspectiveFovLHToRef","isVerticalFovFixed","PerspectiveFovRHToRef","rightHanded","rightHandedFactor","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","zmin","zmax","arr","Float32Array","rm","mm","ReflectionToRef","temp","temp2","temp3","xaxis","yaxis","zaxis","zw","zx","yw","xw"],"sourceRoot":""}