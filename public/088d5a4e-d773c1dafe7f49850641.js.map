{"version":3,"file":"088d5a4e-d773c1dafe7f49850641.js","mappings":"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","sources":["webpack://freak-noize-studio/./node_modules/@babylonjs/core/Maths/math.vector.js"],"sourcesContent":["import { Scalar } from \"./math.scalar\";\nimport { Epsilon } from './math.constants';\nimport { ArrayTools } from '../Misc/arrayTools';\nimport { _TypeStore } from '../Misc/typeStore';\nimport { PerformanceConfigurator } from '../Engines/performanceConfigurator';\n/**\r\n * Class representing a vector containing 2 coordinates\r\n */\n\nvar Vector2 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector2 from the given x and y coordinates\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   */\n  function Vector2(\n  /** defines the first coordinate */\n  x,\n  /** defines the second coordinate */\n  y) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    this.x = x;\n    this.y = y;\n  }\n  /**\r\n   * Gets a string with the Vector2 coordinates\r\n   * @returns a string with the Vector2 coordinates\r\n   */\n\n\n  Vector2.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y: \" + this.y + \"}\";\n  };\n  /**\r\n   * Gets class name\r\n   * @returns the string \"Vector2\"\r\n   */\n\n\n  Vector2.prototype.getClassName = function () {\n    return \"Vector2\";\n  };\n  /**\r\n   * Gets current vector hash code\r\n   * @returns the Vector2 hash code as a number\r\n   */\n\n\n  Vector2.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Sets the Vector2 coordinates in the given array or Float32Array from the given index.\r\n   * @param array defines the source array\r\n   * @param index defines the offset in source array\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector2.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector2.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Copy the current vector to an array\r\n   * @returns a new array with 2 elements: the Vector2 coordinates.\r\n   */\n\n\n  Vector2.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given Vector2 coordinates\r\n   * @param source defines the source Vector2\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.copyFromFloats = function (x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  };\n  /**\r\n   * Sets the Vector2 coordinates with the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.set = function (x, y) {\n    return this.copyFromFloats(x, y);\n  };\n  /**\r\n   * Add another vector with the current one\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2 set with the addition of the current Vector2 and the given one coordinates\r\n   */\n\n\n  Vector2.prototype.add = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the addition of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    return this;\n  };\n  /**\r\n   * Set the Vector2 coordinates by adding the given Vector2 coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 by adding the current Vector2 coordinates to the given Vector3 x, y coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.addVector3 = function (otherVector) {\n    return new Vector2(this.x + otherVector.x, this.y + otherVector.y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the subtracted coordinates of the given one from the current Vector2\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.subtract = function (otherVector) {\n    return new Vector2(this.x - otherVector.x, this.y - otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the subtraction of the given one from the current Vector2 coordinates.\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    return this;\n  };\n  /**\r\n   * Sets the current Vector2 coordinates by subtracting from it the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 set with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiply = function (otherVector) {\n    return new Vector2(this.x * otherVector.x, this.y * otherVector.y);\n  };\n  /**\r\n   * Sets \"result\" coordinates with the multiplication of the current Vector2 and the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 set with the Vector2 coordinates multiplied by the given floats\r\n   * @param x defines the first coordinate\r\n   * @param y defines the second coordinate\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.multiplyByFloats = function (x, y) {\n    return new Vector2(this.x * x, this.y * y);\n  };\n  /**\r\n   * Returns a new Vector2 set with the Vector2 coordinates divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.divide = function (otherVector) {\n    return new Vector2(this.x / otherVector.x, this.y / otherVector.y);\n  };\n  /**\r\n   * Sets the \"result\" coordinates with the Vector2 divided by the given one coordinates\r\n   * @param otherVector defines the other vector\r\n   * @param result defines the target vector\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector2 coordinates by the given ones\r\n   * @param otherVector defines the other vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Gets a new Vector2 with current Vector2 negated coordinates\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.negate = function () {\n    return new Vector2(-this.x, -this.y);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector2.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector2 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector2\r\n   */\n\n\n  Vector2.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1);\n  };\n  /**\r\n   * Multiply the Vector2 coordinates by scale\r\n   * @param scale defines the scaling factor\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector2 scaled by \"scale\" from the current Vector2\r\n   * @param scale defines the scaling factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.scale = function (scale) {\n    var result = new Vector2(0, 0);\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector2 values by a factor and add the result to a given Vector2\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector2 object where to store the result\r\n   * @returns the unmodified current Vector2\r\n   */\n\n\n  Vector2.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    return this;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals\r\n   * @param otherVector defines the other vector\r\n   * @returns true if the given vector coordinates strictly equal the current Vector2 ones\r\n   */\n\n\n  Vector2.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y;\n  };\n  /**\r\n   * Gets a boolean if two vectors are equals (using an epsilon value)\r\n   * @param otherVector defines the other vector\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given vector coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Vector2.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon);\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.floor = function () {\n    return new Vector2(Math.floor(this.x), Math.floor(this.y));\n  };\n  /**\r\n   * Gets a new Vector2 from current Vector2 floored values\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.fract = function () {\n    return new Vector2(this.x - Math.floor(this.x), this.y - Math.floor(this.y));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the vector\r\n   * @returns the vector length (float)\r\n   */\n\n\n  Vector2.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  };\n  /**\r\n   * Gets the vector squared length\r\n   * @returns the vector squared length (float)\r\n   */\n\n\n  Vector2.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y;\n  }; // Methods\n\n  /**\r\n   * Normalize the vector\r\n   * @returns the current updated Vector2\r\n   */\n\n\n  Vector2.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    this.x /= len;\n    this.y /= len;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector2 copied from the Vector2\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.prototype.clone = function () {\n    return new Vector2(this.x, this.y);\n  }; // Statics\n\n  /**\r\n   * Gets a new Vector2(0, 0)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Zero = function () {\n    return new Vector2(0, 0);\n  };\n  /**\r\n   * Gets a new Vector2(1, 1)\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.One = function () {\n    return new Vector2(1, 1);\n  };\n  /**\r\n   * Gets a new Vector2 set from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector2(array[offset], array[offset + 1]);\n  };\n  /**\r\n   * Sets \"result\" from the given index element of the given array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the data source\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n  };\n  /**\r\n   * Gets a new Vector2 located for \"amount\" (float) on the CatmullRom spline defined by the given four Vector2\r\n   * @param value1 defines 1st point of control\r\n   * @param value2 defines 2nd point of control\r\n   * @param value3 defines 3rd point of control\r\n   * @param value4 defines 4th point of control\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2.x + (-value1.x + value3.x) * amount + (2.0 * value1.x - 5.0 * value2.x + 4.0 * value3.x - value4.x) * squared + (-value1.x + 3.0 * value2.x - 3.0 * value3.x + value4.x) * cubed);\n    var y = 0.5 * (2.0 * value2.y + (-value1.y + value3.y) * amount + (2.0 * value1.y - 5.0 * value2.y + 4.0 * value3.y - value4.y) * squared + (-value1.y + 3.0 * value2.y - 3.0 * value3.y + value4.y) * cubed);\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 set with same the coordinates than \"value\" ones if the vector \"value\" is in the square defined by \"min\" and \"max\".\r\n   * If a coordinate of \"value\" is lower than \"min\" coordinates, the returned Vector2 is given this \"min\" coordinate.\r\n   * If a coordinate of \"value\" is greater than \"max\" coordinates, the returned Vector2 is given this \"max\" coordinate\r\n   * @param value defines the value to clamp\r\n   * @param min defines the lower limit\r\n   * @param max defines the upper limit\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Clamp = function (value, min, max) {\n    var x = value.x;\n    x = x > max.x ? max.x : x;\n    x = x < min.x ? min.x : x;\n    var y = value.y;\n    y = y > max.y ? max.y : y;\n    y = y < min.y ? min.y : y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the Hermite spline defined by the vectors \"value1\", \"value3\", \"tangent1\", \"tangent2\"\r\n   * @param value1 defines the 1st control point\r\n   * @param tangent1 defines the outgoing tangent\r\n   * @param value2 defines the 2nd control point\r\n   * @param tangent2 defines the incoming tangent\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1.x * part1 + value2.x * part2 + tangent1.x * part3 + tangent2.x * part4;\n    var y = value1.y * part1 + value2.y * part2 + tangent1.y * part3 + tangent2.y * part4;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Returns a new Vector2 located for \"amount\" (float) on the linear interpolation between the vector \"start\" adn the vector \"end\".\r\n   * @param start defines the start vector\r\n   * @param end defines the end vector\r\n   * @param amount defines the interpolation factor\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Lerp = function (start, end, amount) {\n    var x = start.x + (end.x - start.x) * amount;\n    var y = start.y + (end.y - start.y) * amount;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets the dot product of the vector \"left\" and the vector \"right\"\r\n   * @param left defines first vector\r\n   * @param right defines second vector\r\n   * @returns the dot product (float)\r\n   */\n\n\n  Vector2.Dot = function (left, right) {\n    return left.x * right.x + left.y * right.y;\n  };\n  /**\r\n   * Returns a new Vector2 equal to the normalized given vector\r\n   * @param vector defines the vector to normalize\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Normalize = function (vector) {\n    var newVector = vector.clone();\n    newVector.normalize();\n    return newVector;\n  };\n  /**\r\n   * Gets a new Vector2 set with the minimal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Minimize = function (left, right) {\n    var x = left.x < right.x ? left.x : right.x;\n    var y = left.y < right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vecto2 set with the maximal coordinate values from the \"left\" and \"right\" vectors\r\n   * @param left defines 1st vector\r\n   * @param right defines 2nd vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Maximize = function (left, right) {\n    var x = left.x > right.x ? left.x : right.x;\n    var y = left.y > right.y ? left.y : right.y;\n    return new Vector2(x, y);\n  };\n  /**\r\n   * Gets a new Vector2 set with the transformed coordinates of the given vector by the given transformation matrix\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Transform = function (vector, transformation) {\n    var r = Vector2.Zero();\n    Vector2.TransformToRef(vector, transformation, r);\n    return r;\n  };\n  /**\r\n   * Transforms the given vector coordinates by the given transformation matrix and stores the result in the vector \"result\" coordinates\r\n   * @param vector defines the vector to transform\r\n   * @param transformation defines the matrix to apply\r\n   * @param result defines the target vector\r\n   */\n\n\n  Vector2.TransformToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + m[12];\n    var y = vector.x * m[1] + vector.y * m[5] + m[13];\n    result.x = x;\n    result.y = y;\n  };\n  /**\r\n   * Determines if a given vector is included in a triangle\r\n   * @param p defines the vector to test\r\n   * @param p0 defines 1st triangle point\r\n   * @param p1 defines 2nd triangle point\r\n   * @param p2 defines 3rd triangle point\r\n   * @returns true if the point \"p\" is in the triangle defined by the vertors \"p0\", \"p1\", \"p2\"\r\n   */\n\n\n  Vector2.PointInTriangle = function (p, p0, p1, p2) {\n    var a = 1 / 2 * (-p1.y * p2.x + p0.y * (-p1.x + p2.x) + p0.x * (p1.y - p2.y) + p1.x * p2.y);\n    var sign = a < 0 ? -1 : 1;\n    var s = (p0.y * p2.x - p0.x * p2.y + (p2.y - p0.y) * p.x + (p0.x - p2.x) * p.y) * sign;\n    var t = (p0.x * p1.y - p0.y * p1.x + (p0.y - p1.y) * p.x + (p1.x - p0.x) * p.y) * sign;\n    return s > 0 && t > 0 && s + t < 2 * a * sign;\n  };\n  /**\r\n   * Gets the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the distance between vectors\r\n   */\n\n\n  Vector2.Distance = function (value1, value2) {\n    return Math.sqrt(Vector2.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns the squared distance between vectors\r\n   */\n\n\n  Vector2.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    return x * x + y * y;\n  };\n  /**\r\n   * Gets a new Vector2 located at the center of the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines first vector\r\n   * @param value2 defines second vector\r\n   * @returns a new Vector2\r\n   */\n\n\n  Vector2.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Gets the shortest distance (float) between the point \"p\" and the segment defined by the two points \"segA\" and \"segB\".\r\n   * @param p defines the middle point\r\n   * @param segA defines one point of the segment\r\n   * @param segB defines the other point of the segment\r\n   * @returns the shortest distance\r\n   */\n\n\n  Vector2.DistanceOfPointFromSegment = function (p, segA, segB) {\n    var l2 = Vector2.DistanceSquared(segA, segB);\n\n    if (l2 === 0.0) {\n      return Vector2.Distance(p, segA);\n    }\n\n    var v = segB.subtract(segA);\n    var t = Math.max(0, Math.min(1, Vector2.Dot(p.subtract(segA), v) / l2));\n    var proj = segA.add(v.multiplyByFloats(t, t));\n    return Vector2.Distance(p, proj);\n  };\n\n  return Vector2;\n}();\n\nexport { Vector2 };\n/**\r\n * Class used to store (x,y,z) vector representation\r\n * A Vector3 is the main object used in 3D geometry\r\n * It can represent etiher the coordinates of a point the space, either a direction\r\n * Reminder: js uses a left handed forward facing system\r\n */\n\nvar Vector3 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Vector3 object from the given x, y, z (floats) coordinates.\r\n   * @param x defines the first coordinates (on X axis)\r\n   * @param y defines the second coordinates (on Y axis)\r\n   * @param z defines the third coordinates (on Z axis)\r\n   */\n  function Vector3(x, y, z) {\n    if (x === void 0) {\n      x = 0;\n    }\n\n    if (y === void 0) {\n      y = 0;\n    }\n\n    if (z === void 0) {\n      z = 0;\n    }\n    /** @hidden */\n\n\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n  }\n\n  Object.defineProperty(Vector3.prototype, \"x\", {\n    /** Gets or sets the x coordinate */\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3.prototype, \"y\", {\n    /** Gets or sets the y coordinate */\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3.prototype, \"z\", {\n    /** Gets or sets the z coordinate */\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Creates a string representation of the Vector3\r\n   * @returns a string with the Vector3 coordinates.\r\n   */\n\n  Vector3.prototype.toString = function () {\n    return \"{X: \" + this._x + \" Y:\" + this._y + \" Z:\" + this._z + \"}\";\n  };\n  /**\r\n   * Gets the class name\r\n   * @returns the string \"Vector3\"\r\n   */\n\n\n  Vector3.prototype.getClassName = function () {\n    return \"Vector3\";\n  };\n  /**\r\n   * Creates the Vector3 hash code\r\n   * @returns a number which tends to be unique between Vector3 instances\r\n   */\n\n\n  Vector3.prototype.getHashCode = function () {\n    var hash = this._x | 0;\n    hash = hash * 397 ^ (this._y | 0);\n    hash = hash * 397 ^ (this._z | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Creates an array containing three elements : the coordinates of the Vector3\r\n   * @returns a new array of numbers\r\n   */\n\n\n  Vector3.prototype.asArray = function () {\n    var result = [];\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array or Float32Array from the given index with the successive coordinates of the Vector3\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.toArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    array[index] = this._x;\n    array[index + 1] = this._y;\n    array[index + 2] = this._z;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector3.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Converts the current Vector3 into a quaternion (considering that the Vector3 contains Euler angles representation of a rotation)\r\n   * @returns a new Quaternion object, computed from the Vector3 coordinates\r\n   */\n\n\n  Vector3.prototype.toQuaternion = function () {\n    return Quaternion.RotationYawPitchRoll(this._y, this._x, this._z);\n  };\n  /**\r\n   * Adds the given vector to the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlace = function (otherVector) {\n    return this.addInPlaceFromFloats(otherVector._x, otherVector._y, otherVector._z);\n  };\n  /**\r\n   * Adds the given coordinates to the current Vector3\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.addInPlaceFromFloats = function (x, y, z) {\n    this.x += x;\n    this.y += y;\n    this.z += z;\n    return this;\n  };\n  /**\r\n   * Gets a new Vector3, result of the addition the current Vector3 and the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.add = function (otherVector) {\n    return new Vector3(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n  };\n  /**\r\n   * Adds the current Vector3 to the given one and stores the result in the vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.addToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x + otherVector._x, this._y + otherVector._y, this._z + otherVector._z);\n  };\n  /**\r\n   * Subtract the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector._x;\n    this.y -= otherVector._y;\n    this.z -= otherVector._z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the subtraction of the given vector from the current Vector3\r\n   * @param otherVector defines the second operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtract = function (otherVector) {\n    return new Vector3(this._x - otherVector._x, this._y - otherVector._y, this._z - otherVector._z);\n  };\n  /**\r\n   * Subtracts the given vector from the current Vector3 and stores the result in the vector \"result\".\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractToRef = function (otherVector, result) {\n    return this.subtractFromFloatsToRef(otherVector._x, otherVector._y, otherVector._z, result);\n  };\n  /**\r\n   * Returns a new Vector3 set with the subtraction of the given floats from the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the resulting Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloats = function (x, y, z) {\n    return new Vector3(this._x - x, this._y - y, this._z - z);\n  };\n  /**\r\n   * Subtracts the given floats from the current Vector3 coordinates and set the given vector \"result\" with this result\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.subtractFromFloatsToRef = function (x, y, z, result) {\n    return result.copyFromFloats(this._x - x, this._y - y, this._z - z);\n  };\n  /**\r\n   * Gets a new Vector3 set with the current Vector3 negated coordinates\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.negate = function () {\n    return new Vector3(-this._x, -this._y, -this._z);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector3.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector3 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this._x * -1, this._y * -1, this._z * -1);\n  };\n  /**\r\n   * Multiplies the Vector3 coordinates by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the current Vector3 coordinates multiplied by the float \"scale\"\r\n   * @param scale defines the multiplier factor\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.scale = function (scale) {\n    return new Vector3(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the float \"scale\" and stores the result in the given vector \"result\" coordinates\r\n   * @param scale defines the multiplier factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleToRef = function (scale, result) {\n    return result.copyFromFloats(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Scale the current Vector3 values by a factor and add the result to a given Vector3\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the unmodified current Vector3\r\n   */\n\n\n  Vector3.prototype.scaleAndAddToRef = function (scale, result) {\n    return result.addInPlaceFromFloats(this._x * scale, this._y * scale, this._z * scale);\n  };\n  /**\r\n   * Projects the current vector3 to a plane along a ray starting from a specified origin and directed towards the point.\r\n   * @param origin defines the origin of the projection ray\r\n   * @param plane defines the plane to project to\r\n   * @returns the projected vector3\r\n   */\n\n\n  Vector3.prototype.projectOnPlane = function (plane, origin) {\n    var result = Vector3.Zero();\n    this.projectOnPlaneToRef(plane, origin, result);\n    return result;\n  };\n  /**\r\n   * Projects the current vector3 to a plane along a ray starting from a specified origin and directed towards the point.\r\n   * @param origin defines the origin of the projection ray\r\n   * @param plane defines the plane to project to\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.prototype.projectOnPlaneToRef = function (plane, origin, result) {\n    var n = plane.normal;\n    var d = plane.d;\n    var V = MathTmp.Vector3[0]; // ray direction\n\n    this.subtractToRef(origin, V);\n    V.normalize();\n    var denom = Vector3.Dot(V, n);\n    var t = -(Vector3.Dot(origin, n) + d) / denom; // P = P0 + t*V\n\n    var scaledV = V.scaleInPlace(t);\n    origin.addToRef(scaledV, result);\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are strictly equal\r\n   * @param otherVector defines the second operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equals = function (otherVector) {\n    return otherVector && this._x === otherVector._x && this._y === otherVector._y && this._z === otherVector._z;\n  };\n  /**\r\n   * Returns true if the current Vector3 and the given vector coordinates are distant less than epsilon\r\n   * @param otherVector defines the second operand\r\n   * @param epsilon defines the minimal distance to define values as equals\r\n   * @returns true if both vectors are distant less than epsilon\r\n   */\n\n\n  Vector3.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this._x, otherVector._x, epsilon) && Scalar.WithinEpsilon(this._y, otherVector._y, epsilon) && Scalar.WithinEpsilon(this._z, otherVector._z, epsilon);\n  };\n  /**\r\n   * Returns true if the current Vector3 coordinates equals the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns true if both vectors are equals\r\n   */\n\n\n  Vector3.prototype.equalsToFloats = function (x, y, z) {\n    return this._x === x && this._y === y && this._z === z;\n  };\n  /**\r\n   * Multiplies the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector._x;\n    this.y *= otherVector._y;\n    this.z *= otherVector._z;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3, result of the multiplication of the current Vector3 by the given vector\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiply = function (otherVector) {\n    return this.multiplyByFloats(otherVector._x, otherVector._y, otherVector._z);\n  };\n  /**\r\n   * Multiplies the current Vector3 by the given one and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x * otherVector._x, this._y * otherVector._y, this._z * otherVector._z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the mulliplication of the current Vector3 coordinates by the given floats\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.multiplyByFloats = function (x, y, z) {\n    return new Vector3(this._x * x, this._y * y, this._z * z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the division of the current Vector3 coordinates by the given ones\r\n   * @param otherVector defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.divide = function (otherVector) {\n    return new Vector3(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones and stores the result in the given vector \"result\"\r\n   * @param otherVector defines the second operand\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector3.prototype.divideToRef = function (otherVector, result) {\n    return result.copyFromFloats(this._x / otherVector._x, this._y / otherVector._y, this._z / otherVector._z);\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlace = function (other) {\n    return this.minimizeInPlaceFromFloats(other._x, other._y, other._z);\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given vector ones.\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlace = function (other) {\n    return this.maximizeInPlaceFromFloats(other._x, other._y, other._z);\n  };\n  /**\r\n   * Updates the current Vector3 with the minimal coordinate values between its and the given coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.minimizeInPlaceFromFloats = function (x, y, z) {\n    if (x < this._x) {\n      this.x = x;\n    }\n\n    if (y < this._y) {\n      this.y = y;\n    }\n\n    if (z < this._z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the current Vector3 with the maximal coordinate values between its and the given coordinates.\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.maximizeInPlaceFromFloats = function (x, y, z) {\n    if (x > this._x) {\n      this.x = x;\n    }\n\n    if (y > this._y) {\n      this.y = y;\n    }\n\n    if (z > this._z) {\n      this.z = z;\n    }\n\n    return this;\n  };\n  /**\r\n   * Due to float precision, scale of a mesh could be uniform but float values are off by a small fraction\r\n   * Check if is non uniform within a certain amount of decimal places to account for this\r\n   * @param epsilon the amount the values can differ\r\n   * @returns if the the vector is non uniform to a certain number of decimal places\r\n   */\n\n\n  Vector3.prototype.isNonUniformWithinEpsilon = function (epsilon) {\n    var absX = Math.abs(this._x);\n    var absY = Math.abs(this._y);\n\n    if (!Scalar.WithinEpsilon(absX, absY, epsilon)) {\n      return true;\n    }\n\n    var absZ = Math.abs(this._z);\n\n    if (!Scalar.WithinEpsilon(absX, absZ, epsilon)) {\n      return true;\n    }\n\n    if (!Scalar.WithinEpsilon(absY, absZ, epsilon)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  Object.defineProperty(Vector3.prototype, \"isNonUniform\", {\n    /**\r\n     * Gets a boolean indicating that the vector is non uniform meaning x, y or z are not all the same\r\n     */\n    get: function get() {\n      var absX = Math.abs(this._x);\n      var absY = Math.abs(this._y);\n\n      if (absX !== absY) {\n        return true;\n      }\n\n      var absZ = Math.abs(this._z);\n\n      if (absX !== absZ) {\n        return true;\n      }\n\n      return false;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n  Vector3.prototype.floor = function () {\n    return new Vector3(Math.floor(this._x), Math.floor(this._y), Math.floor(this._z));\n  };\n  /**\r\n   * Gets a new Vector3 from current Vector3 floored values\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.prototype.fract = function () {\n    return new Vector3(this._x - Math.floor(this._x), this._y - Math.floor(this._y), this._z - Math.floor(this._z));\n  }; // Properties\n\n  /**\r\n   * Gets the length of the Vector3\r\n   * @returns the length of the Vector3\r\n   */\n\n\n  Vector3.prototype.length = function () {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z);\n  };\n  /**\r\n   * Gets the squared length of the Vector3\r\n   * @returns squared length of the Vector3\r\n   */\n\n\n  Vector3.prototype.lengthSquared = function () {\n    return this._x * this._x + this._y * this._y + this._z * this._z;\n  };\n  /**\r\n   * Normalize the current Vector3.\r\n   * Please note that this is an in place operation.\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalize = function () {\n    return this.normalizeFromLength(this.length());\n  };\n  /**\r\n   * Reorders the x y z properties of the vector in place\r\n   * @param order new ordering of the properties (eg. for vector 1,2,3 with \"ZYX\" will produce 3,2,1)\r\n   * @returns the current updated vector\r\n   */\n\n\n  Vector3.prototype.reorderInPlace = function (order) {\n    var _this = this;\n\n    order = order.toLowerCase();\n\n    if (order === \"xyz\") {\n      return this;\n    }\n\n    MathTmp.Vector3[0].copyFrom(this);\n    [\"x\", \"y\", \"z\"].forEach(function (val, i) {\n      _this[val] = MathTmp.Vector3[0][order[i]];\n    });\n    return this;\n  };\n  /**\r\n   * Rotates the vector around 0,0,0 by a quaternion\r\n   * @param quaternion the rotation quaternion\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionToRef = function (quaternion, result) {\n    quaternion.toRotationMatrix(MathTmp.Matrix[0]);\n    Vector3.TransformCoordinatesToRef(this, MathTmp.Matrix[0], result);\n    return result;\n  };\n  /**\r\n   * Rotates a vector around a given point\r\n   * @param quaternion the rotation quaternion\r\n   * @param point the point to rotate around\r\n   * @param result vector to store the result\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector3.prototype.rotateByQuaternionAroundPointToRef = function (quaternion, point, result) {\n    this.subtractToRef(point, MathTmp.Vector3[0]);\n    MathTmp.Vector3[0].rotateByQuaternionToRef(quaternion, MathTmp.Vector3[0]);\n    point.addToRef(MathTmp.Vector3[0], result);\n    return result;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the current vector and the \"other\" one\r\n   * The cross product is then orthogonal to both current and \"other\"\r\n   * @param other defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.prototype.cross = function (other) {\n    return Vector3.Cross(this, other);\n  };\n  /**\r\n   * Normalize the current Vector3 with the given input length.\r\n   * Please note that this is an in place operation.\r\n   * @param len the length of the vector\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeFromLength = function (len) {\n    if (len === 0 || len === 1.0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Normalize the current Vector3 to a new vector\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToNew = function () {\n    var normalized = new Vector3(0, 0, 0);\n    this.normalizeToRef(normalized);\n    return normalized;\n  };\n  /**\r\n   * Normalize the current Vector3 to the reference\r\n   * @param reference define the Vector3 to update\r\n   * @returns the updated Vector3\r\n   */\n\n\n  Vector3.prototype.normalizeToRef = function (reference) {\n    var len = this.length();\n\n    if (len === 0 || len === 1.0) {\n      return reference.copyFromFloats(this._x, this._y, this._z);\n    }\n\n    return this.scaleToRef(1.0 / len, reference);\n  };\n  /**\r\n   * Creates a new Vector3 copied from the current Vector3\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.prototype.clone = function () {\n    return new Vector3(this._x, this._y, this._z);\n  };\n  /**\r\n   * Copies the given vector coordinates to the current Vector3 ones\r\n   * @param source defines the source Vector3\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFrom = function (source) {\n    return this.copyFromFloats(source._x, source._y, source._z);\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.copyFromFloats = function (x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    return this;\n  };\n  /**\r\n   * Copies the given floats to the current Vector3 coordinates\r\n   * @param x defines the x coordinate of the operand\r\n   * @param y defines the y coordinate of the operand\r\n   * @param z defines the z coordinate of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.set = function (x, y, z) {\n    return this.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y and z coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector3.prototype.setAll = function (v) {\n    this.x = this.y = this.z = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Get the clip factor between two vectors\r\n   * @param vector0 defines the first operand\r\n   * @param vector1 defines the second operand\r\n   * @param axis defines the axis to use\r\n   * @param size defines the size along the axis\r\n   * @returns the clip factor\r\n   */\n\n\n  Vector3.GetClipFactor = function (vector0, vector1, axis, size) {\n    var d0 = Vector3.Dot(vector0, axis) - size;\n    var d1 = Vector3.Dot(vector1, axis) - size;\n    var s = d0 / (d0 - d1);\n    return s;\n  };\n  /**\r\n   * Get angle between two vectors\r\n   * @param vector0 angle between vector0 and vector1\r\n   * @param vector1 angle between vector0 and vector1\r\n   * @param normal direction of the normal\r\n   * @return the angle between vector0 and vector1\r\n   */\n\n\n  Vector3.GetAngleBetweenVectors = function (vector0, vector1, normal) {\n    var v0 = vector0.normalizeToRef(MathTmp.Vector3[1]);\n    var v1 = vector1.normalizeToRef(MathTmp.Vector3[2]);\n    var dot = Vector3.Dot(v0, v1);\n    var n = MathTmp.Vector3[3];\n    Vector3.CrossToRef(v0, v1, n);\n\n    if (Vector3.Dot(n, normal) > 0) {\n      return Math.acos(dot);\n    }\n\n    return -Math.acos(dot);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    return new Vector3(array[offset], array[offset + 1], array[offset + 2]);\n  };\n  /**\r\n   * Returns a new Vector3 set from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @returns the new Vector3\r\n   * @deprecated Please use FromArray instead.\r\n   */\n\n\n  Vector3.FromFloatArray = function (array, offset) {\n    return Vector3.FromArray(array, offset);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n  };\n  /**\r\n   * Sets the given vector \"result\" with the element values from the index \"offset\" of the given Float32Array\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param result defines the Vector3 where to store the result\r\n   * @deprecated Please use FromArrayToRef instead.\r\n   */\n\n\n  Vector3.FromFloatArrayToRef = function (array, offset, result) {\n    return Vector3.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the given floats.\r\n   * @param x defines the x coordinate of the source\r\n   * @param y defines the y coordinate of the source\r\n   * @param z defines the z coordinate of the source\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.FromFloatsToRef = function (x, y, z, result) {\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 0.0)\r\n   * @returns a new empty Vector3\r\n   */\n\n\n  Vector3.Zero = function () {\n    return new Vector3(0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 1.0, 1.0)\r\n   * @returns a new unit Vector3\r\n   */\n\n\n  Vector3.One = function () {\n    return new Vector3(1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 1.0, 0.0)\r\n   * @returns a new up Vector3\r\n   */\n\n\n  Vector3.Up = function () {\n    return new Vector3(0.0, 1.0, 0.0);\n  };\n\n  Object.defineProperty(Vector3, \"UpReadOnly\", {\n    /**\r\n     * Gets a up Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._UpReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Vector3, \"ZeroReadOnly\", {\n    /**\r\n     * Gets a zero Vector3 that must not be updated\r\n     */\n    get: function get() {\n      return Vector3._ZeroReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns a new Vector3 set to (0.0, -1.0, 0.0)\r\n   * @returns a new down Vector3\r\n   */\n\n  Vector3.Down = function () {\n    return new Vector3(0.0, -1.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, 1.0)\r\n   * @param rightHandedSystem is the scene right-handed (negative z)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Forward = function (rightHandedSystem) {\n    if (rightHandedSystem === void 0) {\n      rightHandedSystem = false;\n    }\n\n    return new Vector3(0.0, 0.0, rightHandedSystem ? -1.0 : 1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (0.0, 0.0, -1.0)\r\n   * @param rightHandedSystem is the scene right-handed (negative-z)\r\n   * @returns a new forward Vector3\r\n   */\n\n\n  Vector3.Backward = function (rightHandedSystem) {\n    if (rightHandedSystem === void 0) {\n      rightHandedSystem = false;\n    }\n\n    return new Vector3(0.0, 0.0, rightHandedSystem ? 1.0 : -1.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (1.0, 0.0, 0.0)\r\n   * @returns a new right Vector3\r\n   */\n\n\n  Vector3.Right = function () {\n    return new Vector3(1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set to (-1.0, 0.0, 0.0)\r\n   * @returns a new left Vector3\r\n   */\n\n\n  Vector3.Left = function () {\n    return new Vector3(-1.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the transformation by the given matrix of the given vector.\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the transformed Vector3\r\n   */\n\n\n  Vector3.TransformCoordinates = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformCoordinatesToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given vector\r\n   * This method computes tranformed coordinates only, not transformed direction vectors (ie. it takes translation in account)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesToRef = function (vector, transformation, result) {\n    Vector3.TransformCoordinatesFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" coordinates with the result of the transformation by the given matrix of the given floats (x, y, z)\r\n   * This method computes tranformed coordinates only, not transformed direction vectors\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformCoordinatesFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    var rx = x * m[0] + y * m[4] + z * m[8] + m[12];\n    var ry = x * m[1] + y * m[5] + z * m[9] + m[13];\n    var rz = x * m[2] + y * m[6] + z * m[10] + m[14];\n    var rw = 1 / (x * m[3] + y * m[7] + z * m[11] + m[15]);\n    result.x = rx * rw;\n    result.y = ry * rw;\n    result.z = rz * rw;\n  };\n  /**\r\n   * Returns a new Vector3 set with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.TransformNormal = function (vector, transformation) {\n    var result = Vector3.Zero();\n    Vector3.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param vector defines the Vector3 to transform\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalToRef = function (vector, transformation, result) {\n    this.TransformNormalFromFloatsToRef(vector._x, vector._y, vector._z, transformation, result);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z)\r\n   * This methods computes transformed normalized direction vectors only (ie. it does not apply translation)\r\n   * @param x define the x coordinate of the source vector\r\n   * @param y define the y coordinate of the source vector\r\n   * @param z define the z coordinate of the source vector\r\n   * @param transformation defines the transformation matrix\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.TransformNormalFromFloatsToRef = function (x, y, z, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" on the CatmullRom interpolation spline defined by the vectors \"value1\", \"value2\", \"value3\", \"value4\"\r\n   * @param value1 defines the first control point\r\n   * @param value2 defines the second control point\r\n   * @param value3 defines the third control point\r\n   * @param value4 defines the fourth control point\r\n   * @param amount defines the amount on the spline to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.CatmullRom = function (value1, value2, value3, value4, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var x = 0.5 * (2.0 * value2._x + (-value1._x + value3._x) * amount + (2.0 * value1._x - 5.0 * value2._x + 4.0 * value3._x - value4._x) * squared + (-value1._x + 3.0 * value2._x - 3.0 * value3._x + value4._x) * cubed);\n    var y = 0.5 * (2.0 * value2._y + (-value1._y + value3._y) * amount + (2.0 * value1._y - 5.0 * value2._y + 4.0 * value3._y - value4._y) * squared + (-value1._y + 3.0 * value2._y - 3.0 * value3._y + value4._y) * cubed);\n    var z = 0.5 * (2.0 * value2._z + (-value1._z + value3._z) * amount + (2.0 * value1._z - 5.0 * value2._z + 4.0 * value3._z - value4._z) * squared + (-value1._z + 3.0 * value2._z - 3.0 * value3._z + value4._z) * cubed);\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 set with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Clamp = function (value, min, max) {\n    var v = new Vector3();\n    Vector3.ClampToRef(value, min, max, v);\n    return v;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the coordinates of \"value\", if the vector \"value\" is in the cube defined by the vectors \"min\" and \"max\"\r\n   * If a coordinate value of \"value\" is lower than one of the \"min\" coordinate, then this \"value\" coordinate is set with the \"min\" one\r\n   * If a coordinate value of \"value\" is greater than one of the \"max\" coordinate, then this \"value\" coordinate is set with the \"max\" one\r\n   * @param value defines the current value\r\n   * @param min defines the lower range value\r\n   * @param max defines the upper range value\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.ClampToRef = function (value, min, max, result) {\n    var x = value._x;\n    x = x > max._x ? max._x : x;\n    x = x < min._x ? min._x : x;\n    var y = value._y;\n    y = y > max._y ? max._y : y;\n    y = y < min._y ? min._y : y;\n    var z = value._z;\n    z = z > max._z ? max._z : z;\n    z = z < min._z ? min._z : z;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Checks if a given vector is inside a specific range\r\n   * @param v defines the vector to test\r\n   * @param min defines the minimum range\r\n   * @param max defines the maximum range\r\n   */\n\n\n  Vector3.CheckExtends = function (v, min, max) {\n    min.minimizeInPlace(v);\n    max.maximizeInPlace(v);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the Hermite interpolation spline defined by the vectors \"value1\", \"tangent1\", \"value2\", \"tangent2\"\r\n   * @param value1 defines the first control point\r\n   * @param tangent1 defines the first tangent vector\r\n   * @param value2 defines the second control point\r\n   * @param tangent2 defines the second tangent vector\r\n   * @param amount defines the amount on the interpolation spline (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n    var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n    var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n    return new Vector3(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 located for \"amount\" (float) on the linear interpolation between the vectors \"start\" and \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Lerp = function (start, end, amount) {\n    var result = new Vector3(0, 0, 0);\n    Vector3.LerpToRef(start, end, amount, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the linear interpolation from the vector \"start\" for \"amount\" to the vector \"end\"\r\n   * @param start defines the start value\r\n   * @param end defines the end value\r\n   * @param amount max defines amount between both (between 0 and 1)\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.LerpToRef = function (start, end, amount, result) {\n    result.x = start._x + (end._x - start._x) * amount;\n    result.y = start._y + (end._y - start._y) * amount;\n    result.z = start._z + (end._z - start._z) * amount;\n  };\n  /**\r\n   * Returns the dot product (float) between the vectors \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Vector3.Dot = function (left, right) {\n    return left._x * right._x + left._y * right._y + left._z * right._z;\n  };\n  /**\r\n   * Returns a new Vector3 as the cross product of the vectors \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the cross product\r\n   */\n\n\n  Vector3.Cross = function (left, right) {\n    var result = Vector3.Zero();\n    Vector3.CrossToRef(left, right, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the cross product of \"left\" and \"right\"\r\n   * The cross product is then orthogonal to both \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.CrossToRef = function (left, right, result) {\n    var x = left._y * right._z - left._z * right._y;\n    var y = left._z * right._x - left._x * right._z;\n    var z = left._x * right._y - left._y * right._x;\n    result.copyFromFloats(x, y, z);\n  };\n  /**\r\n   * Returns a new Vector3 as the normalization of the given vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Normalize = function (vector) {\n    var result = Vector3.Zero();\n    Vector3.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the normalization of the given first vector\r\n   * @param vector defines the Vector3 to normalize\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.NormalizeToRef = function (vector, result) {\n    vector.normalizeToRef(result);\n  };\n  /**\r\n   * Project a Vector3 onto screen space\r\n   * @param vector defines the Vector3 to project\r\n   * @param world defines the world matrix to use\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @param viewport defines the screen viewport to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Project = function (vector, world, transform, viewport) {\n    var result = new Vector3();\n    Vector3.ProjectToRef(vector, world, transform, viewport, result);\n    return result;\n  };\n  /**\r\n   * Project a Vector3 onto screen space to reference\r\n   * @param vector defines the Vector3 to project\r\n   * @param world defines the world matrix to use\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @param viewport defines the screen viewport to use\r\n   * @param result the vector in which the screen space will be stored\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.ProjectToRef = function (vector, world, transform, viewport, result) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = MathTmp.Matrix[1];\n    Matrix.FromValuesToRef(cw / 2.0, 0, 0, 0, 0, -ch / 2.0, 0, 0, 0, 0, 0.5, 0, cx + cw / 2.0, ch / 2.0 + cy, 0.5, 1, viewportMatrix);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.multiplyToRef(viewportMatrix, matrix);\n    Vector3.TransformCoordinatesToRef(vector, matrix, result);\n    return result;\n  };\n  /** @hidden */\n\n\n  Vector3._UnprojectFromInvertedMatrixToRef = function (source, matrix, result) {\n    Vector3.TransformCoordinatesToRef(source, matrix, result);\n    var m = matrix.m;\n    var num = source._x * m[3] + source._y * m[7] + source._z * m[11] + m[15];\n\n    if (Scalar.WithinEpsilon(num, 1.0)) {\n      result.scaleInPlace(1.0 / num);\n    }\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param transform defines the transform (view x projection) matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.UnprojectFromTransform = function (source, viewportWidth, viewportHeight, world, transform) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(transform, matrix);\n    matrix.invert();\n    source.x = source._x / viewportWidth * 2 - 1;\n    source.y = -(source._y / viewportHeight * 2 - 1);\n    var vector = new Vector3();\n\n    Vector3._UnprojectFromInvertedMatrixToRef(source, matrix, vector);\n\n    return vector;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Unproject = function (source, viewportWidth, viewportHeight, world, view, projection) {\n    var result = Vector3.Zero();\n    Vector3.UnprojectToRef(source, viewportWidth, viewportHeight, world, view, projection, result);\n    return result;\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param source defines the screen space Vector3 to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectToRef = function (source, viewportWidth, viewportHeight, world, view, projection, result) {\n    Vector3.UnprojectFloatsToRef(source._x, source._y, source._z, viewportWidth, viewportHeight, world, view, projection, result);\n  };\n  /**\r\n   * Unproject from screen space to object space\r\n   * @param sourceX defines the screen space x coordinate to use\r\n   * @param sourceY defines the screen space y coordinate to use\r\n   * @param sourceZ defines the screen space z coordinate to use\r\n   * @param viewportWidth defines the current width of the viewport\r\n   * @param viewportHeight defines the current height of the viewport\r\n   * @param world defines the world matrix to use (can be set to Identity to go to world space)\r\n   * @param view defines the view matrix to use\r\n   * @param projection defines the projection matrix to use\r\n   * @param result defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.UnprojectFloatsToRef = function (sourceX, sourceY, sourceZ, viewportWidth, viewportHeight, world, view, projection, result) {\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    matrix.invert();\n    var screenSource = MathTmp.Vector3[0];\n    screenSource.x = sourceX / viewportWidth * 2 - 1;\n    screenSource.y = -(sourceY / viewportHeight * 2 - 1);\n    screenSource.z = 2 * sourceZ - 1.0;\n\n    Vector3._UnprojectFromInvertedMatrixToRef(screenSource, matrix, result);\n  };\n  /**\r\n   * Gets the minimal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Gets the maximal coordinate values between two Vector3\r\n   * @param left defines the first operand\r\n   * @param right defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the distance\r\n   */\n\n\n  Vector3.Distance = function (value1, value2) {\n    return Math.sqrt(Vector3.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance between the vectors \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the squared distance\r\n   */\n\n\n  Vector3.DistanceSquared = function (value1, value2) {\n    var x = value1._x - value2._x;\n    var y = value1._y - value2._y;\n    var z = value1._z - value2._z;\n    return x * x + y * y + z * z;\n  };\n  /**\r\n   * Returns a new Vector3 located at the center between \"value1\" and \"value2\"\r\n   * @param value1 defines the first operand\r\n   * @param value2 defines the second operand\r\n   * @returns the new Vector3\r\n   */\n\n\n  Vector3.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Given three orthogonal normalized left-handed oriented Vector3 axis in space (target system),\r\n   * RotationFromAxis() returns the rotation Euler angles (ex : rotation.x, rotation.y, rotation.z) to apply\r\n   * to something in order to rotate it from its local system to the given target system\r\n   * Note: axis1, axis2 and axis3 are normalized during this operation\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns a new Vector3\r\n   */\n\n\n  Vector3.RotationFromAxis = function (axis1, axis2, axis3) {\n    var rotation = Vector3.Zero();\n    Vector3.RotationFromAxisToRef(axis1, axis2, axis3, rotation);\n    return rotation;\n  };\n  /**\r\n   * The same than RotationFromAxis but updates the given ref Vector3 parameter instead of returning a new Vector3\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the Vector3 where to store the result\r\n   */\n\n\n  Vector3.RotationFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var quat = MathTmp.Quaternion[0];\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    quat.toEulerAnglesToRef(ref);\n  };\n\n  Vector3._UpReadOnly = Vector3.Up();\n  Vector3._ZeroReadOnly = Vector3.Zero();\n  return Vector3;\n}();\n\nexport { Vector3 };\n/**\r\n * Vector4 class created for EulerAngle class conversion to Quaternion\r\n */\n\nvar Vector4 =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a Vector4 object from the given floats.\r\n   * @param x x value of the vector\r\n   * @param y y value of the vector\r\n   * @param z z value of the vector\r\n   * @param w w value of the vector\r\n   */\n  function Vector4(\n  /** x value of the vector */\n  x,\n  /** y value of the vector */\n  y,\n  /** z value of the vector */\n  z,\n  /** w value of the vector */\n  w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n  }\n  /**\r\n   * Returns the string with the Vector4 coordinates.\r\n   * @returns a string containing all the vector values\r\n   */\n\n\n  Vector4.prototype.toString = function () {\n    return \"{X: \" + this.x + \" Y:\" + this.y + \" Z:\" + this.z + \" W:\" + this.w + \"}\";\n  };\n  /**\r\n   * Returns the string \"Vector4\".\r\n   * @returns \"Vector4\"\r\n   */\n\n\n  Vector4.prototype.getClassName = function () {\n    return \"Vector4\";\n  };\n  /**\r\n   * Returns the Vector4 hash code.\r\n   * @returns a unique hash code\r\n   */\n\n\n  Vector4.prototype.getHashCode = function () {\n    var hash = this.x | 0;\n    hash = hash * 397 ^ (this.y | 0);\n    hash = hash * 397 ^ (this.z | 0);\n    hash = hash * 397 ^ (this.w | 0);\n    return hash;\n  }; // Operators\n\n  /**\r\n   * Returns a new array populated with 4 elements : the Vector4 coordinates.\r\n   * @returns the resulting array\r\n   */\n\n\n  Vector4.prototype.asArray = function () {\n    var result = new Array();\n    this.toArray(result, 0);\n    return result;\n  };\n  /**\r\n   * Populates the given array from the given index with the Vector4 coordinates.\r\n   * @param array array to populate\r\n   * @param index index of the array to start at (default: 0)\r\n   * @returns the Vector4.\r\n   */\n\n\n  Vector4.prototype.toArray = function (array, index) {\n    if (index === undefined) {\n      index = 0;\n    }\n\n    array[index] = this.x;\n    array[index + 1] = this.y;\n    array[index + 2] = this.z;\n    array[index + 3] = this.w;\n    return this;\n  };\n  /**\r\n   * Update the current vector from an array\r\n   * @param array defines the destination array\r\n   * @param index defines the offset in the destination array\r\n   * @returns the current Vector3\r\n   */\n\n\n  Vector4.prototype.fromArray = function (array, index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    Vector4.FromArrayToRef(array, index, this);\n    return this;\n  };\n  /**\r\n   * Adds the given vector to the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.addInPlace = function (otherVector) {\n    this.x += otherVector.x;\n    this.y += otherVector.y;\n    this.z += otherVector.z;\n    this.w += otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 as the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @returns the resulting vector\r\n   */\n\n\n  Vector4.prototype.add = function (otherVector) {\n    return new Vector4(this.x + otherVector.x, this.y + otherVector.y, this.z + otherVector.z, this.w + otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the result of the addition of the current Vector4 and the given one.\r\n   * @param otherVector the vector to add\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.addToRef = function (otherVector, result) {\n    result.x = this.x + otherVector.x;\n    result.y = this.y + otherVector.y;\n    result.z = this.z + otherVector.z;\n    result.w = this.w + otherVector.w;\n    return this;\n  };\n  /**\r\n   * Subtract in place the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractInPlace = function (otherVector) {\n    this.x -= otherVector.x;\n    this.y -= otherVector.y;\n    this.z -= otherVector.z;\n    this.w -= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to add\r\n   * @returns the new vector with the result\r\n   */\n\n\n  Vector4.prototype.subtract = function (otherVector) {\n    return new Vector4(this.x - otherVector.x, this.y - otherVector.y, this.z - otherVector.z, this.w - otherVector.w);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the subtraction of the given vector from the current Vector4.\r\n   * @param otherVector the vector to subtract\r\n   * @param result the vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractToRef = function (otherVector, result) {\n    result.x = this.x - otherVector.x;\n    result.y = this.y - otherVector.y;\n    result.z = this.z - otherVector.z;\n    result.w = this.w - otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   */\n\n  /**\r\n   * Returns a new Vector4 set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @returns new vector containing the result\r\n   */\n\n\n  Vector4.prototype.subtractFromFloats = function (x, y, z, w) {\n    return new Vector4(this.x - x, this.y - y, this.z - z, this.w - w);\n  };\n  /**\r\n   * Sets the given vector \"result\" set with the result of the subtraction of the given floats from the current Vector4 coordinates.\r\n   * @param x value to subtract\r\n   * @param y value to subtract\r\n   * @param z value to subtract\r\n   * @param w value to subtract\r\n   * @param result the vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.subtractFromFloatsToRef = function (x, y, z, w, result) {\n    result.x = this.x - x;\n    result.y = this.y - y;\n    result.z = this.z - z;\n    result.w = this.w - w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 negated coordinates.\r\n   * @returns a new vector with the negated values\r\n   */\n\n\n  Vector4.prototype.negate = function () {\n    return new Vector4(-this.x, -this.y, -this.z, -this.w);\n  };\n  /**\r\n   * Negate this vector in place\r\n   * @returns this\r\n   */\n\n\n  Vector4.prototype.negateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    this.w *= -1;\n    return this;\n  };\n  /**\r\n   * Negate the current Vector4 and stores the result in the given vector \"result\" coordinates\r\n   * @param result defines the Vector3 object where to store the result\r\n   * @returns the current Vector4\r\n   */\n\n\n  Vector4.prototype.negateToRef = function (result) {\n    return result.copyFromFloats(this.x * -1, this.y * -1, this.z * -1, this.w * -1);\n  };\n  /**\r\n   * Multiplies the current Vector4 coordinates by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleInPlace = function (scale) {\n    this.x *= scale;\n    this.y *= scale;\n    this.z *= scale;\n    this.w *= scale;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @returns a new vector with the result\r\n   */\n\n\n  Vector4.prototype.scale = function (scale) {\n    return new Vector4(this.x * scale, this.y * scale, this.z * scale, this.w * scale);\n  };\n  /**\r\n   * Sets the given vector \"result\" with the current Vector4 coordinates multiplied by scale (float).\r\n   * @param scale the number to scale with\r\n   * @param result a vector to store the result in\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.scaleToRef = function (scale, result) {\n    result.x = this.x * scale;\n    result.y = this.y * scale;\n    result.z = this.z * scale;\n    result.w = this.w * scale;\n    return this;\n  };\n  /**\r\n   * Scale the current Vector4 values by a factor and add the result to a given Vector4\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Vector4 object where to store the result\r\n   * @returns the unmodified current Vector4\r\n   */\n\n\n  Vector4.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this.x * scale;\n    result.y += this.y * scale;\n    result.z += this.z * scale;\n    result.w += this.w * scale;\n    return this;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are stricly equal to the given ones.\r\n   * @param otherVector the vector to compare against\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equals = function (otherVector) {\n    return otherVector && this.x === otherVector.x && this.y === otherVector.y && this.z === otherVector.z && this.w === otherVector.w;\n  };\n  /**\r\n   * Boolean : True if the current Vector4 coordinates are each beneath the distance \"epsilon\" from the given vector ones.\r\n   * @param otherVector vector to compare against\r\n   * @param epsilon (Default: very small number)\r\n   * @returns true if they are equal\r\n   */\n\n\n  Vector4.prototype.equalsWithEpsilon = function (otherVector, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherVector && Scalar.WithinEpsilon(this.x, otherVector.x, epsilon) && Scalar.WithinEpsilon(this.y, otherVector.y, epsilon) && Scalar.WithinEpsilon(this.z, otherVector.z, epsilon) && Scalar.WithinEpsilon(this.w, otherVector.w, epsilon);\n  };\n  /**\r\n   * Boolean : True if the given floats are strictly equal to the current Vector4 coordinates.\r\n   * @param x x value to compare against\r\n   * @param y y value to compare against\r\n   * @param z z value to compare against\r\n   * @param w w value to compare against\r\n   * @returns true if equal\r\n   */\n\n\n  Vector4.prototype.equalsToFloats = function (x, y, z, w) {\n    return this.x === x && this.y === y && this.z === z && this.w === w;\n  };\n  /**\r\n   * Multiplies in place the current Vector4 by the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyInPlace = function (otherVector) {\n    this.x *= otherVector.x;\n    this.y *= otherVector.y;\n    this.z *= otherVector.z;\n    this.w *= otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiply = function (otherVector) {\n    return new Vector4(this.x * otherVector.x, this.y * otherVector.y, this.z * otherVector.z, this.w * otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the multiplication result of the current Vector4 and the given one.\r\n   * @param otherVector vector to multiple with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.multiplyToRef = function (otherVector, result) {\n    result.x = this.x * otherVector.x;\n    result.y = this.y * otherVector.y;\n    result.z = this.z * otherVector.z;\n    result.w = this.w * otherVector.w;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector4 set with the multiplication result of the given floats and the current Vector4 coordinates.\r\n   * @param x x value multiply with\r\n   * @param y y value multiply with\r\n   * @param z z value multiply with\r\n   * @param w w value multiply with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.multiplyByFloats = function (x, y, z, w) {\n    return new Vector4(this.x * x, this.y * y, this.z * z, this.w * w);\n  };\n  /**\r\n   * Returns a new Vector4 set with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @returns resulting new vector\r\n   */\n\n\n  Vector4.prototype.divide = function (otherVector) {\n    return new Vector4(this.x / otherVector.x, this.y / otherVector.y, this.z / otherVector.z, this.w / otherVector.w);\n  };\n  /**\r\n   * Updates the given vector \"result\" with the division result of the current Vector4 by the given one.\r\n   * @param otherVector vector to devide with\r\n   * @param result vector to store the result\r\n   * @returns the current Vector4.\r\n   */\n\n\n  Vector4.prototype.divideToRef = function (otherVector, result) {\n    result.x = this.x / otherVector.x;\n    result.y = this.y / otherVector.y;\n    result.z = this.z / otherVector.z;\n    result.w = this.w / otherVector.w;\n    return this;\n  };\n  /**\r\n   * Divides the current Vector3 coordinates by the given ones.\r\n   * @param otherVector vector to devide with\r\n   * @returns the updated Vector3.\r\n   */\n\n\n  Vector4.prototype.divideInPlace = function (otherVector) {\n    return this.divideToRef(otherVector, this);\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the minimum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.minimizeInPlace = function (other) {\n    if (other.x < this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y < this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z < this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w < this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the Vector4 coordinates with the maximum values between its own and the given vector ones\r\n   * @param other defines the second operand\r\n   * @returns the current updated Vector4\r\n   */\n\n\n  Vector4.prototype.maximizeInPlace = function (other) {\n    if (other.x > this.x) {\n      this.x = other.x;\n    }\n\n    if (other.y > this.y) {\n      this.y = other.y;\n    }\n\n    if (other.z > this.z) {\n      this.z = other.z;\n    }\n\n    if (other.w > this.w) {\n      this.w = other.w;\n    }\n\n    return this;\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector4 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.floor = function () {\n    return new Vector4(Math.floor(this.x), Math.floor(this.y), Math.floor(this.z), Math.floor(this.w));\n  };\n  /**\r\n   * Gets a new Vector4 from current Vector3 floored values\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.prototype.fract = function () {\n    return new Vector4(this.x - Math.floor(this.x), this.y - Math.floor(this.y), this.z - Math.floor(this.z), this.w - Math.floor(this.w));\n  }; // Properties\n\n  /**\r\n   * Returns the Vector4 length (float).\r\n   * @returns the length\r\n   */\n\n\n  Vector4.prototype.length = function () {\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n  };\n  /**\r\n   * Returns the Vector4 squared length (float).\r\n   * @returns the length squared\r\n   */\n\n\n  Vector4.prototype.lengthSquared = function () {\n    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\n  }; // Methods\n\n  /**\r\n   * Normalizes in place the Vector4.\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    return this.scaleInPlace(1.0 / len);\n  };\n  /**\r\n   * Returns a new Vector3 from the Vector4 (x, y, z) coordinates.\r\n   * @returns this converted to a new vector3\r\n   */\n\n\n  Vector4.prototype.toVector3 = function () {\n    return new Vector3(this.x, this.y, this.z);\n  };\n  /**\r\n   * Returns a new Vector4 copied from the current one.\r\n   * @returns the new cloned vector\r\n   */\n\n\n  Vector4.prototype.clone = function () {\n    return new Vector4(this.x, this.y, this.z, this.w);\n  };\n  /**\r\n   * Updates the current Vector4 with the given one coordinates.\r\n   * @param source the source vector to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFrom = function (source) {\n    this.x = source.x;\n    this.y = source.y;\n    this.z = source.z;\n    this.w = source.w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to copy from\r\n   * @param y float to copy from\r\n   * @param z float to copy from\r\n   * @param w float to copy from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current Vector4 coordinates with the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @returns the updated Vector4.\r\n   */\n\n\n  Vector4.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Copies the given float to the current Vector3 coordinates\r\n   * @param v defines the x, y, z and w coordinates of the operand\r\n   * @returns the current updated Vector3\r\n   */\n\n\n  Vector4.prototype.setAll = function (v) {\n    this.x = this.y = this.z = this.w = v;\n    return this;\n  }; // Statics\n\n  /**\r\n   * Returns a new Vector4 set from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n    result.w = array[offset + 3];\n  };\n  /**\r\n   * Updates the given vector \"result\" from the starting index of the given Float32Array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.FromFloatArrayToRef = function (array, offset, result) {\n    Vector4.FromArrayToRef(array, offset, result);\n  };\n  /**\r\n   * Updates the given vector \"result\" coordinates from the given floats.\r\n   * @param x float to set from\r\n   * @param y float to set from\r\n   * @param z float to set from\r\n   * @param w float to set from\r\n   * @param result the vector to the floats in\r\n   */\n\n\n  Vector4.FromFloatsToRef = function (x, y, z, w, result) {\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = w;\n  };\n  /**\r\n   * Returns a new Vector4 set to (0.0, 0.0, 0.0, 0.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.Zero = function () {\n    return new Vector4(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Returns a new Vector4 set to (1.0, 1.0, 1.0, 1.0)\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.One = function () {\n    return new Vector4(1.0, 1.0, 1.0, 1.0);\n  };\n  /**\r\n   * Returns a new normalized Vector4 from the given one.\r\n   * @param vector the vector to normalize\r\n   * @returns the vector\r\n   */\n\n\n  Vector4.Normalize = function (vector) {\n    var result = Vector4.Zero();\n    Vector4.NormalizeToRef(vector, result);\n    return result;\n  };\n  /**\r\n   * Updates the given vector \"result\" from the normalization of the given one.\r\n   * @param vector the vector to normalize\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.NormalizeToRef = function (vector, result) {\n    result.copyFrom(vector);\n    result.normalize();\n  };\n  /**\r\n   * Returns a vector with the minimum values from the left and right vectors\r\n   * @param left left vector to minimize\r\n   * @param right right vector to minimize\r\n   * @returns a new vector with the minimum of the left and right vector values\r\n   */\n\n\n  Vector4.Minimize = function (left, right) {\n    var min = left.clone();\n    min.minimizeInPlace(right);\n    return min;\n  };\n  /**\r\n   * Returns a vector with the maximum values from the left and right vectors\r\n   * @param left left vector to maximize\r\n   * @param right right vector to maximize\r\n   * @returns a new vector with the maximum of the left and right vector values\r\n   */\n\n\n  Vector4.Maximize = function (left, right) {\n    var max = left.clone();\n    max.maximizeInPlace(right);\n    return max;\n  };\n  /**\r\n   * Returns the distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors\r\n   */\n\n\n  Vector4.Distance = function (value1, value2) {\n    return Math.sqrt(Vector4.DistanceSquared(value1, value2));\n  };\n  /**\r\n   * Returns the squared distance (float) between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the distance between\r\n   * @param value2 value to calulate the distance between\r\n   * @return the distance between the two vectors squared\r\n   */\n\n\n  Vector4.DistanceSquared = function (value1, value2) {\n    var x = value1.x - value2.x;\n    var y = value1.y - value2.y;\n    var z = value1.z - value2.z;\n    var w = value1.w - value2.w;\n    return x * x + y * y + z * z + w * w;\n  };\n  /**\r\n   * Returns a new Vector4 located at the center between the vectors \"value1\" and \"value2\".\r\n   * @param value1 value to calulate the center between\r\n   * @param value2 value to calulate the center between\r\n   * @return the center between the two vectors\r\n   */\n\n\n  Vector4.Center = function (value1, value2) {\n    var center = value1.add(value2);\n    center.scaleInPlace(0.5);\n    return center;\n  };\n  /**\r\n   * Returns a new Vector4 set with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @returns the new vector\r\n   */\n\n\n  Vector4.TransformNormal = function (vector, transformation) {\n    var result = Vector4.Zero();\n    Vector4.TransformNormalToRef(vector, transformation, result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given vector.\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param vector the vector to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the result in\r\n   */\n\n\n  Vector4.TransformNormalToRef = function (vector, transformation, result) {\n    var m = transformation.m;\n    var x = vector.x * m[0] + vector.y * m[4] + vector.z * m[8];\n    var y = vector.x * m[1] + vector.y * m[5] + vector.z * m[9];\n    var z = vector.x * m[2] + vector.y * m[6] + vector.z * m[10];\n    result.x = x;\n    result.y = y;\n    result.z = z;\n    result.w = vector.w;\n  };\n  /**\r\n   * Sets the given vector \"result\" with the result of the normal transformation by the given matrix of the given floats (x, y, z, w).\r\n   * This methods computes transformed normalized direction vectors only.\r\n   * @param x value to transform\r\n   * @param y value to transform\r\n   * @param z value to transform\r\n   * @param w value to transform\r\n   * @param transformation the transformation matrix to apply\r\n   * @param result the vector to store the results in\r\n   */\n\n\n  Vector4.TransformNormalFromFloatsToRef = function (x, y, z, w, transformation, result) {\n    var m = transformation.m;\n    result.x = x * m[0] + y * m[4] + z * m[8];\n    result.y = x * m[1] + y * m[5] + z * m[9];\n    result.z = x * m[2] + y * m[6] + z * m[10];\n    result.w = w;\n  };\n  /**\r\n   * Creates a new Vector4 from a Vector3\r\n   * @param source defines the source data\r\n   * @param w defines the 4th component (default is 0)\r\n   * @returns a new Vector4\r\n   */\n\n\n  Vector4.FromVector3 = function (source, w) {\n    if (w === void 0) {\n      w = 0;\n    }\n\n    return new Vector4(source._x, source._y, source._z, w);\n  };\n\n  return Vector4;\n}();\n\nexport { Vector4 };\n/**\r\n * Class used to store quaternion data\r\n * @see https://en.wikipedia.org/wiki/Quaternion\r\n * @see https://doc.babylonjs.com/features/position,_rotation,_scaling\r\n */\n\nvar Quaternion =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Quaternion from the given floats\r\n   * @param x defines the first component (0 by default)\r\n   * @param y defines the second component (0 by default)\r\n   * @param z defines the third component (0 by default)\r\n   * @param w defines the fourth component (1.0 by default)\r\n   */\n  function Quaternion(x, y, z, w) {\n    if (x === void 0) {\n      x = 0.0;\n    }\n\n    if (y === void 0) {\n      y = 0.0;\n    }\n\n    if (z === void 0) {\n      z = 0.0;\n    }\n\n    if (w === void 0) {\n      w = 1.0;\n    }\n    /** @hidden */\n\n\n    this._isDirty = true;\n    this._x = x;\n    this._y = y;\n    this._z = z;\n    this._w = w;\n  }\n\n  Object.defineProperty(Quaternion.prototype, \"x\", {\n    /** Gets or sets the x coordinate */\n    get: function get() {\n      return this._x;\n    },\n    set: function set(value) {\n      this._x = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"y\", {\n    /** Gets or sets the y coordinate */\n    get: function get() {\n      return this._y;\n    },\n    set: function set(value) {\n      this._y = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"z\", {\n    /** Gets or sets the z coordinate */\n    get: function get() {\n      return this._z;\n    },\n    set: function set(value) {\n      this._z = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Quaternion.prototype, \"w\", {\n    /** Gets or sets the w coordinate */\n    get: function get() {\n      return this._w;\n    },\n    set: function set(value) {\n      this._w = value;\n      this._isDirty = true;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Gets a string representation for the current quaternion\r\n   * @returns a string with the Quaternion coordinates\r\n   */\n\n  Quaternion.prototype.toString = function () {\n    return \"{X: \" + this._x + \" Y:\" + this._y + \" Z:\" + this._z + \" W:\" + this._w + \"}\";\n  };\n  /**\r\n   * Gets the class name of the quaternion\r\n   * @returns the string \"Quaternion\"\r\n   */\n\n\n  Quaternion.prototype.getClassName = function () {\n    return \"Quaternion\";\n  };\n  /**\r\n   * Gets a hash code for this quaternion\r\n   * @returns the quaternion hash code\r\n   */\n\n\n  Quaternion.prototype.getHashCode = function () {\n    var hash = this._x | 0;\n    hash = hash * 397 ^ (this._y | 0);\n    hash = hash * 397 ^ (this._z | 0);\n    hash = hash * 397 ^ (this._w | 0);\n    return hash;\n  };\n  /**\r\n   * Copy the quaternion to an array\r\n   * @returns a new array populated with 4 elements from the quaternion coordinates\r\n   */\n\n\n  Quaternion.prototype.asArray = function () {\n    return [this._x, this._y, this._z, this._w];\n  };\n  /**\r\n   * Check if two quaternions are equals\r\n   * @param otherQuaternion defines the second operand\r\n   * @return true if the current quaternion and the given one coordinates are strictly equals\r\n   */\n\n\n  Quaternion.prototype.equals = function (otherQuaternion) {\n    return otherQuaternion && this._x === otherQuaternion._x && this._y === otherQuaternion._y && this._z === otherQuaternion._z && this._w === otherQuaternion._w;\n  };\n  /**\r\n   * Gets a boolean if two quaternions are equals (using an epsilon value)\r\n   * @param otherQuaternion defines the other quaternion\r\n   * @param epsilon defines the minimal distance to consider equality\r\n   * @returns true if the given quaternion coordinates are close to the current ones by a distance of epsilon.\r\n   */\n\n\n  Quaternion.prototype.equalsWithEpsilon = function (otherQuaternion, epsilon) {\n    if (epsilon === void 0) {\n      epsilon = Epsilon;\n    }\n\n    return otherQuaternion && Scalar.WithinEpsilon(this._x, otherQuaternion._x, epsilon) && Scalar.WithinEpsilon(this._y, otherQuaternion._y, epsilon) && Scalar.WithinEpsilon(this._z, otherQuaternion._z, epsilon) && Scalar.WithinEpsilon(this._w, otherQuaternion._w, epsilon);\n  };\n  /**\r\n   * Clone the current quaternion\r\n   * @returns a new quaternion copied from the current one\r\n   */\n\n\n  Quaternion.prototype.clone = function () {\n    return new Quaternion(this._x, this._y, this._z, this._w);\n  };\n  /**\r\n   * Copy a quaternion to the current one\r\n   * @param other defines the other quaternion\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFrom = function (other) {\n    this.x = other._x;\n    this.y = other._y;\n    this.z = other._z;\n    this.w = other._w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.copyFromFloats = function (x, y, z, w) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n    this.w = w;\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given float coordinates\r\n   * @param x defines the x coordinate\r\n   * @param y defines the y coordinate\r\n   * @param z defines the z coordinate\r\n   * @param w defines the w coordinate\r\n   * @returns the updated current quaternion\r\n   */\n\n\n  Quaternion.prototype.set = function (x, y, z, w) {\n    return this.copyFromFloats(x, y, z, w);\n  };\n  /**\r\n   * Adds two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the addition result of the given one and the current quaternion\r\n   */\n\n\n  Quaternion.prototype.add = function (other) {\n    return new Quaternion(this._x + other._x, this._y + other._y, this._z + other._z, this._w + other._w);\n  };\n  /**\r\n   * Add a quaternion to the current one\r\n   * @param other defines the quaternion to add\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.addInPlace = function (other) {\n    this._x += other._x;\n    this._y += other._y;\n    this._z += other._z;\n    this._w += other._w;\n    return this;\n  };\n  /**\r\n   * Subtract two quaternions\r\n   * @param other defines the second operand\r\n   * @returns a new quaternion as the subtraction result of the given one from the current one\r\n   */\n\n\n  Quaternion.prototype.subtract = function (other) {\n    return new Quaternion(this._x - other._x, this._y - other._y, this._z - other._z, this._w - other._w);\n  };\n  /**\r\n   * Multiplies the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns a new quaternion set by multiplying the current quaternion coordinates by the float \"scale\"\r\n   */\n\n\n  Quaternion.prototype.scale = function (value) {\n    return new Quaternion(this._x * value, this._y * value, this._z * value, this._w * value);\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and stores the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleToRef = function (scale, result) {\n    result.x = this._x * scale;\n    result.y = this._y * scale;\n    result.z = this._z * scale;\n    result.w = this._w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies in place the current quaternion by a scale factor\r\n   * @param value defines the scale factor\r\n   * @returns the current modified quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleInPlace = function (value) {\n    this.x *= value;\n    this.y *= value;\n    this.z *= value;\n    this.w *= value;\n    return this;\n  };\n  /**\r\n   * Scale the current quaternion values by a factor and add the result to a given quaternion\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Quaternion object where to store the result\r\n   * @returns the unmodified current quaternion\r\n   */\n\n\n  Quaternion.prototype.scaleAndAddToRef = function (scale, result) {\n    result.x += this._x * scale;\n    result.y += this._y * scale;\n    result.z += this._z * scale;\n    result.w += this._w * scale;\n    return this;\n  };\n  /**\r\n   * Multiplies two quaternions\r\n   * @param q1 defines the second operand\r\n   * @returns a new quaternion set as the multiplication result of the current one with the given one \"q1\"\r\n   */\n\n\n  Quaternion.prototype.multiply = function (q1) {\n    var result = new Quaternion(0, 0, 0, 1.0);\n    this.multiplyToRef(q1, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" as the the multiplication result of the current one with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @param result defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyToRef = function (q1, result) {\n    var x = this._x * q1._w + this._y * q1._z - this._z * q1._y + this._w * q1._x;\n    var y = -this._x * q1._z + this._y * q1._w + this._z * q1._x + this._w * q1._y;\n    var z = this._x * q1._y - this._y * q1._x + this._z * q1._w + this._w * q1._z;\n    var w = -this._x * q1._x - this._y * q1._y - this._z * q1._z + this._w * q1._w;\n    result.copyFromFloats(x, y, z, w);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion with the multiplication of itself with the given one \"q1\"\r\n   * @param q1 defines the second operand\r\n   * @returns the currentupdated quaternion\r\n   */\n\n\n  Quaternion.prototype.multiplyInPlace = function (q1) {\n    this.multiplyToRef(q1, this);\n    return this;\n  };\n  /**\r\n   * Conjugates (1-q) the current quaternion and stores the result in the given quaternion\r\n   * @param ref defines the target quaternion\r\n   * @returns the current quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateToRef = function (ref) {\n    ref.copyFromFloats(-this._x, -this._y, -this._z, this._w);\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugateInPlace = function () {\n    this.x *= -1;\n    this.y *= -1;\n    this.z *= -1;\n    return this;\n  };\n  /**\r\n   * Conjugates in place (1-q) the current quaternion\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.prototype.conjugate = function () {\n    var result = new Quaternion(-this._x, -this._y, -this._z, this._w);\n    return result;\n  };\n  /**\r\n   * Gets length of current quaternion\r\n   * @returns the quaternion length (float)\r\n   */\n\n\n  Quaternion.prototype.length = function () {\n    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);\n  };\n  /**\r\n   * Normalize in place the current quaternion\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.normalize = function () {\n    var len = this.length();\n\n    if (len === 0) {\n      return this;\n    }\n\n    var inv = 1.0 / len;\n    this.x *= inv;\n    this.y *= inv;\n    this.z *= inv;\n    this.w *= inv;\n    return this;\n  };\n  /**\r\n   * Returns a new Vector3 set with the Euler angles translated from the current quaternion\r\n   * @param order is a reserved parameter and is ignored for now\r\n   * @returns a new Vector3 containing the Euler angles\r\n   */\n\n\n  Quaternion.prototype.toEulerAngles = function (order) {\n    if (order === void 0) {\n      order = \"YZX\";\n    }\n\n    var result = Vector3.Zero();\n    this.toEulerAnglesToRef(result);\n    return result;\n  };\n  /**\r\n   * Sets the given vector3 \"result\" with the Euler angles translated from the current quaternion\r\n   * @param result defines the vector which will be filled with the Euler angles\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toEulerAnglesToRef = function (result) {\n    var qz = this._z;\n    var qx = this._x;\n    var qy = this._y;\n    var qw = this._w;\n    var sqw = qw * qw;\n    var sqz = qz * qz;\n    var sqx = qx * qx;\n    var sqy = qy * qy;\n    var zAxisY = qy * qz - qx * qw;\n    var limit = .4999999;\n\n    if (zAxisY < -limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = Math.PI / 2;\n      result.z = 0;\n    } else if (zAxisY > limit) {\n      result.y = 2 * Math.atan2(qy, qw);\n      result.x = -Math.PI / 2;\n      result.z = 0;\n    } else {\n      result.z = Math.atan2(2.0 * (qx * qy + qz * qw), -sqz - sqx + sqy + sqw);\n      result.x = Math.asin(-2.0 * (qz * qy - qx * qw));\n      result.y = Math.atan2(2.0 * (qz * qx + qy * qw), sqz - sqx - sqy + sqw);\n    }\n\n    return this;\n  };\n  /**\r\n   * Updates the given rotation matrix with the current quaternion values\r\n   * @param result defines the target matrix\r\n   * @returns the current unchanged quaternion\r\n   */\n\n\n  Quaternion.prototype.toRotationMatrix = function (result) {\n    Matrix.FromQuaternionToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Updates the current quaternion from the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @returns the current updated quaternion\r\n   */\n\n\n  Quaternion.prototype.fromRotationMatrix = function (matrix) {\n    Quaternion.FromRotationMatrixToRef(matrix, this);\n    return this;\n  }; // Statics\n\n  /**\r\n   * Creates a new quaternion from a rotation matrix\r\n   * @param matrix defines the source matrix\r\n   * @returns a new quaternion created from the given rotation matrix values\r\n   */\n\n\n  Quaternion.FromRotationMatrix = function (matrix) {\n    var result = new Quaternion();\n    Quaternion.FromRotationMatrixToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Updates the given quaternion with the given rotation matrix values\r\n   * @param matrix defines the source matrix\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.FromRotationMatrixToRef = function (matrix, result) {\n    var data = matrix.m;\n    var m11 = data[0],\n        m12 = data[4],\n        m13 = data[8];\n    var m21 = data[1],\n        m22 = data[5],\n        m23 = data[9];\n    var m31 = data[2],\n        m32 = data[6],\n        m33 = data[10];\n    var trace = m11 + m22 + m33;\n    var s;\n\n    if (trace > 0) {\n      s = 0.5 / Math.sqrt(trace + 1.0);\n      result.w = 0.25 / s;\n      result.x = (m32 - m23) * s;\n      result.y = (m13 - m31) * s;\n      result.z = (m21 - m12) * s;\n    } else if (m11 > m22 && m11 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n      result.w = (m32 - m23) / s;\n      result.x = 0.25 * s;\n      result.y = (m12 + m21) / s;\n      result.z = (m13 + m31) / s;\n    } else if (m22 > m33) {\n      s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n      result.w = (m13 - m31) / s;\n      result.x = (m12 + m21) / s;\n      result.y = 0.25 * s;\n      result.z = (m23 + m32) / s;\n    } else {\n      s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n      result.w = (m21 - m12) / s;\n      result.x = (m13 + m31) / s;\n      result.y = (m23 + m32) / s;\n      result.z = 0.25 * s;\n    }\n  };\n  /**\r\n   * Returns the dot product (float) between the quaternions \"left\" and \"right\"\r\n   * @param left defines the left operand\r\n   * @param right defines the right operand\r\n   * @returns the dot product\r\n   */\n\n\n  Quaternion.Dot = function (left, right) {\n    return left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n  };\n  /**\r\n   * Checks if the two quaternions are close to each other\r\n   * @param quat0 defines the first quaternion to check\r\n   * @param quat1 defines the second quaternion to check\r\n   * @returns true if the two quaternions are close to each other\r\n   */\n\n\n  Quaternion.AreClose = function (quat0, quat1) {\n    var dot = Quaternion.Dot(quat0, quat1);\n    return dot >= 0;\n  };\n  /**\r\n   * Creates an empty quaternion\r\n   * @returns a new quaternion set to (0.0, 0.0, 0.0)\r\n   */\n\n\n  Quaternion.Zero = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 0.0);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @returns a new quaternion as the inverted current quaternion\r\n   */\n\n\n  Quaternion.Inverse = function (q) {\n    return new Quaternion(-q._x, -q._y, -q._z, q._w);\n  };\n  /**\r\n   * Inverse a given quaternion\r\n   * @param q defines the source quaternion\r\n   * @param result the quaternion the result will be stored in\r\n   * @returns the result quaternion\r\n   */\n\n\n  Quaternion.InverseToRef = function (q, result) {\n    result.set(-q._x, -q._y, -q._z, q._w);\n    return result;\n  };\n  /**\r\n   * Creates an identity quaternion\r\n   * @returns the identity quaternion\r\n   */\n\n\n  Quaternion.Identity = function () {\n    return new Quaternion(0.0, 0.0, 0.0, 1.0);\n  };\n  /**\r\n   * Gets a boolean indicating if the given quaternion is identity\r\n   * @param quaternion defines the quaternion to check\r\n   * @returns true if the quaternion is identity\r\n   */\n\n\n  Quaternion.IsIdentity = function (quaternion) {\n    return quaternion && quaternion._x === 0 && quaternion._y === 0 && quaternion._z === 0 && quaternion._w === 1;\n  };\n  /**\r\n   * Creates a quaternion from a rotation around an axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @returns a new quaternion created from the given axis (Vector3) and angle in radians (float)\r\n   */\n\n\n  Quaternion.RotationAxis = function (axis, angle) {\n    return Quaternion.RotationAxisToRef(axis, angle, new Quaternion());\n  };\n  /**\r\n   * Creates a rotation around an axis and stores it into the given quaternion\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle to use\r\n   * @param result defines the target quaternion\r\n   * @returns the target quaternion\r\n   */\n\n\n  Quaternion.RotationAxisToRef = function (axis, angle, result) {\n    var sin = Math.sin(angle / 2);\n    axis.normalize();\n    result.w = Math.cos(angle / 2);\n    result.x = axis._x * sin;\n    result.y = axis._y * sin;\n    result.z = axis._z * sin;\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from data stored into an array\r\n   * @param array defines the data source\r\n   * @param offset defines the offset in the source array where the data starts\r\n   * @returns a new quaternion\r\n   */\n\n\n  Quaternion.FromArray = function (array, offset) {\n    if (!offset) {\n      offset = 0;\n    }\n\n    return new Quaternion(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);\n  };\n  /**\r\n   * Updates the given quaternion \"result\" from the starting index of the given array.\r\n   * @param array the array to pull values from\r\n   * @param offset the offset into the array to start at\r\n   * @param result the quaternion to store the result in\r\n   */\n\n\n  Quaternion.FromArrayToRef = function (array, offset, result) {\n    result.x = array[offset];\n    result.y = array[offset + 1];\n    result.z = array[offset + 2];\n    result.w = array[offset + 3];\n  };\n  /**\r\n   * Create a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerAngles = function (x, y, z) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(y, x, z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation angles\r\n   * @param x Pitch\r\n   * @param y Yaw\r\n   * @param z Roll\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerAnglesToRef = function (x, y, z, result) {\n    Quaternion.RotationYawPitchRollToRef(y, x, z, result);\n    return result;\n  };\n  /**\r\n   * Create a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @returns the new Quaternion\r\n   */\n\n\n  Quaternion.FromEulerVector = function (vec) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, q);\n    return q;\n  };\n  /**\r\n   * Updates a quaternion from Euler rotation vector\r\n   * @param vec the Euler vector (x Pitch, y Yaw, z Roll)\r\n   * @param result the quaternion to store the result\r\n   * @returns the updated quaternion\r\n   */\n\n\n  Quaternion.FromEulerVectorToRef = function (vec, result) {\n    Quaternion.RotationYawPitchRollToRef(vec._y, vec._x, vec._z, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles (y, x, z)\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var q = new Quaternion();\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, q);\n    return q;\n  };\n  /**\r\n   * Creates a new rotation from the given Euler float angles (y, x, z) and stores it in the target quaternion\r\n   * @param yaw defines the rotation around Y axis\r\n   * @param pitch defines the rotation around X axis\r\n   * @param roll defines the rotation around Z axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    // Produces a quaternion from Euler angles in the z-y-x orientation (Tait-Bryan angles)\n    var halfRoll = roll * 0.5;\n    var halfPitch = pitch * 0.5;\n    var halfYaw = yaw * 0.5;\n    var sinRoll = Math.sin(halfRoll);\n    var cosRoll = Math.cos(halfRoll);\n    var sinPitch = Math.sin(halfPitch);\n    var cosPitch = Math.cos(halfPitch);\n    var sinYaw = Math.sin(halfYaw);\n    var cosYaw = Math.cos(halfYaw);\n    result.x = cosYaw * sinPitch * cosRoll + sinYaw * cosPitch * sinRoll;\n    result.y = sinYaw * cosPitch * cosRoll - cosYaw * sinPitch * sinRoll;\n    result.z = cosYaw * cosPitch * sinRoll - sinYaw * sinPitch * cosRoll;\n    result.w = cosYaw * cosPitch * cosRoll + sinYaw * sinPitch * sinRoll;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGamma = function (alpha, beta, gamma) {\n    var result = new Quaternion();\n    Quaternion.RotationAlphaBetaGammaToRef(alpha, beta, gamma, result);\n    return result;\n  };\n  /**\r\n   * Creates a new quaternion from the given Euler float angles expressed in z-x-z orientation and stores it in the target quaternion\r\n   * @param alpha defines the rotation around first axis\r\n   * @param beta defines the rotation around second axis\r\n   * @param gamma defines the rotation around third axis\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationAlphaBetaGammaToRef = function (alpha, beta, gamma, result) {\n    // Produces a quaternion from Euler angles in the z-x-z orientation\n    var halfGammaPlusAlpha = (gamma + alpha) * 0.5;\n    var halfGammaMinusAlpha = (gamma - alpha) * 0.5;\n    var halfBeta = beta * 0.5;\n    result.x = Math.cos(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.y = Math.sin(halfGammaMinusAlpha) * Math.sin(halfBeta);\n    result.z = Math.sin(halfGammaPlusAlpha) * Math.cos(halfBeta);\n    result.w = Math.cos(halfGammaPlusAlpha) * Math.cos(halfBeta);\n  };\n  /**\r\n   * Creates a new quaternion containing the rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation)\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @returns the new quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxis = function (axis1, axis2, axis3) {\n    var quat = new Quaternion(0.0, 0.0, 0.0, 0.0);\n    Quaternion.RotationQuaternionFromAxisToRef(axis1, axis2, axis3, quat);\n    return quat;\n  };\n  /**\r\n   * Creates a rotation value to reach the target (axis1, axis2, axis3) orientation as a rotated XYZ system (axis1, axis2 and axis3 are normalized during this operation) and stores it in the target quaternion\r\n   * @param axis1 defines the first axis\r\n   * @param axis2 defines the second axis\r\n   * @param axis3 defines the third axis\r\n   * @param ref defines the target quaternion\r\n   */\n\n\n  Quaternion.RotationQuaternionFromAxisToRef = function (axis1, axis2, axis3, ref) {\n    var rotMat = MathTmp.Matrix[0];\n    Matrix.FromXYZAxesToRef(axis1.normalize(), axis2.normalize(), axis3.normalize(), rotMat);\n    Quaternion.FromRotationMatrixToRef(rotMat, ref);\n  };\n  /**\r\n   * Interpolates between two quaternions\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Slerp = function (left, right, amount) {\n    var result = Quaternion.Identity();\n    Quaternion.SlerpToRef(left, right, amount, result);\n    return result;\n  };\n  /**\r\n   * Interpolates between two quaternions and stores it into a target quaternion\r\n   * @param left defines first quaternion\r\n   * @param right defines second quaternion\r\n   * @param amount defines the gradient to use\r\n   * @param result defines the target quaternion\r\n   */\n\n\n  Quaternion.SlerpToRef = function (left, right, amount, result) {\n    var num2;\n    var num3;\n    var num4 = left._x * right._x + left._y * right._y + left._z * right._z + left._w * right._w;\n    var flag = false;\n\n    if (num4 < 0) {\n      flag = true;\n      num4 = -num4;\n    }\n\n    if (num4 > 0.999999) {\n      num3 = 1 - amount;\n      num2 = flag ? -amount : amount;\n    } else {\n      var num5 = Math.acos(num4);\n      var num6 = 1.0 / Math.sin(num5);\n      num3 = Math.sin((1.0 - amount) * num5) * num6;\n      num2 = flag ? -Math.sin(amount * num5) * num6 : Math.sin(amount * num5) * num6;\n    }\n\n    result.x = num3 * left._x + num2 * right._x;\n    result.y = num3 * left._y + num2 * right._y;\n    result.z = num3 * left._z + num2 * right._z;\n    result.w = num3 * left._w + num2 * right._w;\n  };\n  /**\r\n   * Interpolate between two quaternions using Hermite interpolation\r\n   * @param value1 defines first quaternion\r\n   * @param tangent1 defines the incoming tangent\r\n   * @param value2 defines second quaternion\r\n   * @param tangent2 defines the outgoing tangent\r\n   * @param amount defines the target quaternion\r\n   * @returns the new interpolated quaternion\r\n   */\n\n\n  Quaternion.Hermite = function (value1, tangent1, value2, tangent2, amount) {\n    var squared = amount * amount;\n    var cubed = amount * squared;\n    var part1 = 2.0 * cubed - 3.0 * squared + 1.0;\n    var part2 = -2.0 * cubed + 3.0 * squared;\n    var part3 = cubed - 2.0 * squared + amount;\n    var part4 = cubed - squared;\n    var x = value1._x * part1 + value2._x * part2 + tangent1._x * part3 + tangent2._x * part4;\n    var y = value1._y * part1 + value2._y * part2 + tangent1._y * part3 + tangent2._y * part4;\n    var z = value1._z * part1 + value2._z * part2 + tangent1._z * part3 + tangent2._z * part4;\n    var w = value1._w * part1 + value2._w * part2 + tangent1._w * part3 + tangent2._w * part4;\n    return new Quaternion(x, y, z, w);\n  };\n\n  return Quaternion;\n}();\n\nexport { Quaternion };\n/**\r\n * Class used to store matrix data (4x4)\r\n */\n\nvar Matrix =\n/** @class */\nfunction () {\n  /**\r\n   * Creates an empty matrix (filled with zeros)\r\n   */\n  function Matrix() {\n    this._isIdentity = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2 = true;\n    this._isIdentity3x2Dirty = true;\n    /**\r\n     * Gets the update flag of the matrix which is an unique number for the matrix.\r\n     * It will be incremented every time the matrix data change.\r\n     * You can use it to speed the comparison between two versions of the same matrix.\r\n     */\n\n    this.updateFlag = -1;\n\n    if (PerformanceConfigurator.MatrixTrackPrecisionChange) {\n      PerformanceConfigurator.MatrixTrackedMatrices.push(this);\n    }\n\n    this._m = new PerformanceConfigurator.MatrixCurrentType(16);\n\n    this._updateIdentityStatus(false);\n  }\n\n  Object.defineProperty(Matrix, \"Use64Bits\", {\n    /**\r\n     * Gets the precision of matrix computations\r\n     */\n    get: function get() {\n      return PerformanceConfigurator.MatrixUse64Bits;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Matrix.prototype, \"m\", {\n    /**\r\n     * Gets the internal data of the matrix\r\n     */\n    get: function get() {\n      return this._m;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @hidden */\n\n  Matrix.prototype._markAsUpdated = function () {\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = false;\n    this._isIdentity3x2 = false;\n    this._isIdentityDirty = true;\n    this._isIdentity3x2Dirty = true;\n  };\n  /** @hidden */\n\n\n  Matrix.prototype._updateIdentityStatus = function (isIdentity, isIdentityDirty, isIdentity3x2, isIdentity3x2Dirty) {\n    if (isIdentityDirty === void 0) {\n      isIdentityDirty = false;\n    }\n\n    if (isIdentity3x2 === void 0) {\n      isIdentity3x2 = false;\n    }\n\n    if (isIdentity3x2Dirty === void 0) {\n      isIdentity3x2Dirty = true;\n    }\n\n    this.updateFlag = Matrix._updateFlagSeed++;\n    this._isIdentity = isIdentity;\n    this._isIdentity3x2 = isIdentity || isIdentity3x2;\n    this._isIdentityDirty = this._isIdentity ? false : isIdentityDirty;\n    this._isIdentity3x2Dirty = this._isIdentity3x2 ? false : isIdentity3x2Dirty;\n  }; // Properties\n\n  /**\r\n   * Check if the current matrix is identity\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentity = function () {\n    if (this._isIdentityDirty) {\n      this._isIdentityDirty = false;\n      var m = this._m;\n      this._isIdentity = m[0] === 1.0 && m[1] === 0.0 && m[2] === 0.0 && m[3] === 0.0 && m[4] === 0.0 && m[5] === 1.0 && m[6] === 0.0 && m[7] === 0.0 && m[8] === 0.0 && m[9] === 0.0 && m[10] === 1.0 && m[11] === 0.0 && m[12] === 0.0 && m[13] === 0.0 && m[14] === 0.0 && m[15] === 1.0;\n    }\n\n    return this._isIdentity;\n  };\n  /**\r\n   * Check if the current matrix is identity as a texture matrix (3x2 store in 4x4)\r\n   * @returns true is the matrix is the identity matrix\r\n   */\n\n\n  Matrix.prototype.isIdentityAs3x2 = function () {\n    if (this._isIdentity3x2Dirty) {\n      this._isIdentity3x2Dirty = false;\n\n      if (this._m[0] !== 1.0 || this._m[5] !== 1.0 || this._m[15] !== 1.0) {\n        this._isIdentity3x2 = false;\n      } else if (this._m[1] !== 0.0 || this._m[2] !== 0.0 || this._m[3] !== 0.0 || this._m[4] !== 0.0 || this._m[6] !== 0.0 || this._m[7] !== 0.0 || this._m[8] !== 0.0 || this._m[9] !== 0.0 || this._m[10] !== 0.0 || this._m[11] !== 0.0 || this._m[12] !== 0.0 || this._m[13] !== 0.0 || this._m[14] !== 0.0) {\n        this._isIdentity3x2 = false;\n      } else {\n        this._isIdentity3x2 = true;\n      }\n    }\n\n    return this._isIdentity3x2;\n  };\n  /**\r\n   * Gets the determinant of the matrix\r\n   * @returns the matrix determinant\r\n   */\n\n\n  Matrix.prototype.determinant = function () {\n    if (this._isIdentity === true) {\n      return 1;\n    }\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15]; // https://en.wikipedia.org/wiki/Laplace_expansion\n    // to compute the deterrminant of a 4x4 Matrix we compute the cofactors of any row or column,\n    // then we multiply each Cofactor by its corresponding matrix value and sum them all to get the determinant\n    // Cofactor(i, j) = sign(i,j) * det(Minor(i, j))\n    // where\n    //  - sign(i,j) = (i+j) % 2 === 0 ? 1 : -1\n    //  - Minor(i, j) is the 3x3 matrix we get by removing row i and column j from current Matrix\n    //\n    // Here we do that for the 1st row.\n\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    return m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n  }; // Methods\n\n  /**\r\n   * Returns the matrix as a Float32Array or Array<number>\r\n   * @returns the matrix underlying array\r\n   */\n\n\n  Matrix.prototype.toArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Returns the matrix as a Float32Array or Array<number>\r\n  * @returns the matrix underlying array.\r\n  */\n\n\n  Matrix.prototype.asArray = function () {\n    return this._m;\n  };\n  /**\r\n   * Inverts the current matrix in place\r\n   * @returns the current inverted matrix\r\n   */\n\n\n  Matrix.prototype.invert = function () {\n    this.invertToRef(this);\n    return this;\n  };\n  /**\r\n   * Sets all the matrix elements to zero\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.reset = function () {\n    Matrix.FromValuesToRef(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, this);\n\n    this._updateIdentityStatus(false);\n\n    return this;\n  };\n  /**\r\n   * Adds the current matrix with a second one\r\n   * @param other defines the matrix to add\r\n   * @returns a new matrix as the addition of the current matrix and the given one\r\n   */\n\n\n  Matrix.prototype.add = function (other) {\n    var result = new Matrix();\n    this.addToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Sets the given matrix \"result\" to the addition of the current matrix and the given one\r\n   * @param other defines the matrix to add\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.addToRef = function (other, result) {\n    var m = this._m;\n    var resultM = result._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = m[index] + otherM[index];\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds in place the given matrix to the current matrix\r\n   * @param other defines the second operand\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addToSelf = function (other) {\n    var m = this._m;\n    var otherM = other.m;\n\n    for (var index = 0; index < 16; index++) {\n      m[index] += otherM[index];\n    }\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the given matrix to the current inverted Matrix\r\n   * @param other defines the target matrix\r\n   * @returns the unmodified current matrix\r\n   */\n\n\n  Matrix.prototype.invertToRef = function (other) {\n    if (this._isIdentity === true) {\n      Matrix.IdentityToRef(other);\n      return this;\n    } // the inverse of a Matrix is the transpose of cofactor matrix divided by the determinant\n\n\n    var m = this._m;\n    var m00 = m[0],\n        m01 = m[1],\n        m02 = m[2],\n        m03 = m[3];\n    var m10 = m[4],\n        m11 = m[5],\n        m12 = m[6],\n        m13 = m[7];\n    var m20 = m[8],\n        m21 = m[9],\n        m22 = m[10],\n        m23 = m[11];\n    var m30 = m[12],\n        m31 = m[13],\n        m32 = m[14],\n        m33 = m[15];\n    var det_22_33 = m22 * m33 - m32 * m23;\n    var det_21_33 = m21 * m33 - m31 * m23;\n    var det_21_32 = m21 * m32 - m31 * m22;\n    var det_20_33 = m20 * m33 - m30 * m23;\n    var det_20_32 = m20 * m32 - m22 * m30;\n    var det_20_31 = m20 * m31 - m30 * m21;\n    var cofact_00 = +(m11 * det_22_33 - m12 * det_21_33 + m13 * det_21_32);\n    var cofact_01 = -(m10 * det_22_33 - m12 * det_20_33 + m13 * det_20_32);\n    var cofact_02 = +(m10 * det_21_33 - m11 * det_20_33 + m13 * det_20_31);\n    var cofact_03 = -(m10 * det_21_32 - m11 * det_20_32 + m12 * det_20_31);\n    var det = m00 * cofact_00 + m01 * cofact_01 + m02 * cofact_02 + m03 * cofact_03;\n\n    if (det === 0) {\n      // not invertible\n      other.copyFrom(this);\n      return this;\n    }\n\n    var detInv = 1 / det;\n    var det_12_33 = m12 * m33 - m32 * m13;\n    var det_11_33 = m11 * m33 - m31 * m13;\n    var det_11_32 = m11 * m32 - m31 * m12;\n    var det_10_33 = m10 * m33 - m30 * m13;\n    var det_10_32 = m10 * m32 - m30 * m12;\n    var det_10_31 = m10 * m31 - m30 * m11;\n    var det_12_23 = m12 * m23 - m22 * m13;\n    var det_11_23 = m11 * m23 - m21 * m13;\n    var det_11_22 = m11 * m22 - m21 * m12;\n    var det_10_23 = m10 * m23 - m20 * m13;\n    var det_10_22 = m10 * m22 - m20 * m12;\n    var det_10_21 = m10 * m21 - m20 * m11;\n    var cofact_10 = -(m01 * det_22_33 - m02 * det_21_33 + m03 * det_21_32);\n    var cofact_11 = +(m00 * det_22_33 - m02 * det_20_33 + m03 * det_20_32);\n    var cofact_12 = -(m00 * det_21_33 - m01 * det_20_33 + m03 * det_20_31);\n    var cofact_13 = +(m00 * det_21_32 - m01 * det_20_32 + m02 * det_20_31);\n    var cofact_20 = +(m01 * det_12_33 - m02 * det_11_33 + m03 * det_11_32);\n    var cofact_21 = -(m00 * det_12_33 - m02 * det_10_33 + m03 * det_10_32);\n    var cofact_22 = +(m00 * det_11_33 - m01 * det_10_33 + m03 * det_10_31);\n    var cofact_23 = -(m00 * det_11_32 - m01 * det_10_32 + m02 * det_10_31);\n    var cofact_30 = -(m01 * det_12_23 - m02 * det_11_23 + m03 * det_11_22);\n    var cofact_31 = +(m00 * det_12_23 - m02 * det_10_23 + m03 * det_10_22);\n    var cofact_32 = -(m00 * det_11_23 - m01 * det_10_23 + m03 * det_10_21);\n    var cofact_33 = +(m00 * det_11_22 - m01 * det_10_22 + m02 * det_10_21);\n    Matrix.FromValuesToRef(cofact_00 * detInv, cofact_10 * detInv, cofact_20 * detInv, cofact_30 * detInv, cofact_01 * detInv, cofact_11 * detInv, cofact_21 * detInv, cofact_31 * detInv, cofact_02 * detInv, cofact_12 * detInv, cofact_22 * detInv, cofact_32 * detInv, cofact_03 * detInv, cofact_13 * detInv, cofact_23 * detInv, cofact_33 * detInv, other);\n    return this;\n  };\n  /**\r\n   * add a value at the specified position in the current Matrix\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addAtIndex = function (index, value) {\n    this._m[index] += value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * mutiply the specified position in the current Matrix by a value\r\n   * @param index the index of the value within the matrix. between 0 and 15.\r\n   * @param value the value to be added\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.multiplyAtIndex = function (index, value) {\n    this._m[index] *= value;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslationFromFloats = function (x, y, z) {\n    this._m[12] = x;\n    this._m[13] = y;\n    this._m[14] = z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Adds the translation vector (using 3 floats) in the current matrix\r\n   * @param x defines the 1st component of the translation\r\n   * @param y defines the 2nd component of the translation\r\n   * @param z defines the 3rd component of the translation\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.addTranslationFromFloats = function (x, y, z) {\n    this._m[12] += x;\n    this._m[13] += y;\n    this._m[14] += z;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Inserts the translation vector in the current matrix\r\n   * @param vector3 defines the translation to insert\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.setTranslation = function (vector3) {\n    return this.setTranslationFromFloats(vector3._x, vector3._y, vector3._z);\n  };\n  /**\r\n   * Gets the translation value of the current matrix\r\n   * @returns a new Vector3 as the extracted translation from the matrix\r\n   */\n\n\n  Matrix.prototype.getTranslation = function () {\n    return new Vector3(this._m[12], this._m[13], this._m[14]);\n  };\n  /**\r\n   * Fill a Vector3 with the extracted translation from the matrix\r\n   * @param result defines the Vector3 where to store the translation\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getTranslationToRef = function (result) {\n    result.x = this._m[12];\n    result.y = this._m[13];\n    result.z = this._m[14];\n    return this;\n  };\n  /**\r\n   * Remove rotation and scaling part from the matrix\r\n   * @returns the updated matrix\r\n   */\n\n\n  Matrix.prototype.removeRotationAndScaling = function () {\n    var m = this.m;\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, m[12], m[13], m[14], m[15], this);\n\n    this._updateIdentityStatus(m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1);\n\n    return this;\n  };\n  /**\r\n   * Multiply two matrices\r\n   * @param other defines the second operand\r\n   * @returns a new matrix set with the multiplication result of the current Matrix and the given one\r\n   */\n\n\n  Matrix.prototype.multiply = function (other) {\n    var result = new Matrix();\n    this.multiplyToRef(other, result);\n    return result;\n  };\n  /**\r\n   * Copy the current matrix from the given one\r\n   * @param other defines the source matrix\r\n   * @returns the current updated matrix\r\n   */\n\n\n  Matrix.prototype.copyFrom = function (other) {\n    other.copyToArray(this._m);\n    var o = other;\n\n    this._updateIdentityStatus(o._isIdentity, o._isIdentityDirty, o._isIdentity3x2, o._isIdentity3x2Dirty);\n\n    return this;\n  };\n  /**\r\n   * Populates the given array from the starting index with the current matrix values\r\n   * @param array defines the target array\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.copyToArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var source = this._m;\n    array[offset] = source[0];\n    array[offset + 1] = source[1];\n    array[offset + 2] = source[2];\n    array[offset + 3] = source[3];\n    array[offset + 4] = source[4];\n    array[offset + 5] = source[5];\n    array[offset + 6] = source[6];\n    array[offset + 7] = source[7];\n    array[offset + 8] = source[8];\n    array[offset + 9] = source[9];\n    array[offset + 10] = source[10];\n    array[offset + 11] = source[11];\n    array[offset + 12] = source[12];\n    array[offset + 13] = source[13];\n    array[offset + 14] = source[14];\n    array[offset + 15] = source[15];\n    return this;\n  };\n  /**\r\n   * Sets the given matrix \"result\" with the multiplication result of the current Matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the matrix where to store the multiplication\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToRef = function (other, result) {\n    if (this._isIdentity) {\n      result.copyFrom(other);\n      return this;\n    }\n\n    if (other._isIdentity) {\n      result.copyFrom(this);\n      return this;\n    }\n\n    this.multiplyToArray(other, result._m, 0);\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Sets the Float32Array \"result\" from the given index \"offset\" with the multiplication of the current matrix and the given one\r\n   * @param other defines the second operand\r\n   * @param result defines the array where to store the multiplication\r\n   * @param offset defines the offset in the target array where to start storing values\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.multiplyToArray = function (other, result, offset) {\n    var m = this._m;\n    var otherM = other.m;\n    var tm0 = m[0],\n        tm1 = m[1],\n        tm2 = m[2],\n        tm3 = m[3];\n    var tm4 = m[4],\n        tm5 = m[5],\n        tm6 = m[6],\n        tm7 = m[7];\n    var tm8 = m[8],\n        tm9 = m[9],\n        tm10 = m[10],\n        tm11 = m[11];\n    var tm12 = m[12],\n        tm13 = m[13],\n        tm14 = m[14],\n        tm15 = m[15];\n    var om0 = otherM[0],\n        om1 = otherM[1],\n        om2 = otherM[2],\n        om3 = otherM[3];\n    var om4 = otherM[4],\n        om5 = otherM[5],\n        om6 = otherM[6],\n        om7 = otherM[7];\n    var om8 = otherM[8],\n        om9 = otherM[9],\n        om10 = otherM[10],\n        om11 = otherM[11];\n    var om12 = otherM[12],\n        om13 = otherM[13],\n        om14 = otherM[14],\n        om15 = otherM[15];\n    result[offset] = tm0 * om0 + tm1 * om4 + tm2 * om8 + tm3 * om12;\n    result[offset + 1] = tm0 * om1 + tm1 * om5 + tm2 * om9 + tm3 * om13;\n    result[offset + 2] = tm0 * om2 + tm1 * om6 + tm2 * om10 + tm3 * om14;\n    result[offset + 3] = tm0 * om3 + tm1 * om7 + tm2 * om11 + tm3 * om15;\n    result[offset + 4] = tm4 * om0 + tm5 * om4 + tm6 * om8 + tm7 * om12;\n    result[offset + 5] = tm4 * om1 + tm5 * om5 + tm6 * om9 + tm7 * om13;\n    result[offset + 6] = tm4 * om2 + tm5 * om6 + tm6 * om10 + tm7 * om14;\n    result[offset + 7] = tm4 * om3 + tm5 * om7 + tm6 * om11 + tm7 * om15;\n    result[offset + 8] = tm8 * om0 + tm9 * om4 + tm10 * om8 + tm11 * om12;\n    result[offset + 9] = tm8 * om1 + tm9 * om5 + tm10 * om9 + tm11 * om13;\n    result[offset + 10] = tm8 * om2 + tm9 * om6 + tm10 * om10 + tm11 * om14;\n    result[offset + 11] = tm8 * om3 + tm9 * om7 + tm10 * om11 + tm11 * om15;\n    result[offset + 12] = tm12 * om0 + tm13 * om4 + tm14 * om8 + tm15 * om12;\n    result[offset + 13] = tm12 * om1 + tm13 * om5 + tm14 * om9 + tm15 * om13;\n    result[offset + 14] = tm12 * om2 + tm13 * om6 + tm14 * om10 + tm15 * om14;\n    result[offset + 15] = tm12 * om3 + tm13 * om7 + tm14 * om11 + tm15 * om15;\n    return this;\n  };\n  /**\r\n   * Check equality between this matrix and a second one\r\n   * @param value defines the second matrix to compare\r\n   * @returns true is the current matrix and the given one values are strictly equal\r\n   */\n\n\n  Matrix.prototype.equals = function (value) {\n    var other = value;\n\n    if (!other) {\n      return false;\n    }\n\n    if (this._isIdentity || other._isIdentity) {\n      if (!this._isIdentityDirty && !other._isIdentityDirty) {\n        return this._isIdentity && other._isIdentity;\n      }\n    }\n\n    var m = this.m;\n    var om = other.m;\n    return m[0] === om[0] && m[1] === om[1] && m[2] === om[2] && m[3] === om[3] && m[4] === om[4] && m[5] === om[5] && m[6] === om[6] && m[7] === om[7] && m[8] === om[8] && m[9] === om[9] && m[10] === om[10] && m[11] === om[11] && m[12] === om[12] && m[13] === om[13] && m[14] === om[14] && m[15] === om[15];\n  };\n  /**\r\n   * Clone the current matrix\r\n   * @returns a new matrix from the current matrix\r\n   */\n\n\n  Matrix.prototype.clone = function () {\n    var matrix = new Matrix();\n    matrix.copyFrom(this);\n    return matrix;\n  };\n  /**\r\n   * Returns the name of the current matrix class\r\n   * @returns the string \"Matrix\"\r\n   */\n\n\n  Matrix.prototype.getClassName = function () {\n    return \"Matrix\";\n  };\n  /**\r\n   * Gets the hash code of the current matrix\r\n   * @returns the hash code\r\n   */\n\n\n  Matrix.prototype.getHashCode = function () {\n    var hash = this._m[0] | 0;\n\n    for (var i = 1; i < 16; i++) {\n      hash = hash * 397 ^ (this._m[i] | 0);\n    }\n\n    return hash;\n  };\n  /**\r\n   * Decomposes the current Matrix into a translation, rotation and scaling components\r\n   * @param scale defines the scale vector3 given as a reference to update\r\n   * @param rotation defines the rotation quaternion given as a reference to update\r\n   * @param translation defines the translation vector3 given as a reference to update\r\n   * @returns true if operation was successful\r\n   */\n\n\n  Matrix.prototype.decompose = function (scale, rotation, translation) {\n    if (this._isIdentity) {\n      if (translation) {\n        translation.setAll(0);\n      }\n\n      if (scale) {\n        scale.setAll(1);\n      }\n\n      if (rotation) {\n        rotation.copyFromFloats(0, 0, 0, 1);\n      }\n\n      return true;\n    }\n\n    var m = this._m;\n\n    if (translation) {\n      translation.copyFromFloats(m[12], m[13], m[14]);\n    }\n\n    scale = scale || MathTmp.Vector3[0];\n    scale.x = Math.sqrt(m[0] * m[0] + m[1] * m[1] + m[2] * m[2]);\n    scale.y = Math.sqrt(m[4] * m[4] + m[5] * m[5] + m[6] * m[6]);\n    scale.z = Math.sqrt(m[8] * m[8] + m[9] * m[9] + m[10] * m[10]);\n\n    if (this.determinant() <= 0) {\n      scale.y *= -1;\n    }\n\n    if (scale._x === 0 || scale._y === 0 || scale._z === 0) {\n      if (rotation) {\n        rotation.copyFromFloats(0.0, 0.0, 0.0, 1.0);\n      }\n\n      return false;\n    }\n\n    if (rotation) {\n      var sx = 1 / scale._x,\n          sy = 1 / scale._y,\n          sz = 1 / scale._z;\n      Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, MathTmp.Matrix[0]);\n      Quaternion.FromRotationMatrixToRef(MathTmp.Matrix[0], rotation);\n    }\n\n    return true;\n  };\n  /**\r\n   * Gets specific row of the matrix\r\n   * @param index defines the number of the row to get\r\n   * @returns the index-th row of the current matrix as a new Vector4\r\n   */\n\n\n  Matrix.prototype.getRow = function (index) {\n    if (index < 0 || index > 3) {\n      return null;\n    }\n\n    var i = index * 4;\n    return new Vector4(this._m[i + 0], this._m[i + 1], this._m[i + 2], this._m[i + 3]);\n  };\n  /**\r\n   * Sets the index-th row of the current matrix to the vector4 values\r\n   * @param index defines the number of the row to set\r\n   * @param row defines the target vector4\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRow = function (index, row) {\n    return this.setRowFromFloats(index, row.x, row.y, row.z, row.w);\n  };\n  /**\r\n   * Compute the transpose of the matrix\r\n   * @returns the new transposed matrix\r\n   */\n\n\n  Matrix.prototype.transpose = function () {\n    return Matrix.Transpose(this);\n  };\n  /**\r\n   * Compute the transpose of the matrix and store it in a given matrix\r\n   * @param result defines the target matrix\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.transposeToRef = function (result) {\n    Matrix.TransposeToRef(this, result);\n    return this;\n  };\n  /**\r\n   * Sets the index-th row of the current matrix with the given 4 x float values\r\n   * @param index defines the row index\r\n   * @param x defines the x component to set\r\n   * @param y defines the y component to set\r\n   * @param z defines the z component to set\r\n   * @param w defines the w component to set\r\n   * @returns the updated current matrix\r\n   */\n\n\n  Matrix.prototype.setRowFromFloats = function (index, x, y, z, w) {\n    if (index < 0 || index > 3) {\n      return this;\n    }\n\n    var i = index * 4;\n    this._m[i + 0] = x;\n    this._m[i + 1] = y;\n    this._m[i + 2] = z;\n    this._m[i + 3] = w;\n\n    this._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Compute a new matrix set with the current matrix values multiplied by scale (float)\r\n   * @param scale defines the scale factor\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.prototype.scale = function (scale) {\n    var result = new Matrix();\n    this.scaleToRef(scale, result);\n    return result;\n  };\n  /**\r\n   * Scale the current matrix values by a factor to a given result matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Scale the current matrix values by a factor and add the result to a given matrix\r\n   * @param scale defines the scale factor\r\n   * @param result defines the Matrix to store the result\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.scaleAndAddToRef = function (scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] += this._m[index] * scale;\n    }\n\n    result._markAsUpdated();\n\n    return this;\n  };\n  /**\r\n   * Writes to the given matrix a normal matrix, computed from this one (using values from identity matrix for fourth row and column).\r\n   * @param ref matrix to store the result\r\n   */\n\n\n  Matrix.prototype.toNormalMatrix = function (ref) {\n    var tmp = MathTmp.Matrix[0];\n    this.invertToRef(tmp);\n    tmp.transposeToRef(ref);\n    var m = ref._m;\n    Matrix.FromValuesToRef(m[0], m[1], m[2], 0.0, m[4], m[5], m[6], 0.0, m[8], m[9], m[10], 0.0, 0.0, 0.0, 0.0, 1.0, ref);\n  };\n  /**\r\n   * Gets only rotation part of the current matrix\r\n   * @returns a new matrix sets to the extracted rotation matrix from the current one\r\n   */\n\n\n  Matrix.prototype.getRotationMatrix = function () {\n    var result = new Matrix();\n    this.getRotationMatrixToRef(result);\n    return result;\n  };\n  /**\r\n   * Extracts the rotation matrix from the current one and sets it as the given \"result\"\r\n   * @param result defines the target matrix to store data to\r\n   * @returns the current matrix\r\n   */\n\n\n  Matrix.prototype.getRotationMatrixToRef = function (result) {\n    var scale = MathTmp.Vector3[0];\n\n    if (!this.decompose(scale)) {\n      Matrix.IdentityToRef(result);\n      return this;\n    }\n\n    var m = this._m;\n    var sx = 1 / scale._x,\n        sy = 1 / scale._y,\n        sz = 1 / scale._z;\n    Matrix.FromValuesToRef(m[0] * sx, m[1] * sx, m[2] * sx, 0.0, m[4] * sy, m[5] * sy, m[6] * sy, 0.0, m[8] * sz, m[9] * sz, m[10] * sz, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n    return this;\n  };\n  /**\r\n   * Toggles model matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleModelMatrixHandInPlace = function () {\n    var m = this._m;\n    m[2] *= -1;\n    m[6] *= -1;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[14] *= -1;\n\n    this._markAsUpdated();\n  };\n  /**\r\n   * Toggles projection matrix from being right handed to left handed in place and vice versa\r\n   */\n\n\n  Matrix.prototype.toggleProjectionMatrixHandInPlace = function () {\n    var m = this._m;\n    m[8] *= -1;\n    m[9] *= -1;\n    m[10] *= -1;\n    m[11] *= -1;\n\n    this._markAsUpdated();\n  }; // Statics\n\n  /**\r\n   * Creates a matrix from an array\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @returns a new Matrix set from the starting index of the given array\r\n   */\n\n\n  Matrix.FromArray = function (array, offset) {\n    if (offset === void 0) {\n      offset = 0;\n    }\n\n    var result = new Matrix();\n    Matrix.FromArrayToRef(array, offset, result);\n    return result;\n  };\n  /**\r\n   * Copy the content of an array into a given matrix\r\n   * @param array defines the source array\r\n   * @param offset defines an offset in the source array\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromArrayToRef = function (array, offset, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset];\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Stores an array into a matrix after having multiplied each component by a given factor\r\n   * @param array defines the source array\r\n   * @param offset defines the offset in the source array\r\n   * @param scale defines the scaling factor\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromFloat32ArrayToRefScaled = function (array, offset, scale, result) {\n    for (var index = 0; index < 16; index++) {\n      result._m[index] = array[index + offset] * scale;\n    }\n\n    result._markAsUpdated();\n  };\n\n  Object.defineProperty(Matrix, \"IdentityReadOnly\", {\n    /**\r\n     * Gets an identity matrix that must not be updated\r\n     */\n    get: function get() {\n      return Matrix._identityReadOnly;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Stores a list of values (16) inside a given matrix\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @param result defines the target matrix\r\n   */\n\n  Matrix.FromValuesToRef = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44, result) {\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates new matrix from a list of values (16)\r\n   * @param initialM11 defines 1st value of 1st row\r\n   * @param initialM12 defines 2nd value of 1st row\r\n   * @param initialM13 defines 3rd value of 1st row\r\n   * @param initialM14 defines 4th value of 1st row\r\n   * @param initialM21 defines 1st value of 2nd row\r\n   * @param initialM22 defines 2nd value of 2nd row\r\n   * @param initialM23 defines 3rd value of 2nd row\r\n   * @param initialM24 defines 4th value of 2nd row\r\n   * @param initialM31 defines 1st value of 3rd row\r\n   * @param initialM32 defines 2nd value of 3rd row\r\n   * @param initialM33 defines 3rd value of 3rd row\r\n   * @param initialM34 defines 4th value of 3rd row\r\n   * @param initialM41 defines 1st value of 4th row\r\n   * @param initialM42 defines 2nd value of 4th row\r\n   * @param initialM43 defines 3rd value of 4th row\r\n   * @param initialM44 defines 4th value of 4th row\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.FromValues = function (initialM11, initialM12, initialM13, initialM14, initialM21, initialM22, initialM23, initialM24, initialM31, initialM32, initialM33, initialM34, initialM41, initialM42, initialM43, initialM44) {\n    var result = new Matrix();\n    var m = result._m;\n    m[0] = initialM11;\n    m[1] = initialM12;\n    m[2] = initialM13;\n    m[3] = initialM14;\n    m[4] = initialM21;\n    m[5] = initialM22;\n    m[6] = initialM23;\n    m[7] = initialM24;\n    m[8] = initialM31;\n    m[9] = initialM32;\n    m[10] = initialM33;\n    m[11] = initialM34;\n    m[12] = initialM41;\n    m[13] = initialM42;\n    m[14] = initialM43;\n    m[15] = initialM44;\n\n    result._markAsUpdated();\n\n    return result;\n  };\n  /**\r\n   * Creates a new matrix composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Compose = function (scale, rotation, translation) {\n    var result = new Matrix();\n    Matrix.ComposeToRef(scale, rotation, translation, result);\n    return result;\n  };\n  /**\r\n   * Sets a matrix to a value composed by merging scale (vector3), rotation (quaternion) and translation (vector3)\r\n   * @param scale defines the scale vector3\r\n   * @param rotation defines the rotation quaternion\r\n   * @param translation defines the translation vector3\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ComposeToRef = function (scale, rotation, translation, result) {\n    var m = result._m;\n    var x = rotation._x,\n        y = rotation._y,\n        z = rotation._z,\n        w = rotation._w;\n    var x2 = x + x,\n        y2 = y + y,\n        z2 = z + z;\n    var xx = x * x2,\n        xy = x * y2,\n        xz = x * z2;\n    var yy = y * y2,\n        yz = y * z2,\n        zz = z * z2;\n    var wx = w * x2,\n        wy = w * y2,\n        wz = w * z2;\n    var sx = scale._x,\n        sy = scale._y,\n        sz = scale._z;\n    m[0] = (1 - (yy + zz)) * sx;\n    m[1] = (xy + wz) * sx;\n    m[2] = (xz - wy) * sx;\n    m[3] = 0;\n    m[4] = (xy - wz) * sy;\n    m[5] = (1 - (xx + zz)) * sy;\n    m[6] = (yz + wx) * sy;\n    m[7] = 0;\n    m[8] = (xz + wy) * sz;\n    m[9] = (yz - wx) * sz;\n    m[10] = (1 - (xx + yy)) * sz;\n    m[11] = 0;\n    m[12] = translation._x;\n    m[13] = translation._y;\n    m[14] = translation._z;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a new identity matrix\r\n   * @returns a new identity matrix\r\n   */\n\n\n  Matrix.Identity = function () {\n    var identity = Matrix.FromValues(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0);\n\n    identity._updateIdentityStatus(true);\n\n    return identity;\n  };\n  /**\r\n   * Creates a new identity matrix and stores the result in a given matrix\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.IdentityToRef = function (result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(true);\n  };\n  /**\r\n   * Creates a new zero matrix\r\n   * @returns a new zero matrix\r\n   */\n\n\n  Matrix.Zero = function () {\n    var zero = Matrix.FromValues(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);\n\n    zero._updateIdentityStatus(false);\n\n    return zero;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationX = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationXToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new matrix as the invert of a given matrix\r\n   * @param source defines the source matrix\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Invert = function (source) {\n    var result = new Matrix();\n    source.invertToRef(result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the X axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationXToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationY = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationYToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Y axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, 0.0, -s, 0.0, 0.0, 1.0, 0.0, 0.0, s, 0.0, c, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationZ = function (angle) {\n    var result = new Matrix();\n    Matrix.RotationZToRef(angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the Z axis and stores it in a given matrix\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationZToRef = function (angle, result) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    Matrix.FromValuesToRef(c, s, 0.0, 0.0, -s, c, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(c === 1 && s === 0);\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @return the new matrix\r\n   */\n\n\n  Matrix.RotationAxis = function (axis, angle) {\n    var result = new Matrix();\n    Matrix.RotationAxisToRef(axis, angle, result);\n    return result;\n  };\n  /**\r\n   * Creates a new rotation matrix for \"angle\" radians around the given axis and stores it in a given matrix\r\n   * @param axis defines the axis to use\r\n   * @param angle defines the angle (in radians) to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAxisToRef = function (axis, angle, result) {\n    var s = Math.sin(-angle);\n    var c = Math.cos(-angle);\n    var c1 = 1 - c;\n    axis.normalize();\n    var m = result._m;\n    m[0] = axis._x * axis._x * c1 + c;\n    m[1] = axis._x * axis._y * c1 - axis._z * s;\n    m[2] = axis._x * axis._z * c1 + axis._y * s;\n    m[3] = 0.0;\n    m[4] = axis._y * axis._x * c1 + axis._z * s;\n    m[5] = axis._y * axis._y * c1 + c;\n    m[6] = axis._y * axis._z * c1 - axis._x * s;\n    m[7] = 0.0;\n    m[8] = axis._z * axis._x * c1 - axis._y * s;\n    m[9] = axis._z * axis._y * c1 + axis._x * s;\n    m[10] = axis._z * axis._z * c1 + c;\n    m[11] = 0.0;\n    m[12] = 0.0;\n    m[13] = 0.0;\n    m[14] = 0.0;\n    m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Takes normalised vectors and returns a rotation matrix to align \"from\" with \"to\".\r\n   * Taken from http://www.iquilezles.org/www/articles/noacos/noacos.htm\r\n   * @param from defines the vector to align\r\n   * @param to defines the vector to align to\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationAlignToRef = function (from, to, result) {\n    var v = Vector3.Cross(to, from);\n    var c = Vector3.Dot(to, from);\n    var k = 1 / (1 + c);\n    var m = result._m;\n    m[0] = v._x * v._x * k + c;\n    m[1] = v._y * v._x * k - v._z;\n    m[2] = v._z * v._x * k + v._y;\n    m[3] = 0;\n    m[4] = v._x * v._y * k + v._z;\n    m[5] = v._y * v._y * k + c;\n    m[6] = v._z * v._y * k - v._x;\n    m[7] = 0;\n    m[8] = v._x * v._z * k - v._y;\n    m[9] = v._y * v._z * k + v._x;\n    m[10] = v._z * v._z * k + c;\n    m[11] = 0;\n    m[12] = 0;\n    m[13] = 0;\n    m[14] = 0;\n    m[15] = 1;\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a rotation matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (Z axis)\r\n   * @returns the new rotation matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRoll = function (yaw, pitch, roll) {\n    var result = new Matrix();\n    Matrix.RotationYawPitchRollToRef(yaw, pitch, roll, result);\n    return result;\n  };\n  /**\r\n   * Creates a rotation matrix and stores it in a given matrix\r\n   * @param yaw defines the yaw angle in radians (Y axis)\r\n   * @param pitch defines the pitch angle in radians (X axis)\r\n   * @param roll defines the roll angle in radians (Z axis)\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.RotationYawPitchRollToRef = function (yaw, pitch, roll, result) {\n    Quaternion.RotationYawPitchRollToRef(yaw, pitch, roll, MathTmp.Quaternion[0]);\n    MathTmp.Quaternion[0].toRotationMatrix(result);\n  };\n  /**\r\n   * Creates a scaling matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Scaling = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.ScalingToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a scaling matrix and stores it in a given matrix\r\n   * @param x defines the scale factor on X axis\r\n   * @param y defines the scale factor on Y axis\r\n   * @param z defines the scale factor on Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ScalingToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(x, 0.0, 0.0, 0.0, 0.0, y, 0.0, 0.0, 0.0, 0.0, z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n\n    result._updateIdentityStatus(x === 1 && y === 1 && z === 1);\n  };\n  /**\r\n   * Creates a translation matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Translation = function (x, y, z) {\n    var result = new Matrix();\n    Matrix.TranslationToRef(x, y, z, result);\n    return result;\n  };\n  /**\r\n   * Creates a translation matrix and stores it in a given matrix\r\n   * @param x defines the translation on X axis\r\n   * @param y defines the translation on Y axis\r\n   * @param z defines the translationon Z axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TranslationToRef = function (x, y, z, result) {\n    Matrix.FromValuesToRef(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, x, y, z, 1.0, result);\n\n    result._updateIdentityStatus(x === 0 && y === 0 && z === 0);\n  };\n  /**\r\n   * Returns a new Matrix whose values are the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Lerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.LerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Set the given matrix \"result\" as the interpolated values for \"gradient\" (float) between the ones of the matrices \"startValue\" and \"endValue\".\r\n   * @param startValue defines the start value\r\n   * @param endValue defines the end value\r\n   * @param gradient defines the gradient factor\r\n   * @param result defines the Matrix object where to store data\r\n   */\n\n\n  Matrix.LerpToRef = function (startValue, endValue, gradient, result) {\n    var resultM = result._m;\n    var startM = startValue.m;\n    var endM = endValue.m;\n\n    for (var index = 0; index < 16; index++) {\n      resultM[index] = startM[index] * (1.0 - gradient) + endM[index] * gradient;\n    }\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Builds a new matrix whose values are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.DecomposeLerp = function (startValue, endValue, gradient) {\n    var result = new Matrix();\n    Matrix.DecomposeLerpToRef(startValue, endValue, gradient, result);\n    return result;\n  };\n  /**\r\n   * Update a matrix to values which are computed by:\r\n   * * decomposing the the \"startValue\" and \"endValue\" matrices into their respective scale, rotation and translation matrices\r\n   * * interpolating for \"gradient\" (float) the values between each of these decomposed matrices between the start and the end\r\n   * * recomposing a new matrix from these 3 interpolated scale, rotation and translation matrices\r\n   * @param startValue defines the first matrix\r\n   * @param endValue defines the second matrix\r\n   * @param gradient defines the gradient between the two matrices\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.DecomposeLerpToRef = function (startValue, endValue, gradient, result) {\n    var startScale = MathTmp.Vector3[0];\n    var startRotation = MathTmp.Quaternion[0];\n    var startTranslation = MathTmp.Vector3[1];\n    startValue.decompose(startScale, startRotation, startTranslation);\n    var endScale = MathTmp.Vector3[2];\n    var endRotation = MathTmp.Quaternion[1];\n    var endTranslation = MathTmp.Vector3[3];\n    endValue.decompose(endScale, endRotation, endTranslation);\n    var resultScale = MathTmp.Vector3[4];\n    Vector3.LerpToRef(startScale, endScale, gradient, resultScale);\n    var resultRotation = MathTmp.Quaternion[2];\n    Quaternion.SlerpToRef(startRotation, endRotation, gradient, resultRotation);\n    var resultTranslation = MathTmp.Vector3[5];\n    Vector3.LerpToRef(startTranslation, endTranslation, gradient, resultTranslation);\n    Matrix.ComposeToRef(resultScale, resultRotation, resultTranslation, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtLH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtLHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in left handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtLHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    target.subtractToRef(eye, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Gets a new rotation matrix used to rotate an entity so as it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\"\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.LookAtRH = function (eye, target, up) {\n    var result = new Matrix();\n    Matrix.LookAtRHToRef(eye, target, up, result);\n    return result;\n  };\n  /**\r\n   * Sets the given \"result\" Matrix to a rotation matrix used to rotate an entity so that it looks at the target vector3, from the eye vector3 position, the up vector3 being oriented like \"up\".\r\n   * This function works in right handed mode\r\n   * @param eye defines the final position of the entity\r\n   * @param target defines where the entity should look at\r\n   * @param up defines the up vector for the entity\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.LookAtRHToRef = function (eye, target, up, result) {\n    var xAxis = MathTmp.Vector3[0];\n    var yAxis = MathTmp.Vector3[1];\n    var zAxis = MathTmp.Vector3[2]; // Z axis\n\n    eye.subtractToRef(target, zAxis);\n    zAxis.normalize(); // X axis\n\n    Vector3.CrossToRef(up, zAxis, xAxis);\n    var xSquareLength = xAxis.lengthSquared();\n\n    if (xSquareLength === 0) {\n      xAxis.x = 1.0;\n    } else {\n      xAxis.normalizeFromLength(Math.sqrt(xSquareLength));\n    } // Y axis\n\n\n    Vector3.CrossToRef(zAxis, xAxis, yAxis);\n    yAxis.normalize(); // Eye angles\n\n    var ex = -Vector3.Dot(xAxis, eye);\n    var ey = -Vector3.Dot(yAxis, eye);\n    var ez = -Vector3.Dot(zAxis, eye);\n    Matrix.FromValuesToRef(xAxis._x, yAxis._x, zAxis._x, 0.0, xAxis._y, yAxis._y, zAxis._y, 0.0, xAxis._z, yAxis._z, zAxis._z, 0.0, ex, ey, ez, 1.0, result);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoLHToRef(width, height, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Store a left-handed orthographic projection to a given matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoLHToRef = function (width, height, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / width;\n    var b = 2.0 / height;\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, 0.0, 0.0, d, 1.0, result);\n\n    result._updateIdentityStatus(a === 1 && b === 1 && c === 1 && d === 0);\n  };\n  /**\r\n   * Create a left-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterLHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 / (right - left);\n    var b = 2.0 / (top - bottom);\n    var c = 2.0 / (f - n);\n    var d = -(f + n) / (f - n);\n    var i0 = (left + right) / (left - right);\n    var i1 = (top + bottom) / (bottom - top);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 0.0, i0, i1, d, 1.0, result);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Creates a right-handed orthographic projection matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed orthographic projection matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRH = function (left, right, bottom, top, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.OrthoOffCenterRHToRef(left, right, bottom, top, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed orthographic projection into a given matrix\r\n   * @param left defines the viewport left coordinate\r\n   * @param right defines the viewport right coordinate\r\n   * @param bottom defines the viewport bottom coordinate\r\n   * @param top defines the viewport top coordinate\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.OrthoOffCenterRHToRef = function (left, right, bottom, top, znear, zfar, result) {\n    Matrix.OrthoOffCenterLHToRef(left, right, bottom, top, znear, zfar, result);\n    result._m[10] *= -1; // No need to call _markAsUpdated as previous function already called it and let _isIdentityDirty to true\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param width defines the viewport width\r\n   * @param height defines the viewport height\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveLH = function (width, height, znear, zfar) {\n    var matrix = new Matrix();\n    var n = znear;\n    var f = zfar;\n    var a = 2.0 * n / width;\n    var b = 2.0 * n / height;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, matrix);\n\n    matrix._updateIdentityStatus(false);\n\n    return matrix;\n  };\n  /**\r\n   * Creates a left-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a left-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovLH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovLHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = (f + n) / (f - n);\n    var d = -2.0 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, 1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a left-handed perspective projection into a given matrix with depth reversed\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseLHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, 1.0, 0.0, 0.0, 1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Creates a right-handed perspective projection matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @returns a new matrix as a right-handed perspective projection matrix\r\n   */\n\n\n  Matrix.PerspectiveFovRH = function (fov, aspect, znear, zfar) {\n    var matrix = new Matrix();\n    Matrix.PerspectiveFovRHToRef(fov, aspect, znear, zfar, matrix);\n    return matrix;\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var n = znear;\n    var f = zfar;\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    var c = -(f + n) / (f - n);\n    var d = -2 * f * n / (f - n);\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, c, -1.0, 0.0, 0.0, d, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a right-handed perspective projection into a given matrix\r\n   * @param fov defines the horizontal field of view\r\n   * @param aspect defines the aspect ratio\r\n   * @param znear defines the near clip plane\r\n   * @param zfar not used as infinity is used as far clip\r\n   * @param result defines the target matrix\r\n   * @param isVerticalFovFixed defines it the fov is vertically fixed (default) or horizontally\r\n   */\n\n\n  Matrix.PerspectiveFovReverseRHToRef = function (fov, aspect, znear, zfar, result, isVerticalFovFixed) {\n    //alternatively this could be expressed as:\n    //    m = PerspectiveFovLHToRef\n    //    m[10] *= -1.0;\n    //    m[11] *= -1.0;\n    if (isVerticalFovFixed === void 0) {\n      isVerticalFovFixed = true;\n    }\n\n    var t = 1.0 / Math.tan(fov * 0.5);\n    var a = isVerticalFovFixed ? t / aspect : t;\n    var b = isVerticalFovFixed ? t : t * aspect;\n    Matrix.FromValuesToRef(a, 0.0, 0.0, 0.0, 0.0, b, 0.0, 0.0, 0.0, 0.0, -znear, -1.0, 0.0, 0.0, -1.0, 0.0, result);\n\n    result._updateIdentityStatus(false);\n  };\n  /**\r\n   * Stores a perspective projection for WebVR info a given matrix\r\n   * @param fov defines the field of view\r\n   * @param znear defines the near clip plane\r\n   * @param zfar defines the far clip plane\r\n   * @param result defines the target matrix\r\n   * @param rightHanded defines if the matrix must be in right-handed mode (false by default)\r\n   */\n\n\n  Matrix.PerspectiveFovWebVRToRef = function (fov, znear, zfar, result, rightHanded) {\n    if (rightHanded === void 0) {\n      rightHanded = false;\n    }\n\n    var rightHandedFactor = rightHanded ? -1 : 1;\n    var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n    var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n    var xScale = 2.0 / (leftTan + rightTan);\n    var yScale = 2.0 / (upTan + downTan);\n    var m = result._m;\n    m[0] = xScale;\n    m[1] = m[2] = m[3] = m[4] = 0.0;\n    m[5] = yScale;\n    m[6] = m[7] = 0.0;\n    m[8] = (leftTan - rightTan) * xScale * 0.5;\n    m[9] = -((upTan - downTan) * yScale * 0.5);\n    m[10] = -zfar / (znear - zfar);\n    m[11] = 1.0 * rightHandedFactor;\n    m[12] = m[13] = m[15] = 0.0;\n    m[14] = -(2.0 * zfar * znear) / (zfar - znear);\n\n    result._markAsUpdated();\n  };\n  /**\r\n   * Computes a complete transformation matrix\r\n   * @param viewport defines the viewport to use\r\n   * @param world defines the world matrix\r\n   * @param view defines the view matrix\r\n   * @param projection defines the projection matrix\r\n   * @param zmin defines the near clip plane\r\n   * @param zmax defines the far clip plane\r\n   * @returns the transformation matrix\r\n   */\n\n\n  Matrix.GetFinalMatrix = function (viewport, world, view, projection, zmin, zmax) {\n    var cw = viewport.width;\n    var ch = viewport.height;\n    var cx = viewport.x;\n    var cy = viewport.y;\n    var viewportMatrix = Matrix.FromValues(cw / 2.0, 0.0, 0.0, 0.0, 0.0, -ch / 2.0, 0.0, 0.0, 0.0, 0.0, zmax - zmin, 0.0, cx + cw / 2.0, ch / 2.0 + cy, zmin, 1.0);\n    var matrix = MathTmp.Matrix[0];\n    world.multiplyToRef(view, matrix);\n    matrix.multiplyToRef(projection, matrix);\n    return matrix.multiply(viewportMatrix);\n  };\n  /**\r\n   * Extracts a 2x2 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 4 elements : the 2x2 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix2x2 = function (matrix) {\n    var m = matrix.m;\n    var arr = [m[0], m[1], m[4], m[5]];\n    return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n  };\n  /**\r\n   * Extracts a 3x3 matrix from a given matrix and store the result in a Float32Array\r\n   * @param matrix defines the matrix to use\r\n   * @returns a new Float32Array array with 9 elements : the 3x3 matrix extracted from the given matrix\r\n   */\n\n\n  Matrix.GetAsMatrix3x3 = function (matrix) {\n    var m = matrix.m;\n    var arr = [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10]];\n    return PerformanceConfigurator.MatrixUse64Bits ? arr : new Float32Array(arr);\n  };\n  /**\r\n   * Compute the transpose of a given matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @returns the new matrix\r\n   */\n\n\n  Matrix.Transpose = function (matrix) {\n    var result = new Matrix();\n    Matrix.TransposeToRef(matrix, result);\n    return result;\n  };\n  /**\r\n   * Compute the transpose of a matrix and store it in a target matrix\r\n   * @param matrix defines the matrix to transpose\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.TransposeToRef = function (matrix, result) {\n    var rm = result._m;\n    var mm = matrix.m;\n    rm[0] = mm[0];\n    rm[1] = mm[4];\n    rm[2] = mm[8];\n    rm[3] = mm[12];\n    rm[4] = mm[1];\n    rm[5] = mm[5];\n    rm[6] = mm[9];\n    rm[7] = mm[13];\n    rm[8] = mm[2];\n    rm[9] = mm[6];\n    rm[10] = mm[10];\n    rm[11] = mm[14];\n    rm[12] = mm[3];\n    rm[13] = mm[7];\n    rm[14] = mm[11];\n    rm[15] = mm[15]; // identity-ness does not change when transposing\n\n    result._updateIdentityStatus(matrix._isIdentity, matrix._isIdentityDirty);\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @returns a new matrix\r\n   */\n\n\n  Matrix.Reflection = function (plane) {\n    var matrix = new Matrix();\n    Matrix.ReflectionToRef(plane, matrix);\n    return matrix;\n  };\n  /**\r\n   * Computes a reflection matrix from a plane\r\n   * @param plane defines the reflection plane\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.ReflectionToRef = function (plane, result) {\n    plane.normalize();\n    var x = plane.normal.x;\n    var y = plane.normal.y;\n    var z = plane.normal.z;\n    var temp = -2 * x;\n    var temp2 = -2 * y;\n    var temp3 = -2 * z;\n    Matrix.FromValuesToRef(temp * x + 1, temp2 * x, temp3 * x, 0.0, temp * y, temp2 * y + 1, temp3 * y, 0.0, temp * z, temp2 * z, temp3 * z + 1, 0.0, temp * plane.d, temp2 * plane.d, temp3 * plane.d, 1.0, result);\n  };\n  /**\r\n   * Sets the given matrix as a rotation matrix composed from the 3 left handed axes\r\n   * @param xaxis defines the value of the 1st axis\r\n   * @param yaxis defines the value of the 2nd axis\r\n   * @param zaxis defines the value of the 3rd axis\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromXYZAxesToRef = function (xaxis, yaxis, zaxis, result) {\n    Matrix.FromValuesToRef(xaxis._x, xaxis._y, xaxis._z, 0.0, yaxis._x, yaxis._y, yaxis._z, 0.0, zaxis._x, zaxis._y, zaxis._z, 0.0, 0.0, 0.0, 0.0, 1.0, result);\n  };\n  /**\r\n   * Creates a rotation matrix from a quaternion and stores it in a target matrix\r\n   * @param quat defines the quaternion to use\r\n   * @param result defines the target matrix\r\n   */\n\n\n  Matrix.FromQuaternionToRef = function (quat, result) {\n    var xx = quat._x * quat._x;\n    var yy = quat._y * quat._y;\n    var zz = quat._z * quat._z;\n    var xy = quat._x * quat._y;\n    var zw = quat._z * quat._w;\n    var zx = quat._z * quat._x;\n    var yw = quat._y * quat._w;\n    var yz = quat._y * quat._z;\n    var xw = quat._x * quat._w;\n    result._m[0] = 1.0 - 2.0 * (yy + zz);\n    result._m[1] = 2.0 * (xy + zw);\n    result._m[2] = 2.0 * (zx - yw);\n    result._m[3] = 0.0;\n    result._m[4] = 2.0 * (xy - zw);\n    result._m[5] = 1.0 - 2.0 * (zz + xx);\n    result._m[6] = 2.0 * (yz + xw);\n    result._m[7] = 0.0;\n    result._m[8] = 2.0 * (zx + yw);\n    result._m[9] = 2.0 * (yz - xw);\n    result._m[10] = 1.0 - 2.0 * (yy + xx);\n    result._m[11] = 0.0;\n    result._m[12] = 0.0;\n    result._m[13] = 0.0;\n    result._m[14] = 0.0;\n    result._m[15] = 1.0;\n\n    result._markAsUpdated();\n  };\n\n  Matrix._updateFlagSeed = 0;\n  Matrix._identityReadOnly = Matrix.Identity();\n  return Matrix;\n}();\n\nexport { Matrix };\n/**\r\n * @hidden\r\n * Same as Tmp but not exported to keep it only for math functions to avoid conflicts\r\n */\n\nvar MathTmp =\n/** @class */\nfunction () {\n  function MathTmp() {}\n\n  MathTmp.Vector3 = ArrayTools.BuildArray(6, Vector3.Zero);\n  MathTmp.Matrix = ArrayTools.BuildArray(2, Matrix.Identity);\n  MathTmp.Quaternion = ArrayTools.BuildArray(3, Quaternion.Zero);\n  return MathTmp;\n}();\n/**\r\n * @hidden\r\n */\n\n\nvar TmpVectors =\n/** @class */\nfunction () {\n  function TmpVectors() {}\n\n  TmpVectors.Vector2 = ArrayTools.BuildArray(3, Vector2.Zero); // 3 temp Vector2 at once should be enough\n\n  TmpVectors.Vector3 = ArrayTools.BuildArray(13, Vector3.Zero); // 13 temp Vector3 at once should be enough\n\n  TmpVectors.Vector4 = ArrayTools.BuildArray(3, Vector4.Zero); // 3 temp Vector4 at once should be enough\n\n  TmpVectors.Quaternion = ArrayTools.BuildArray(2, Quaternion.Zero); // 2 temp Quaternion at once should be enough\n\n  TmpVectors.Matrix = ArrayTools.BuildArray(8, Matrix.Identity); // 8 temp Matrices at once should be enough\n\n  return TmpVectors;\n}();\n\nexport { TmpVectors };\n_TypeStore.RegisteredTypes[\"BABYLON.Vector2\"] = Vector2;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector3\"] = Vector3;\n_TypeStore.RegisteredTypes[\"BABYLON.Vector4\"] = Vector4;\n_TypeStore.RegisteredTypes[\"BABYLON.Matrix\"] = Matrix;"],"names":["Vector2","x","y","this","prototype","toString","getClassName","getHashCode","hash","toArray","array","index","fromArray","FromArrayToRef","asArray","result","Array","copyFrom","source","copyFromFloats","set","add","otherVector","addToRef","addInPlace","addVector3","subtract","subtractToRef","subtractInPlace","multiplyInPlace","multiply","multiplyToRef","multiplyByFloats","divide","divideToRef","divideInPlace","negate","negateInPlace","negateToRef","scaleInPlace","scale","scaleToRef","scaleAndAddToRef","equals","equalsWithEpsilon","epsilon","floor","Math","fract","length","sqrt","lengthSquared","normalize","len","clone","Zero","One","FromArray","offset","CatmullRom","value1","value2","value3","value4","amount","squared","cubed","Clamp","value","min","max","Hermite","tangent1","tangent2","part1","part2","part3","part4","Lerp","start","end","Dot","left","right","Normalize","vector","newVector","Minimize","Maximize","Transform","transformation","r","TransformToRef","m","PointInTriangle","p","p0","p1","p2","a","sign","s","t","Distance","DistanceSquared","Center","center","DistanceOfPointFromSegment","segA","segB","l2","v","proj","Vector3","z","_isDirty","_x","_y","_z","Object","defineProperty","get","enumerable","configurable","toQuaternion","Quaternion","RotationYawPitchRoll","addInPlaceFromFloats","subtractFromFloatsToRef","subtractFromFloats","projectOnPlane","plane","origin","projectOnPlaneToRef","n","normal","d","V","MathTmp","denom","scaledV","equalsToFloats","minimizeInPlace","other","minimizeInPlaceFromFloats","maximizeInPlace","maximizeInPlaceFromFloats","isNonUniformWithinEpsilon","absX","abs","absY","absZ","normalizeFromLength","reorderInPlace","order","_this","toLowerCase","forEach","val","i","rotateByQuaternionToRef","quaternion","toRotationMatrix","Matrix","TransformCoordinatesToRef","rotateByQuaternionAroundPointToRef","point","cross","Cross","normalizeToNew","normalized","normalizeToRef","reference","setAll","GetClipFactor","vector0","vector1","axis","size","d0","GetAngleBetweenVectors","v0","v1","dot","CrossToRef","acos","FromFloatArray","FromFloatArrayToRef","FromFloatsToRef","Up","_UpReadOnly","_ZeroReadOnly","Down","Forward","rightHandedSystem","Backward","Right","Left","TransformCoordinates","TransformCoordinatesFromFloatsToRef","rx","ry","rz","rw","TransformNormal","TransformNormalToRef","TransformNormalFromFloatsToRef","ClampToRef","CheckExtends","LerpToRef","NormalizeToRef","Project","world","transform","viewport","ProjectToRef","cw","width","ch","height","cx","cy","viewportMatrix","FromValuesToRef","matrix","_UnprojectFromInvertedMatrixToRef","num","UnprojectFromTransform","viewportWidth","viewportHeight","invert","Unproject","view","projection","UnprojectToRef","UnprojectFloatsToRef","sourceX","sourceY","sourceZ","screenSource","RotationFromAxis","axis1","axis2","axis3","rotation","RotationFromAxisToRef","ref","quat","RotationQuaternionFromAxisToRef","toEulerAnglesToRef","Vector4","w","undefined","toVector3","FromVector3","_w","otherQuaternion","q1","conjugateToRef","conjugateInPlace","conjugate","inv","toEulerAngles","qz","qx","qy","qw","sqw","sqz","sqx","sqy","zAxisY","limit","atan2","PI","asin","FromQuaternionToRef","fromRotationMatrix","FromRotationMatrixToRef","FromRotationMatrix","data","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","AreClose","quat0","quat1","Inverse","q","InverseToRef","Identity","IsIdentity","RotationAxis","angle","RotationAxisToRef","sin","cos","FromEulerAngles","RotationYawPitchRollToRef","FromEulerAnglesToRef","FromEulerVector","vec","FromEulerVectorToRef","yaw","pitch","roll","halfRoll","halfPitch","halfYaw","sinRoll","cosRoll","sinPitch","cosPitch","sinYaw","cosYaw","RotationAlphaBetaGamma","alpha","beta","gamma","RotationAlphaBetaGammaToRef","halfGammaPlusAlpha","halfGammaMinusAlpha","halfBeta","RotationQuaternionFromAxis","rotMat","FromXYZAxesToRef","Slerp","SlerpToRef","num2","num3","num4","flag","num5","num6","_isIdentity","_isIdentityDirty","_isIdentity3x2","_isIdentity3x2Dirty","updateFlag","_m","_updateIdentityStatus","_markAsUpdated","_updateFlagSeed","isIdentity","isIdentityDirty","isIdentity3x2","isIdentity3x2Dirty","isIdentityAs3x2","determinant","m00","m01","m02","m03","m10","m20","m30","det_22_33","det_21_33","det_21_32","det_20_33","det_20_32","det_20_31","invertToRef","reset","resultM","otherM","addToSelf","IdentityToRef","cofact_00","cofact_01","cofact_02","cofact_03","det","detInv","det_12_33","det_11_33","det_11_32","det_10_33","det_10_32","det_10_31","det_12_23","det_11_23","det_11_22","det_10_23","det_10_22","det_10_21","cofact_10","cofact_11","cofact_12","cofact_13","cofact_20","cofact_21","cofact_22","cofact_23","cofact_30","cofact_31","cofact_32","cofact_33","addAtIndex","multiplyAtIndex","setTranslationFromFloats","addTranslationFromFloats","setTranslation","vector3","getTranslation","getTranslationToRef","removeRotationAndScaling","copyToArray","o","multiplyToArray","tm0","tm1","tm2","tm3","tm4","tm5","tm6","tm7","tm8","tm9","tm10","tm11","tm12","tm13","tm14","tm15","om0","om1","om2","om3","om4","om5","om6","om7","om8","om9","om10","om11","om12","om13","om14","om15","om","decompose","translation","sx","sy","sz","getRow","setRow","row","setRowFromFloats","transpose","Transpose","transposeToRef","TransposeToRef","toNormalMatrix","tmp","getRotationMatrix","getRotationMatrixToRef","toggleModelMatrixHandInPlace","toggleProjectionMatrixHandInPlace","FromFloat32ArrayToRefScaled","_identityReadOnly","initialM11","initialM12","initialM13","initialM14","initialM21","initialM22","initialM23","initialM24","initialM31","initialM32","initialM33","initialM34","initialM41","initialM42","initialM43","initialM44","FromValues","Compose","ComposeToRef","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","identity","zero","RotationX","RotationXToRef","Invert","c","RotationY","RotationYToRef","RotationZ","RotationZToRef","c1","RotationAlignToRef","from","to","k","Scaling","ScalingToRef","Translation","TranslationToRef","startValue","endValue","gradient","startM","endM","DecomposeLerp","DecomposeLerpToRef","startScale","startRotation","startTranslation","endScale","endRotation","endTranslation","resultScale","resultRotation","resultTranslation","LookAtLH","eye","target","up","LookAtLHToRef","xAxis","yAxis","zAxis","xSquareLength","ex","ey","ez","LookAtRH","LookAtRHToRef","OrthoLH","znear","zfar","OrthoLHToRef","b","OrthoOffCenterLH","bottom","top","OrthoOffCenterLHToRef","i0","i1","OrthoOffCenterRH","OrthoOffCenterRHToRef","PerspectiveLH","PerspectiveFovLH","fov","aspect","PerspectiveFovLHToRef","isVerticalFovFixed","f","tan","PerspectiveFovReverseLHToRef","PerspectiveFovRH","PerspectiveFovRHToRef","PerspectiveFovReverseRHToRef","PerspectiveFovWebVRToRef","rightHanded","rightHandedFactor","upTan","upDegrees","downTan","downDegrees","leftTan","leftDegrees","rightTan","rightDegrees","xScale","yScale","GetFinalMatrix","zmin","zmax","GetAsMatrix2x2","arr","Float32Array","GetAsMatrix3x3","rm","mm","Reflection","ReflectionToRef","temp","temp2","temp3","xaxis","yaxis","zaxis","zw","zx","yw","xw","TmpVectors"],"sourceRoot":""}