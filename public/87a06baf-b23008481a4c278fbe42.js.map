{"version":3,"file":"87a06baf-b23008481a4c278fbe42.js","mappings":"2iBASA,SAASA,EAA2BC,EAAGC,GAAkB,IAAIC,EAAuB,oBAAXC,QAA0BH,EAAEG,OAAOC,WAAaJ,EAAE,cAAe,IAAKE,EAAI,CAAE,GAAIG,MAAMC,QAAQN,KAAOE,EAC9K,SAAqCF,EAAGO,GAAU,IAAKP,EAAG,OAAQ,GAAiB,iBAANA,EAAgB,OAAOQ,EAAkBR,EAAGO,GAAS,IAAIE,EAAIC,OAAOC,UAAUC,SAASC,KAAKb,GAAGc,MAAM,GAAI,GAAc,WAANL,GAAkBT,EAAEe,cAAaN,EAAIT,EAAEe,YAAYC,MAAM,GAAU,QAANP,GAAqB,QAANA,EAAa,OAAOJ,MAAMY,KAAKjB,GAAI,GAAU,cAANS,GAAqB,2CAA2CS,KAAKT,GAAI,OAAOD,EAAkBR,EAAGO,EAAS,CAD5OY,CAA4BnB,KAAOC,GAAkBD,GAAyB,iBAAbA,EAAEoB,OAAqB,CAAMlB,IAAIF,EAAIE,GAAI,IAAImB,EAAI,EAAOC,EAAI,WAAc,EAAG,MAAO,CAAEC,EAAGD,EAAGb,EAAG,WAAe,OAAIY,GAAKrB,EAAEoB,OAAe,CAAEI,MAAM,GAAe,CAAEA,MAAM,EAAOC,MAAOzB,EAAEqB,KAAQ,EAAGK,EAAG,SAAWC,GAAO,MAAMA,CAAK,EAAGC,EAAGN,EAAK,CAAE,MAAM,IAAIO,UAAU,wIAA0I,CAAE,IAA6CC,EAAzCC,GAAmB,EAAMC,GAAS,EAAY,MAAO,CAAET,EAAG,WAAerB,EAAKA,EAAGW,KAAKb,EAAI,EAAGS,EAAG,WAAe,IAAIwB,EAAO/B,EAAGgC,OAAsC,OAA9BH,EAAmBE,EAAKT,KAAaS,CAAM,EAAGP,EAAG,SAAWS,GAAOH,GAAS,EAAMF,EAAMK,CAAK,EAAGP,EAAG,WAAe,IAAWG,GAAiC,MAAb7B,EAAGkC,QAAgBlC,EAAGkC,QAA6C,CAAjC,QAAU,GAAIJ,EAAQ,MAAMF,CAAK,CAAE,EAAK,CAEv+B,SAAStB,EAAkB6B,EAAKC,IAAkB,MAAPA,GAAeA,EAAMD,EAAIjB,UAAQkB,EAAMD,EAAIjB,QAAQ,IAAK,IAAIC,EAAI,EAAGkB,EAAO,IAAIlC,MAAMiC,GAAMjB,EAAIiB,EAAKjB,IAAOkB,EAAKlB,GAAKgB,EAAIhB,GAAM,OAAOkB,CAAM,CACtL,SAASC,EAAaC,GAAW,IAAIC,EACrC,WAAuC,GAAuB,oBAAZC,UAA4BA,QAAQC,UAAW,OAAO,EAAO,GAAID,QAAQC,UAAUC,KAAM,OAAO,EAAO,GAAqB,mBAAVC,MAAsB,OAAO,EAAM,IAAsF,OAAhFC,QAAQpC,UAAUqC,QAAQnC,KAAK8B,QAAQC,UAAUG,QAAS,IAAI,WAAa,MAAY,CAAkC,CAA1B,MAAOrB,GAAK,OAAO,CAAO,CAAE,CADvQuB,GAA6B,OAAO,WAAkC,IAAsCC,EAAlCC,GAAQ,OAAgBV,GAAkB,GAAIC,EAA2B,CAAE,IAAIU,GAAY,OAAgBC,MAAMtC,YAAamC,EAASP,QAAQC,UAAUO,EAAOG,UAAWF,EAAY,MAASF,EAASC,EAAMI,MAAMF,KAAMC,WAAc,OAAO,OAA2BD,KAAMH,EAAS,CAAG,CA6Bja,IAAIM,GAAoC,QAAa,SAASA,KACnE,OAAgBH,KAAMG,EACxB,IAIIC,GAAoC,QAAa,SAASA,KAC5D,OAAgBJ,KAAMI,GACtBJ,KAAKK,iBAAmB,CAAC,EACzBL,KAAKM,WAAa,IAAIC,EACtBP,KAAKQ,sCAAwC,IAAID,EACjDP,KAAKS,oBAAsB,IAC7B,IAKWF,GAA+B,QAAa,SAASA,KAC9D,OAAgBP,KAAMO,GACtBP,KAAKU,YAAa,EAClBV,KAAKK,iBAAmB,IAAIrD,MAC5BgD,KAAKW,WAAa,IAAI3D,MACtBgD,KAAKY,2BAA6B,IAAI5D,KACxC,IAII6D,GAAwC,QAAa,SAASA,KAChE,OAAgBb,KAAMa,GACtBb,KAAKc,eAAiB,EACtBd,KAAKe,aAAe,KACpBf,KAAKgB,qBAAuB,KAC5BhB,KAAKiB,iBAAmB,IACxBjB,KAAKkB,WAAa,KAClBlB,KAAKmB,gBAAkB,GACvBnB,KAAKoB,cAAgB,IACvB,IAIIC,GAAqC,QAAa,SAASA,KAC7D,OAAgBrB,KAAMqB,GACtBrB,KAAKsB,mBAAoB,EAEzBtB,KAAKuB,QAAU,KAEfvB,KAAKwB,QAAU,KACfxB,KAAKyB,gBAAkB,EAEvBzB,KAAK0B,WAAa,IAAI1E,MAEtBgD,KAAK2B,uBAAwB,EAC7B3B,KAAK4B,mBAAqB,KAC1B5B,KAAK6B,qBAAuB,CAC9B,IAIWC,EAAoB,SAAUC,IACvC,OAAUD,EAAMC,GAChB,IAAIC,EAAS7C,EAAa2C,GAY1B,SAASA,EAAKnE,GACZ,IAAIsE,EACAC,EAAQjC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KAC5EmC,EAASnC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KAC7EoC,EAASpC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KAC7EqC,EAAqBrC,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC3DI,IAAuBtC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAmD1F,IAlDA,OAAgBD,KAAM8B,IACtBG,EAAQD,EAAOxE,KAAKwC,KAAMrC,EAAMuE,IAE1BM,sBAAwB,IAAInB,EAMlCY,EAAMQ,eAAiB,EAOvBR,EAAMS,UAAY,IAAI1F,MAGtBiF,EAAMU,qBAAuB,KAE7BV,EAAMW,UAAY,KAElBX,EAAMY,qBAAuB,IAAIzC,EAEjC6B,EAAMa,yBAA2B,IAAIjC,EAErCoB,EAAMc,4BAA6B,EAGnCd,EAAMe,gCAAkClB,EAAKmB,YAI7ChB,EAAMiB,gCAAkC,KAKxCjB,EAAMkB,kBAAmB,EACzBjB,EAAQD,EAAMmB,WACdnB,EAAMoB,cAAgB,SAAUC,EAAYC,EAAOC,GAC7CF,GAAcE,IACZvB,EAAMwB,eACRxB,EAAMyB,iBAAiBH,GAEvBC,EAAkBG,oBAAoBJ,GAG5C,EACIlB,EAAQ,CAoBV,GAlBIA,EAAOO,WACTP,EAAOO,UAAUgB,aAAY,OAAuB3B,IAGtD,aAAoBI,GAAQ,OAAuBJ,GAAQ,CAAC,OAAQ,WAAY,WAAY,YAAa,SAAU,WAAY,SAAU,WAAY,qBAAsB,eAAgB,6BAA8B,qCAAsC,eAAgB,WAAY,YAAa,mBAAoB,UAAW,qBAAsB,eAAgB,WAAY,eAAgB,WAAY,gBAAiB,UAAW,KAAM,QAAS,mBAAoB,kBAAmB,6BAA8B,sBAAuB,oBAAqB,YAAa,uBAAwB,mBAAoB,eAAgB,mBAAoB,CAAC,gBAE/oBA,EAAMO,sBAAsBjB,QAAUc,EAClCH,EAAM2B,mBACHxB,EAAOG,sBAAsBhB,UAChCa,EAAOG,sBAAsBhB,QAAU,CAAC,GAE1Ca,EAAOG,sBAAsBhB,QAAQS,EAAM6B,WAAY,OAAuB7B,IAIhFA,EAAMe,gCAAkCX,EAAOW,gCAC/Cf,EAAMU,qBAAuBN,EAAOM,qBAEhCN,EAAO0B,QAAS,CAClB,IAAIC,EAAS3B,EAAO0B,QACpB,IAAK,IAAIE,KAASD,EACX3G,OAAOC,UAAU4G,eAAe1G,KAAKwG,EAAQC,IAG7CD,EAAOC,IAGZhC,EAAMkC,qBAAqBF,EAAOD,EAAOC,GAAOrG,KAAMoG,EAAOC,GAAOG,GAExE,CAqBA,GAnBI/B,EAAOgC,UAAYhC,EAAOgC,SAASC,MACrCrC,EAAMoC,SAAWhC,EAAOgC,SAASC,QAEjCrC,EAAMoC,SAAWhC,EAAOgC,SAGtB,KAAQ,YAAahC,IACvB,eAAe,OAAuBJ,GAAQ,YAAaI,GAAQ,IAIrEJ,EAAMsC,WAAWlC,EAAOmC,WAAU,IAElCvC,EAAMG,OAASC,EAAOD,OAEtBH,EAAMwC,eAAepC,EAAOqC,kBAC5BzC,EAAM0C,GAAKhH,EAAO,IAAM0E,EAAOsC,GAE/B1C,EAAM2C,SAAWvC,EAAOuC,UACnBtC,EAGH,IADA,IAAIuC,EAAoBxC,EAAOyC,gBAAe,GACrCC,EAAQ,EAAGA,EAAQF,EAAkB9G,OAAQgH,IAAS,CAC7D,IAAIC,EAAQH,EAAkBE,GAC1BC,EAAMV,OACRU,EAAMV,MAAM3G,EAAO,IAAMqH,EAAMrH,MAAM,OAAuBsE,GAEhE,CAOF,GAJII,EAAO4C,qBACThD,EAAMgD,mBAAqB5C,EAAO4C,oBAGhC/C,EAAMgD,iBAAkB,CAC1B,IAAIC,EAAgBjD,EAAMgD,mBAC1B,GAAI3C,GAAwB4C,EAAe,CACzC,IAAIC,EAAWD,EAAcE,4BAA4BhD,GACrD+C,IACFnD,EAAMqD,gBAAkBF,EAASd,OAAM,OAAuBrC,IAElE,CACF,CAEA,IAAK,IAAIsD,EAAS,EAAGA,EAASrD,EAAMsD,gBAAgBzH,OAAQwH,IAAU,CACpE,IAAIE,EAASvD,EAAMsD,gBAAgBD,GAC/BE,EAAOC,UAAYrD,GACrBoD,EAAOnB,MAAMmB,EAAO9H,MAAM,OAAuBsE,GAErD,CAEAA,EAAM0D,SAAWtD,EAAOsD,SACxB1D,EAAM2D,qBAAoB,GAAM,GAChC3D,EAAM4D,oBAAmB,EAC3B,CA4BA,OA1Be,OAAXzD,IACFH,EAAMG,OAASA,GAEjBH,EAAMY,qBAAqBjC,2BAA6BqB,EAAM6D,YAAYC,UAAUC,gBACpF/D,EAAMO,sBAAsByD,0BAA4B,SAAUC,GAEhEA,EAASC,sBAAuB,EAC5BlE,EAAMmE,SAAQ,GAChBnE,EAAMoE,sBAAsBC,iBAAgB,OAAuBrE,IAE9DA,EAAMO,sBAAsB+D,0BAC/BtE,EAAMO,sBAAsB+D,wBAA0BtE,EAAMuE,OAAOC,yBAAyBC,KAAI,WAE1FzE,EAAMmE,SAAQ,KAChBnE,EAAMuE,OAAOC,yBAAyBE,OAAO1E,EAAMO,sBAAsB+D,yBACzEtE,EAAMO,sBAAsB+D,wBAA0B,KACtDtE,EAAMoE,sBAAsBC,iBAAgB,OAAuBrE,IAEvE,IAGN,EACAA,EAAMoE,sBAAwB,IAAI,KAAWpE,EAAMO,sBAAsByD,2BACrE5D,GACFA,EAAOuE,mBAAmBN,iBAAgB,OAAuBrE,IAE5DA,CACT,CA22HA,OAp2HA,OAAaH,EAAM,CAAC,CAClB+E,IAAK,uBACLC,IAIA,WACE,OAAO9G,KAAKwC,sBAAsBb,qBACpC,EACAoF,IAAK,SAAa3I,GAChB4B,KAAKwC,sBAAsBb,sBAAwBvD,CACrD,GACC,CACDyI,IAAK,2BACLC,IAAK,WACH,OAAO9G,KAAKgH,8BAA8BC,yBAC5C,EACAF,IAAK,SAAa3I,GACZ4B,KAAKgH,8BAA8BC,4BAA8B7I,IAGjEA,GAAS4B,KAAKwC,sBAAsB0E,mBAEtClH,KAAKmH,gBAAgB,iBAA2BnH,KAAKwC,sBAAsB0E,kBAAkB,GACzFlH,KAAKwC,sBAAsB4E,gBAC7BpH,KAAKmH,gBAAgB,eAAyBnH,KAAKwC,sBAAsB4E,gBAAgB,GAE3FpH,KAAKwC,sBAAsB0E,iBAAmB,KAC9ClH,KAAKwC,sBAAsB4E,eAAiB,MAE9CpH,KAAKgH,8BAA8BC,0BAA4B7I,EAC/D4B,KAAKqH,kCACP,GAIC,CACDR,IAAK,2BACLC,IAAK,WAIH,OAHK9G,KAAKwC,sBAAsB8E,4BAC9BtH,KAAKwC,sBAAsB8E,0BAA4B,IAAI,MAEtDtH,KAAKwC,sBAAsB8E,yBACpC,GAIC,CACDT,IAAK,yBACLC,IAAK,WAIH,OAHK9G,KAAKwC,sBAAsB+E,0BAC9BvH,KAAKwC,sBAAsB+E,wBAA0B,IAAI,MAEpDvH,KAAKwC,sBAAsB+E,uBACpC,GAIC,CACDV,IAAK,0BACLC,IAAK,WAIH,OAHK9G,KAAKwC,sBAAsBgF,2BAC9BxH,KAAKwC,sBAAsBgF,yBAA2B,IAAI,MAErDxH,KAAKwC,sBAAsBgF,wBACpC,GAIC,CACDX,IAAK,0BACLC,IAAK,WAIH,OAHK9G,KAAKwC,sBAAsBiF,2BAC9BzH,KAAKwC,sBAAsBiF,yBAA2B,IAAI,MAErDzH,KAAKwC,sBAAsBiF,wBACpC,GAIC,CACDZ,IAAK,yBACLC,IAAK,WAIH,OAHK9G,KAAKwC,sBAAsBkF,0BAC9B1H,KAAKwC,sBAAsBkF,wBAA0B,IAAI,MAEpD1H,KAAKwC,sBAAsBkF,uBACpC,GAIC,CACDb,IAAK,eACLE,IAAK,SAAaY,GACZ3H,KAAK4H,uBACP5H,KAAK6H,uBAAuBlB,OAAO3G,KAAK4H,uBAE1C5H,KAAK4H,sBAAwB5H,KAAK6H,uBAAuBnB,IAAIiB,EAC/D,GACC,CACDd,IAAK,eACLC,IAAK,WACH,OAAO9G,KAAK0C,UAAU3E,OAAS,CACjC,GACC,CACD8I,IAAK,mBACLC,IAAK,WACH,IAAIgB,EACJ,OAAgE,QAAvDA,EAAK9H,KAAK8C,yBAAyBhC,sBAAmC,IAAPgH,EAAgBA,EAAK,GAAK,CACpG,GAMC,CACDjB,IAAK,sBACLC,IAAK,WACH,OAAO9G,KAAKwC,sBAAsBX,oBACpC,EACAkF,IAAK,SAAagB,GAChB/H,KAAKwC,sBAAsBX,qBAAuBkG,CACpD,GAIC,CACDlB,IAAK,SACLC,IAAK,WACH,OAAO9G,KAAKwC,sBAAsBjB,OACpC,GAMC,CACDsF,IAAK,eACLC,IAAK,WACH,OAAO9G,KAAKwC,sBAAsBhB,OACpC,GAIC,CACDqF,IAAK,cACLC,IAAK,WACH,OAAO9G,KAAKgI,UACd,EACAjB,IAAK,SAAa3I,GACZ4B,KAAKgI,aAAe5J,IACtB4B,KAAKgI,WAAa5J,EAClB4B,KAAKqH,kCAET,GAEC,CACDR,IAAK,6BACLC,IAAK,WACH,OAAO9G,KAAK6C,qBAAqBoF,aACnC,GAEC,CACDpB,IAAK,qCACLC,IAAK,WACH,OAAO9G,KAAK6C,qBAAqBqF,qBACnC,GAEC,CACDrB,IAAK,2CACLC,IAAK,WACH,OAAO9G,KAAK6C,qBAAqBsF,YACnC,EACApB,IAAK,SAAa3I,GAChB4B,KAAK6C,qBAAqBsF,aAAe/J,CAC3C,GAEC,CACDyI,IAAK,mDACLC,IAAK,WACH,OAAO9G,KAAK6C,qBAAqBuF,oBACnC,EACArB,IAAK,SAAa3I,GAChB4B,KAAK6C,qBAAqBuF,qBAAuBhK,CACnD,GACC,CACDyI,IAAK,uBACLzI,MAAO,WACL,IAAIiK,EAAYpI,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KAChFqI,EAAUrI,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAChDoG,EAAmBtI,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EACzDqG,EAAuC,IAA5BxI,KAAKyI,oBAA4BH,GAAWA,EAAQI,oBAAkD,IAA7BJ,EAAQI,kBAA6BJ,EAAQI,iBAAiB1I,OAASA,KAAKsE,MAAM,aAAetE,KAAKrC,MAAQqC,KAAK2E,IAAK0D,GAAarI,KAAKoC,QAAQ,GAAQpC,KAAK2I,eAAe,gBAAkB3I,KAAKrC,MAAQqC,KAAK2E,KAC1S6D,EAASpG,OAASiG,GAAarI,KAAKoC,OACpCoG,EAASI,SAAW5I,KAAK4I,SAAStE,QAClCkE,EAASK,QAAU7I,KAAK6I,QAAQvE,QAC5BtE,KAAK8I,mBACPN,EAASM,mBAAqB9I,KAAK8I,mBAAmBxE,QAEtDkE,EAASO,SAAW/I,KAAK+I,SAASzE,QAEhCiE,GACFA,EAAiBvI,KAAMwI,GAEzB,IACEQ,EADEC,EAAYvM,EAA2BsD,KAAKkJ,wBAAuB,IAEvE,IACE,IAAKD,EAAU/K,MAAO8K,EAAQC,EAAU7L,KAAKe,MAAO,CAClD,IAAI6G,EAAQgE,EAAM5K,MAEW,kBAAzB4G,EAAMmE,gBAAkE,SAA5BX,EAASW,eACvDnE,EAAMoE,qBAAqBZ,EAAU,CACnCE,iBAAkBJ,GAAWA,EAAQI,mBAAoB,EACzDW,eAAgBb,GACfD,GAEHvD,EAAMoE,qBAAqBZ,EAAUF,EAASC,EAElD,CAKF,CAJE,MAAO9J,GACPwK,EAAU5K,EAAEI,EACd,CAAE,QACAwK,EAAU1K,GACZ,CACA,OAAOiK,CACT,GAKC,CACD3B,IAAK,eACLzI,MAAO,WACL,MAAO,MACT,GAEC,CACDyI,IAAK,UACLC,IAAK,WACH,OAAO,CACT,GAMC,CACDD,IAAK,WACLzI,MAAO,SAAkBkL,GACvB,IAAIC,GAAM,QAAK,OAAgBzH,EAAKxE,WAAY,WAAY0C,MAAMxC,KAAKwC,KAAMsJ,GAG7E,GAFAC,GAAO,iBAAmBvJ,KAAKyI,mBAC/Bc,GAAO,cAAgBvJ,KAAKwJ,iBAAmBxJ,KAAKwJ,iBAAmBxJ,KAAKoC,OAASpC,KAAKoC,OAAOzE,KAAO,QACpGqC,KAAKyJ,WACP,IAAK,IAAIzL,EAAI,EAAGA,EAAIgC,KAAKyJ,WAAW1L,OAAQC,IAC1CuL,GAAO,mBAAqBvJ,KAAKyJ,WAAWzL,GAAGT,SAAS+L,GAG5D,GAAIA,EACF,GAAItJ,KAAK4C,UAAW,CAClB,IAAI8G,EAAK1J,KAAK2J,aACVC,EAAK5J,KAAK6J,gBAAgB,kBAC1BD,GAAMF,IACRH,GAAO,oBAAsBK,EAAG7L,OAAS,IAAM2L,EAAG3L,OAAS,MAAQ,MAEvE,MACEwL,GAAO,0BAGX,OAAOA,CACT,GAEC,CACD1C,IAAK,gBACLzI,MAAO,YACL,QAAK,OAAgB0D,EAAKxE,WAAY,gBAAiB0C,MAAMxC,KAAKwC,MAClE,IACE8J,EADEC,EAAarN,EAA2BsD,KAAK0C,WAEjD,IACE,IAAKqH,EAAW7L,MAAO4L,EAASC,EAAW3M,KAAKe,MAAO,CACtC2L,EAAO1L,MACb4L,eACX,CAKF,CAJE,MAAOvL,GACPsL,EAAW1L,EAAEI,EACf,CAAE,QACAsL,EAAWxL,GACb,CACF,GAIC,CACDsI,IAAK,eACLC,IAAK,WACH,OAAO9G,KAAKwC,sBAAsBd,WAAW3D,OAAS,CACxD,GAKC,CACD8I,IAAK,eACLzI,MAAO,WACL,OAAO4B,KAAKwC,sBAAsBd,UACpC,GACC,CACDmF,IAAK,iBACLzI,MAAO,WACL,IAAI6L,EAAqBjK,KAAKwC,sBAAsBb,uBAAyB,EAAI,EACjF3B,KAAKwC,sBAAsBd,WAAWwI,MAAK,SAAUC,EAAGC,GACtD,OAAID,EAAEE,yBAA2BD,EAAEC,yBAC1BJ,EAELE,EAAEE,yBAA2BD,EAAEC,0BACzBJ,EAEH,CACT,GACF,GASC,CACDpD,IAAK,cACLzI,MAAO,SAAqBiM,EAA0BC,GACpD,GAAIA,GAAQA,EAAKC,YAEf,OADA,SAAY,4CACLvK,KAET,IAAIwK,EAAQ,IAAI,IAAaH,EAA0BC,GAMvD,OALAtK,KAAKwC,sBAAsBd,WAAW+I,KAAKD,GACvCF,IACFA,EAAKC,YAAcvK,MAErBA,KAAK0K,iBACE1K,IACT,GAOC,CACD6G,IAAK,wBACLzI,MAAO,SAA+BuM,GAEpC,IADA,IAAIC,EAAmB5K,KAAKwC,sBACnBuC,EAAQ,EAAGA,EAAQ6F,EAAiBlJ,WAAW3D,OAAQgH,IAAS,CACvE,IAAIyF,EAAQI,EAAiBlJ,WAAWqD,GACxC,GAAIyF,EAAMH,2BAA6BM,EACrC,OAAOH,EAAMF,IAEjB,CACA,OAAO,IACT,GAOC,CACDzD,IAAK,iBACLzI,MAAO,SAAwBkM,GAE7B,IADA,IAAIM,EAAmB5K,KAAKwC,sBACnBuC,EAAQ,EAAGA,EAAQ6F,EAAiBlJ,WAAW3D,OAAQgH,IAC1D6F,EAAiBlJ,WAAWqD,GAAOuF,OAASA,IAC9CM,EAAiBlJ,WAAWmJ,OAAO9F,EAAO,GACtCuF,IACFA,EAAKC,YAAc,OAKzB,OADAvK,KAAK0K,iBACE1K,IACT,GAQC,CACD6G,IAAK,SACLzI,MAAO,SAAgB0M,EAAQC,GAC7B,IAIIC,EAJAJ,EAAmB5K,KAAKwC,sBAC5B,IAAKoI,EAAiBlJ,YAAqD,IAAvCkJ,EAAiBlJ,WAAW3D,OAC9D,OAAOiC,KAGL+K,EACFC,EAAUD,EAGVC,EADmBhL,KAAKiL,kBACDF,eAEzB,IAAIG,EAAmBJ,EAAOK,OAAS,wBAA6BL,EAAOM,KAAOJ,EAAQK,YAAYC,SAASR,EAAOS,gBAAgBxN,SAElIyN,EAAeN,EACfO,EAAc,EAClB,GAHwBb,EAAiBjJ,sBAGlB,CACrB,IAAI+J,EAAaZ,EAAOY,WACpBC,EAAWX,EAAQY,YAAcd,EAAOM,KAAOF,EAEnDM,GADAG,EAAWA,EAAWA,EAAWE,KAAKC,IACZJ,EAC1BD,GAAe,CACjB,CACA,GAAIA,EAAcb,EAAiBlJ,WAAWkJ,EAAiBlJ,WAAW3D,OAAS,GAAGsM,yBAA2BoB,EAAcD,EAI7H,OAHIxL,KAAK+L,qBACP/L,KAAK+L,oBAAoBP,EAAcxL,KAAMA,MAExCA,KAET,IAAK,IAAI+E,EAAQ,EAAGA,EAAQ6F,EAAiBlJ,WAAW3D,OAAQgH,IAAS,CACvE,IAAIyF,EAAQI,EAAiBlJ,WAAWqD,GACxC,GAAI0G,EAAcjB,EAAMH,yBAA2BoB,EAAcD,EAAc,CAC7E,GAAIhB,EAAMF,KAAM,CACd,GAAkC,IAA9BE,EAAMF,KAAK7H,eAEb,OADA+H,EAAMF,KAAK0B,mBACJhM,KAET,GAAkC,IAA9BwK,EAAMF,KAAK7H,eACb,OAAOzC,KAETwK,EAAMF,KAAK2B,eACXzB,EAAMF,KAAK4B,6BAA6BlM,KAAKmM,qBAC/C,CAIA,OAHInM,KAAK+L,qBACP/L,KAAK+L,oBAAoBP,EAAcxL,KAAMwK,EAAMF,MAE9CE,EAAMF,IACf,CACF,CAIA,OAHItK,KAAK+L,qBACP/L,KAAK+L,oBAAoBP,EAAcxL,KAAMA,MAExCA,IACT,GAIC,CACD6G,IAAK,WACLC,IAAK,WACH,OAAO9G,KAAK4C,SACd,GAKC,CACDiE,IAAK,mBACLzI,MAAO,WACL,OAAuB,OAAnB4B,KAAK4C,gBAAyCT,IAAnBnC,KAAK4C,UAC3B,EAEF5C,KAAK4C,UAAU6F,kBACxB,GAoBC,CACD5B,IAAK,kBACLzI,MAAO,SAAyBgO,EAAMC,EAAgBC,GACpD,IAAIxE,EAAIyE,EACR,IAAKvM,KAAK4C,UACR,OAAO,KAET,IAAI4J,EAAuH,QAA/GD,EAAkD,QAA5CzE,EAAK9H,KAAKyM,oCAAiD,IAAP3E,OAAgB,EAASA,EAAG4E,cAAcN,UAA0B,IAAPG,OAAgB,EAASA,EAAGI,aAAa3M,KAAK4C,UAAU6F,mBAAoB6D,GAAaD,GAAmD,IAAjCrM,KAAK4C,UAAUgK,OAAO7O,QAIpQ,OAHKyO,IACHA,EAAOxM,KAAK4C,UAAUiH,gBAAgBuC,EAAMC,EAAgBC,IAEvDE,CACT,GAmBC,CACD3F,IAAK,kBACLzI,MAAO,SAAyBgO,GAC9B,IAAItE,EAAIyE,EACR,OAAKvM,KAAK4C,UAG6G,QAA/G2J,EAAkD,QAA5CzE,EAAK9H,KAAKyM,oCAAiD,IAAP3E,OAAgB,EAASA,EAAG4E,cAAcN,UAA0B,IAAPG,EAAgBA,EAAKvM,KAAK4C,UAAUiK,gBAAgBT,GAF1K,IAGX,GAmBC,CACDvF,IAAK,wBACLzI,MAAO,SAA+BgO,GACpC,IAAItE,EACJ,OAAK9H,KAAK4C,eAMwGT,KAA7D,QAA5C2F,EAAK9H,KAAKyM,oCAAiD,IAAP3E,OAAgB,EAASA,EAAG4E,cAAcN,KAAwBpM,KAAK4C,UAAUkK,sBAAsBV,KAL9JpM,KAAK+M,aACmC,IAAnC/M,KAAK+M,WAAWC,QAAQZ,EAKrC,GAkBC,CACDvF,IAAK,0BACLzI,MAAO,SAAiCgO,GACtC,IAAItE,EAAIyE,EACR,OAAKvM,KAAK4C,WAM8G,QAA/G2J,EAAkD,QAA5CzE,EAAK9H,KAAKyM,oCAAiD,IAAP3E,OAAgB,EAASA,EAAG4E,cAAcN,UAA0B,IAAPG,OAAgB,EAASA,EAAGU,gBAAkBjN,KAAK4C,UAAUsK,wBAAwBd,KAL/MpM,KAAK+M,aACmC,IAAnC/M,KAAK+M,WAAWC,QAAQZ,EAKrC,GAKC,CACDvF,IAAK,uBACLzI,MAAO,WACL,IAAK4B,KAAK4C,UAAW,CACnB,IAAI/C,EAAS,IAAI7C,MAMjB,OALIgD,KAAK+M,YACP/M,KAAK+M,WAAWI,SAAQ,SAAUf,GAChCvM,EAAO4K,KAAK2B,EACd,IAEKvM,CACT,CACA,IAAIuN,EAAQpN,KAAK4C,UAAUyK,uBAC3B,GAAIrN,KAAKyM,6BACP,IAAK,IAAIL,KAAQpM,KAAKyM,6BAA6BC,cACjDU,EAAM3C,KAAK2B,GAGf,OAAOgB,CACT,GAKC,CACDvG,IAAK,kBACLzI,MAAO,WACL,OAAK4B,KAAK4C,UAGH5C,KAAK4C,UAAU0K,kBAFb,CAGX,GAOC,CACDzG,IAAK,aACLzI,MAAO,SAAoBiO,EAAgBC,GACzC,OAAKtM,KAAK4C,UAGH5C,KAAK4C,UAAU+G,WAAW0C,EAAgBC,GAFxC,EAGX,GACC,CACDzF,IAAK,YACLC,IAAK,WACH,OAA4B,OAArB9G,KAAKuK,kBAA6CpI,IAArBnC,KAAKuK,WAC3C,GAOC,CACD1D,IAAK,UACLzI,MAAO,WACL,IAEI0J,EAAIyE,EAAIgB,EAAIC,EAAIC,EAAIC,EAFpBC,EAAgB1N,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC/E2N,EAAuB3N,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAE1F,GAA4B,IAAxBD,KAAKyC,eACP,OAAO,EAET,KAAK,QAAK,OAAgBX,EAAKxE,WAAY,UAAW0C,MAAMxC,KAAKwC,KAAM2N,GACrE,OAAO,EAET,IAAK3N,KAAK6N,WAAuC,IAA1B7N,KAAK6N,UAAU9P,OACpC,OAAO,EAET,IAAK4P,EACH,OAAO,EAET,IAAIG,EAAS9N,KAAK8F,YACd5D,EAAQlC,KAAKoD,WACbxC,EAA6BgN,GAAwBE,EAAO/H,UAAUC,kBAAoBhG,KAAK0C,UAAU3E,OAAS,GAAKiC,KAAK+N,kBAChI/N,KAAK6F,qBACL,IAAImI,EAAMhO,KAAK4E,UAAY1C,EAAM+L,gBACjC,GAAID,EACF,GAAIA,EAAIE,wBAAyB,CAC/B,IACEC,EADEC,EAAa1R,EAA2BsD,KAAK6N,WAEjD,IACE,IAAKO,EAAWlQ,MAAOiQ,EAASC,EAAWhR,KAAKe,MAAO,CACrD,IAAIkQ,EAAUF,EAAO/P,MACjBoF,EAAoB6K,EAAQC,cAChC,GAAI9K,EACF,GAAIA,EAAkB0K,yBACpB,IAAK1K,EAAkB+K,kBAAkBvO,KAAMqO,EAASzN,GACtD,OAAO,OAGT,IAAK4C,EAAkB4C,QAAQpG,KAAMY,GACnC,OAAO,CAIf,CAKF,CAJE,MAAOnC,GACP2P,EAAW/P,EAAEI,EACf,CAAE,QACA2P,EAAW7P,GACb,CACF,MACE,IAAKyP,EAAI5H,QAAQpG,KAAMY,GACrB,OAAO,EAKb,IAEE4N,EAFEC,EAAsBX,EAAOW,oBAC7BC,EAAahS,EAA2BsD,KAAK2O,cAEjD,IACE,IAAKD,EAAWxQ,MAAOsQ,EAASE,EAAWtR,KAAKe,MAAO,CACrD,IAAIyQ,EAAQJ,EAAOpQ,MACfyQ,EAAYD,EAAME,qBACtB,GAAID,MAAoD,QAAnC/G,EAAK+G,EAAUE,sBAAmC,IAAPjH,OAAgB,EAASA,EAAGkH,cAAoD,QAAnCzC,EAAKsC,EAAUE,sBAAmC,IAAPxC,OAAgB,EAASA,EAAGyC,cAAsK,KAAxD,QAA7FxB,EAAyC,QAAnCD,EAAKsB,EAAUE,sBAAmC,IAAPxB,OAAgB,EAASA,EAAGyB,kBAA+B,IAAPxB,OAAgB,EAASA,EAAGR,QAAQhN,QAAgB,CACxV6O,EAAUE,iBACZjB,EAAOW,oBAAsBI,EAAUE,eAAeE,cAExD,IACEC,EADEC,EAAazS,EAA2BsD,KAAK6N,WAEjD,IACE,IAAKsB,EAAWjR,MAAOgR,EAASC,EAAW/R,KAAKe,MAAO,CACrD,IAAIiR,EAAWF,EAAO9Q,MACtB,IAAKyQ,EAAUzI,QAAQgJ,EAAUxO,EAA4I,QAA/G8M,EAAuC,QAAjCD,EAAK2B,EAASd,qBAAkC,IAAPb,OAAgB,EAASA,EAAG4B,yBAAyBrP,aAA0B,IAAP0N,GAAgBA,GAEnM,OADAI,EAAOW,oBAAsBA,GACtB,CAEX,CAKF,CAJE,MAAOhQ,GACP0Q,EAAW9Q,EAAEI,EACf,CAAE,QACA0Q,EAAW5Q,GACb,CACAuP,EAAOW,oBAAsBA,CAC/B,CACF,CAMF,CAJE,MAAOhQ,GACPiQ,EAAWrQ,EAAEI,EACf,CAAE,QACAiQ,EAAWnQ,GACb,CACA,IACE+Q,EADEC,EAAa7S,EAA2BsD,KAAKwC,sBAAsBd,YAEvE,IACE,IAAK6N,EAAWrR,MAAOoR,EAASC,EAAWnS,KAAKe,MAAO,CACrD,IAAIqR,EAAMF,EAAOlR,MACjB,GAAIoR,EAAIlF,OAASkF,EAAIlF,KAAKlE,QAAQxF,GAChC,OAAO,CAEX,CAKF,CAJE,MAAOnC,GACP8Q,EAAWlR,EAAEI,EACf,CAAE,QACA8Q,EAAWhR,GACb,CACA,OAAO,CACT,GAIC,CACDsI,IAAK,mBACLC,IAAK,WACH,OAAO9G,KAAKwC,sBAAsBlB,iBACpC,GAKC,CACDuF,IAAK,gBACLzI,MAAO,WAEL,OADA4B,KAAKwC,sBAAsBlB,mBAAoB,EACxCtB,IACT,GAKC,CACD6G,IAAK,kBACLzI,MAAO,WAEL,OADA4B,KAAKwC,sBAAsBlB,mBAAoB,EACxCtB,IACT,GAIC,CACD6G,IAAK,yBACLE,IAAK,SAAagB,GAChB/H,KAAK6C,qBAAqB4M,uBAAyB1H,CACrD,GAGC,CACDlB,IAAK,eACLzI,MAAO,WACL,IAAIwM,EAAmB5K,KAAKwC,sBACxBkN,EAAgB1P,KAAKoD,WAAWuM,cACpC,OAAI/E,EAAiBnJ,iBAAmBiO,IAGxC9E,EAAiBnJ,eAAiBiO,EAClC1P,KAAK6C,qBAAqBxC,iBAAmB,MAHpCL,IAKX,GAIC,CACD6G,IAAK,uCACLzI,MAAO,SAA8CwR,GAInD,OAHI5P,KAAK6C,qBAAqBxC,mBAC5BL,KAAK6C,qBAAqBxC,iBAAiBwP,4BAA8BD,GAEpE5P,IACT,GAIC,CACD6G,IAAK,+BACLzI,MAAO,SAAsCoK,EAAUoH,GAerD,OAdK5P,KAAK6C,qBAAqBxC,mBAC7BL,KAAK6C,qBAAqBxC,iBAAmB,CAC3CyP,gBAAiBF,EACjBG,oBAAqB/P,KAAKgQ,YAGzBhQ,KAAK6C,qBAAqBxC,iBAAiBuP,UACKzN,IAA/CnC,KAAK6C,qBAAqBoN,kBAAkCjQ,KAAK6C,qBAAqBqN,WACxFlQ,KAAK6C,qBAAqBxC,iBAAiBL,KAAK6C,qBAAqBoN,kBAAoB,MAE3FjQ,KAAK6C,qBAAqBoN,iBAAmBL,EAC7C5P,KAAK6C,qBAAqBxC,iBAAiBuP,GAAY,IAAI5S,OAE7DgD,KAAK6C,qBAAqBxC,iBAAiBuP,GAAUnF,KAAKjC,GACnDxI,IACT,GACC,CACD6G,IAAK,2BACLzI,MAAO,YACL,QAAK,OAAgB0D,EAAKxE,WAAY,2BAA4B0C,MAAMxC,KAAKwC,MACxEA,KAAK+N,mBAGL/N,KAAKmQ,uBACRnQ,KAAKoQ,iCAAgC,GAEzC,GAEC,CACDvJ,IAAK,gBACLzI,MAAO,WACD4B,KAAKqQ,yBAA2BrQ,KAAKsQ,eAAiBtQ,KAAKsQ,cAAc9L,WAAaxE,KAAKuQ,kBAC7FvQ,KAAKuQ,gBAAgBC,gBAAgBC,gBAAgBzQ,KAAKsQ,eAC1DtQ,KAAKsQ,cAAcI,gBAAgBjG,KAAKzK,KAAK2Q,kBAEjD,GAQC,CACD9J,IAAK,sBACLzI,MAAO,WACL,IAAIwS,EAAgB3Q,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC/E4Q,EAAa5Q,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAChF,GAAID,KAAK8Q,iBAAmB9Q,KAAKiL,kBAAkB8F,SACjD,OAAO/Q,KAET,IAAIgR,EAAOhR,KAAKiR,SAAWjR,KAAKiR,SAASC,aAAe,KAExD,OADAlR,KAAKmR,qBAAqBnR,KAAKoR,iBAAiBR,EAAeC,GAAaG,GACrEhR,IACT,GAIC,CACD6G,IAAK,uBACLzI,MAAO,SAA8BiT,GACnC,IAAIC,EAAgBtR,KAAKyI,mBACzB,IAAK6I,IAAkBtR,KAAK2J,aAC1B,OAAO,KAGT,GAAI3J,KAAK6N,WAAa7N,KAAK6N,UAAU9P,OAAS,EAAG,CAC/C,IAAI2L,EAAK1J,KAAK2J,aACd,IAAKD,EACH,OAAO,KAET,IAAI6H,EAAe7H,EAAG3L,OAClByT,GAAiB,EACrB,GAAIH,EACFG,GAAiB,MACZ,CACL,IACEC,EADEC,EAAahV,EAA2BsD,KAAK6N,WAEjD,IACE,IAAK6D,EAAWxT,MAAOuT,EAASC,EAAWtU,KAAKe,MAAO,CACrD,IAAIwT,EAAUF,EAAOrT,MACrB,GAAIuT,EAAQC,WAAaD,EAAQE,WAAaN,EAAc,CAC1DC,GAAiB,EACjB,KACF,CACA,GAAIG,EAAQG,cAAgBH,EAAQI,cAAgBT,EAAe,CACjEE,GAAiB,EACjB,KACF,CACF,CAKF,CAJE,MAAO/S,GACPiT,EAAWrT,EAAEI,EACf,CAAE,QACAiT,EAAWnT,GACb,CACF,CACA,IAAKiT,EACH,OAAOxR,KAAK6N,UAAU,EAE1B,CAEA,OADA7N,KAAKgS,mBACE,IAAI,IAAQ,EAAG,EAAGV,EAAe,EAAGtR,KAAKsN,kBAAmBtN,KACrE,GAKC,CACD6G,IAAK,YACLzI,MAAO,SAAmB2J,GACxB,KAAIA,EAAQ,GAAZ,CAOA,IAJA,IAAIwJ,EAAevR,KAAKsN,kBACpB2E,EAAkBV,EAAexJ,EAAQ,EACzCmK,EAAS,EAEND,EAAkB,GAAM,GAC7BA,IAEFjS,KAAKgS,mBACL,IAAK,IAAIjN,EAAQ,EAAGA,EAAQgD,KACtBmK,GAAUX,GADmBxM,IAIjC,sBAA0B,EAAGmN,EAAQnN,IAAUgD,EAAQ,EAAIwJ,EAAeW,EAASD,EAAiBjS,MACpGkS,GAAUD,EAEZjS,KAAKmS,sBAhBL,CAiBF,GAqBC,CACDtL,IAAK,kBACLzI,MAAO,SAAyBgO,EAAMI,GACpC,IAAI4F,EAAYnS,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC3EoS,EAASpS,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EACnD,GAAKnC,KAAK4C,UAMR5C,KAAK4C,UAAUuE,gBAAgBiF,EAAMI,EAAM4F,EAAWC,OANnC,CACnB,IAAIC,EAAa,IAAI,IACrBA,EAAWvL,IAAIyF,EAAMJ,GACrB,IAAIlK,EAAQlC,KAAKoD,WACjB,IAAI,IAAS,eAAqBlB,EAAOoQ,EAAYF,EAAWpS,KAClE,CAGA,OAAOA,IACT,GAiBC,CACD6G,IAAK,qBACLzI,MAAO,SAA4BgO,GAC5BpM,KAAK4C,WAGV5C,KAAK4C,UAAU2P,mBAAmBnG,EACpC,GAkBC,CACDvF,IAAK,8BACLzI,MAAO,SAAqCgO,GAC1C,IAAIgG,IAAYnS,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAC3E2J,EAAK5J,KAAK6M,gBAAgBT,GACzBxC,GAAMA,EAAGqD,gBAAkBmF,GAGhCpS,KAAKmH,gBAAgBiF,EAAMpM,KAAK6J,gBAAgBuC,GAAOgG,EACzD,GAOC,CACDvL,IAAK,oBACLzI,MAAO,SAA2BoU,GAChC,IAAIC,IAAwBxS,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAK3F,OAJKD,KAAK4C,YACR5C,KAAK4C,UAAY,0BAA+B5C,OAElDA,KAAK4C,UAAU8P,kBAAkBF,EAAQ,KAAMC,GACxCzS,IACT,GAqBC,CACD6G,IAAK,qBACLzI,MAAO,SAA4BgO,EAAMI,EAAMmG,EAAeC,GAC5D,OAAK5S,KAAK4C,WAGLgQ,GAGH5S,KAAK6S,qBACL7S,KAAK8S,mBAAmB1G,EAAMI,EAAMmG,GAAe,IAHnD3S,KAAK4C,UAAUkQ,mBAAmB1G,EAAMI,EAAMmG,GAKzC3S,MAREA,IASX,GAQC,CACD6G,IAAK,sBACLzI,MAAO,SAA6B2U,GAClC,IAAIC,IAAiB/S,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAChFgT,EAAYjT,KAAK6J,gBAAgB,kBACrC,IAAKoJ,EACH,OAAOjT,KAIT,GAFA+S,EAAiBE,GACjBjT,KAAK8S,mBAAmB,iBAA2BG,GAAW,GAAO,GACjED,EAAgB,CAClB,IAAIE,EAAUlT,KAAK2J,aACfwJ,EAAUnT,KAAK6J,gBAAgB,gBACnC,IAAKsJ,EACH,OAAOnT,KAET,mBAA0BiT,EAAWC,EAASC,GAC9CnT,KAAK8S,mBAAmB,eAAyBK,GAAS,GAAO,EACnE,CACA,OAAOnT,IACT,GAKC,CACD6G,IAAK,qBACLzI,MAAO,WACL,IAAK4B,KAAK4C,UACR,OAAO5C,KAET,GAAqC,IAAjCA,KAAK4C,UAAUgK,OAAO7O,OACxB,OAAOiC,KAET,IAAIoT,EAAcpT,KAAK4C,UACnBqO,EAAWjR,KAAK4C,UAAUyQ,KAAK,gBAGnC,OAFAD,EAAYE,eAAetT,MAAM,GACjCiR,EAASrN,YAAY5D,MACdA,IACT,GAQC,CACD6G,IAAK,aACLzI,MAAO,SAAoB8U,GACzB,IAAI5B,EAAgBrR,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KACpFmS,EAAYnS,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC/E,GAAKD,KAAK4C,UAMR5C,KAAK4C,UAAU2Q,WAAWL,EAAS5B,EAAec,OAN/B,CACnB,IAAIE,EAAa,IAAI,IACrBA,EAAWY,QAAUA,EACrB,IAAIhR,EAAQlC,KAAKoD,WACjB,IAAI,IAAS,eAAqBlB,EAAOoQ,EAAYF,EAAWpS,KAClE,CAGA,OAAOA,IACT,GAQC,CACD6G,IAAK,gBACLzI,MAAO,SAAuB8U,EAAShB,GACrC,IAAIsB,EAAgBvT,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GACnF,OAAKD,KAAK4C,WAGV5C,KAAK4C,UAAU6Q,cAAcP,EAAShB,EAAQsB,GACvCxT,MAHEA,IAIX,GAKC,CACD6G,IAAK,eACLzI,MAAO,WACL,OAAK4B,KAAK4C,WAGV5C,KAAK4C,UAAU8Q,eACR1T,MAHEA,IAIX,GAIC,CACD6G,IAAK,QACLzI,MAAO,SAAeiQ,EAASsF,EAAQC,GACrC,IAAK5T,KAAK4C,UACR,OAAO5C,KAET,IAMI6T,EANA/F,EAAS9N,KAAKoD,WAAW0C,YAO7B,GALI9F,KAAKiF,oBAAsBjF,KAAKiF,mBAAmB6O,0BACrD9T,KAAKiF,mBAAmB8O,MAAMJ,GAI5B3T,KAAKgI,WACP6L,EAAc,UAEd,OAAQD,GACN,KAAK,kBACHC,EAAc,KACd,MACF,KAAK,sBACHA,EAAcxF,EAAQ2F,qBAAqBhU,KAAK2J,aAAcmE,GAC9D,MACF,QACA,KAAK,qBACH+F,EAAc7T,KAAK4C,UAAUqR,iBAUnC,OALKjU,KAAKyM,8BAAgCzM,KAAK+N,iBAC7C/N,KAAK4C,UAAUmR,MAAMJ,EAAQE,GAE7B7T,KAAK4C,UAAUmR,MAAMJ,EAAQE,EAAa7T,KAAKyM,6BAA6BC,cAAe1M,KAAKyM,6BAA6ByH,oBAExHlU,IACT,GAIC,CACD6G,IAAK,QACLzI,MAAO,SAAeiQ,EAASuF,EAAU9S,GACvC,IAAKd,KAAK4C,YAAc5C,KAAK4C,UAAUuR,qBAAuBnU,KAAKgI,aAAehI,KAAK4C,UAAUqR,iBAC/F,OAAOjU,KAELA,KAAKwC,sBAAsBkF,yBAC7B1H,KAAKwC,sBAAsBkF,wBAAwBpB,gBAAgBtG,MAErE,IACI8N,EADQ9N,KAAKoD,WACE0C,YAUnB,OATI9F,KAAKgI,YAAc4L,GAAY,kBAEjC9F,EAAOsG,eAAeR,EAAUvF,EAAQyD,cAAezD,EAAQ0D,cAAe/R,KAAKqU,qBAAuBvT,GACjG8S,GAAY,sBAErB9F,EAAOwG,iBAAiBV,EAAU,EAAGvF,EAAQkG,iBAAkBvU,KAAKqU,qBAAuBvT,GAE3FgN,EAAOwG,iBAAiBV,EAAUvF,EAAQuD,WAAYvD,EAAQwD,WAAY7R,KAAKqU,qBAAuBvT,GAEjGd,IACT,GAMC,CACD6G,IAAK,uBACLzI,MAAO,SAA8BoW,GAEnC,OADAxU,KAAKyG,yBAAyBC,IAAI8N,GAC3BxU,IACT,GAMC,CACD6G,IAAK,yBACLzI,MAAO,SAAgCoW,GAErC,OADAxU,KAAKyG,yBAAyBgO,eAAeD,GACtCxU,IACT,GAMC,CACD6G,IAAK,sBACLzI,MAAO,SAA6BoW,GAElC,OADAxU,KAAK0U,wBAAwBhO,IAAI8N,GAC1BxU,IACT,GAMC,CACD6G,IAAK,wBACLzI,MAAO,SAA+BoW,GAEpC,OADAxU,KAAK0U,wBAAwBD,eAAeD,GACrCxU,IACT,GAIC,CACD6G,IAAK,0BACLzI,MAAO,SAAiCuW,GACtC,IAAIC,EAAoB3U,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GACvF,GAAID,KAAK6C,qBAAqBqN,SAAU,CACtC,GAAI0E,EAGF,OAFA5U,KAAK6C,qBAAqBrC,sCAAsCI,2BAA2B+T,IAAa,EACxG3U,KAAK6C,qBAAqBrC,sCAAsCG,WAAWgU,IAAa,EACjF3U,KAAK6C,qBAAqBrC,sCAEnC,GAAIR,KAAK6C,qBAAqBgS,cAC5B,OAAO7U,KAAK6C,qBAAqBgS,aAErC,CACA,IAAI3S,EAAQlC,KAAKoD,WACb0R,EAA4B5S,EAAM6S,6BAClCC,EAAmBF,EAA4B9U,KAAKgH,8BAA8BiO,8BAAgCjV,KAAKgH,8BAA8BkO,kBACrJ5U,EAAaN,KAAK6C,qBAAqBvC,WAI3C,GAHAA,EAAWI,YAAa,EACxBJ,EAAWK,WAAWgU,GAAaC,IAAsBI,GAAoBhV,KAAKwE,aAAexE,KAAKmV,UACtG7U,EAAWD,iBAAiBsU,GAAa,KACrC3U,KAAK6C,qBAAqBxC,mBAAqBuU,EAAmB,CACpE,IAAIvU,EAAmBL,KAAK6C,qBAAqBxC,iBAC7C+U,EAAkBlT,EAAMyN,cACxBG,EAAkBgF,EAA4BzU,EAAiBwP,4BAA8BxP,EAAiByP,gBAClHxP,EAAWD,iBAAiBsU,GAAatU,EAAiB+U,IACrD9U,EAAWD,iBAAiBsU,IAAc7E,IAC7CxP,EAAWD,iBAAiBsU,GAAatU,EAAiByP,GAE9D,CAGA,OAFAxP,EAAWM,2BAA2B+T,IAAcC,GAAqB5U,KAAK6C,qBAAqBjC,4BAAyE,OAA3CN,EAAWD,iBAAiBsU,SAAkExS,IAA3C7B,EAAWD,iBAAiBsU,GAChN3U,KAAK6C,qBAAqBgS,cAAgBvU,EACnCA,CACT,GAIC,CACDuG,IAAK,uBACLzI,MAAO,SAA8BiQ,EAASuF,EAAUyB,EAAO1B,EAAQ7F,GAUrE,IATA,IAAIhG,EACAzH,EAAmBgV,EAAMhV,iBAAiBgO,EAAQiH,KAClDC,EAAuBlV,EAAmBA,EAAiBtC,OAAS,EACpEyX,EAAkBxV,KAAK6C,qBACvB4S,EAA6BD,EAAgB/U,oBAC7CiV,EAAkBF,EAAgBE,gBAClCC,EAA0BH,EAAgBG,wBAE1CC,EAA6B,IADbL,EAAuB,GACL,EAC/BC,EAAgB/U,oBAAsBmV,GAC3CJ,EAAgB/U,qBAAuB,EAEpC+U,EAAgBvN,eAAiBwN,GAA8BD,EAAgB/U,sBAClF+U,EAAgBvN,cAAgB,IAAI4N,aAAaL,EAAgB/U,oBAAsB,KAErFT,KAAKwG,OAAOsP,6BAA+BN,EAAgBtN,uBAAyBuN,GAA8BD,EAAgB/U,uBACpI+U,EAAgBtN,sBAAwB,IAAI2N,aAAaL,EAAgB/U,oBAAsB,IAEjG,IAAIyR,EAAS,EACTpR,EAAiB,EACjBH,EAAa0U,EAAM1U,WAAW0N,EAAQiH,KACtCS,GAAoBL,GAAmBD,IAA+BD,EAAgB/U,qBAAuBT,KAAKwG,OAAOsP,6BAA+BN,EAAgBG,wBAC5K,GAAK3V,KAAK6C,qBAAqBsF,cAAkBqN,EAAgBtF,WAAY6F,EA6C3EjV,GAAkBH,EAAa,EAAI,GAAK4U,MA7CsD,CAC9F,IAAIhS,EAAQvD,KAAK2Q,iBAejB,GAdIhQ,IACEX,KAAKwG,OAAOsP,6BACTN,EAAgBQ,+BAInBR,EAAgBQ,8BAA8BC,YAAYT,EAAgBtN,sBAAuBgK,GACjGsD,EAAgBQ,8BAA8BE,SAAS3S,KAJvDiS,EAAgBQ,8BAAgCzS,EAAMe,QACtDkR,EAAgBQ,8BAA8BC,YAAYT,EAAgBtN,sBAAuBgK,KAMrG3O,EAAM0S,YAAYT,EAAgBvN,cAAeiK,GACjDA,GAAU,GACVpR,KAEET,EAAkB,CACpB,GAAIyB,EAAKqU,gCAAkCnW,KAAKwG,OAAO4P,eAAkD,QAAhCtO,EAAKuG,EAAQC,qBAAkC,IAAPxG,OAAgB,EAASA,EAAGuH,yBAAyBhB,EAAQgI,qBAAsB,CAElM,IADA,IAAIC,EAAiBtW,KAAKwG,OAAO4P,aAAa7K,eACrCgL,EAAgB,EAAGA,EAAgBlW,EAAiBtC,OAAQwY,IAAiB,CACpF,IAAIC,EAAenW,EAAiBkW,GACpCC,EAAaC,kBAAoB,aAAiBD,EAAavL,kBAAkBF,eAAeM,YAAaiL,EAC/G,CACAjW,EAAiB6J,MAAK,SAAUwM,EAAIC,GAClC,OAAOD,EAAGD,kBAAoBE,EAAGF,mBAAqB,EAAIC,EAAGD,kBAAoBE,EAAGF,kBAAoB,EAAI,CAC9G,GACF,CACA,IAAK,IAAIG,EAAiB,EAAGA,EAAiBvW,EAAiBtC,OAAQ6Y,IAAkB,CACvF,IAAIpO,EAAWnI,EAAiBuW,GAC5BC,EAASrO,EAASmI,iBACtBkG,EAAOZ,YAAYT,EAAgBvN,cAAeiK,GAC9ClS,KAAKwG,OAAOsP,6BACTtN,EAASsO,sBAIZtO,EAASsO,qBAAqBb,YAAYT,EAAgBtN,sBAAuBgK,GACjF1J,EAASsO,qBAAqBZ,SAASW,KAJvCrO,EAASsO,qBAAuBD,EAAOvS,QACvCkE,EAASsO,qBAAqBb,YAAYT,EAAgBtN,sBAAuBgK,KAMrFA,GAAU,GACVpR,GACF,CACF,CACF,CA0DA,OAvDIiV,GACEL,GACFA,EAAgBqB,UAEdpB,GACFA,EAAwBoB,UAE1BrB,EAAkB,IAAI,IAAO5H,EAAQ0H,EAAgBvN,eAAe,EAAM,IAAI,GAAO,GACrFuN,EAAgBE,gBAAkBA,EAC7B1V,KAAKyM,+BACRzM,KAAKyM,6BAA+B,CAClCD,KAAM,CAAC,EACPE,cAAe,CAAC,EAChBsK,QAAS,CAAC,EACVC,MAAO,CAAC,EACR/C,mBAAoBlU,KAAK8F,YAAYC,UAAUmR,kBAAoB,CAAC,OAAI/U,IAG5EnC,KAAKyM,6BAA6BC,cAAsB,OAAIgJ,EAAgByB,mBAAmB,SAAU,EAAG,GAC5GnX,KAAKyM,6BAA6BC,cAAsB,OAAIgJ,EAAgByB,mBAAmB,SAAU,EAAG,GAC5GnX,KAAKyM,6BAA6BC,cAAsB,OAAIgJ,EAAgByB,mBAAmB,SAAU,EAAG,GAC5GnX,KAAKyM,6BAA6BC,cAAsB,OAAIgJ,EAAgByB,mBAAmB,SAAU,GAAI,GACzGnX,KAAKwG,OAAOsP,6BACdH,EAA0B,IAAI,IAAO7H,EAAQ0H,EAAgBtN,uBAAuB,EAAM,IAAI,GAAO,GACrGsN,EAAgBG,wBAA0BA,EAC1C3V,KAAKyM,6BAA6BC,cAA8B,eAAIiJ,EAAwBwB,mBAAmB,iBAAkB,EAAG,GACpInX,KAAKyM,6BAA6BC,cAA8B,eAAIiJ,EAAwBwB,mBAAmB,iBAAkB,EAAG,GACpInX,KAAKyM,6BAA6BC,cAA8B,eAAIiJ,EAAwBwB,mBAAmB,iBAAkB,EAAG,GACpInX,KAAKyM,6BAA6BC,cAA8B,eAAIiJ,EAAwBwB,mBAAmB,iBAAkB,GAAI,IAEvInX,KAAKoX,wCAEApX,KAAK6C,qBAAqBqN,WAC7BwF,EAAgB2B,eAAe7B,EAAgBvN,cAAe,EAAGnH,IAC7Dd,KAAKwG,OAAOsP,4BAAgC9V,KAAK6C,qBAAqBsF,eAAgBnI,KAAK6C,qBAAqBuF,sBAClHuN,EAAwB0B,eAAe7B,EAAgBtN,sBAAuB,EAAGpH,IAIvFd,KAAKsX,yBAAyBjX,EAAkBM,GAEhDX,KAAKoD,WAAWmU,eAAeC,SAASnJ,EAAQwD,WAAa/Q,GAAgB,GAEzEgN,EAAO2J,sBACT3J,EAAO2J,oBAAoBC,eAAgB,GAE7C1X,KAAK+T,MAAM1F,EAASsF,EAAQC,GAC5B5T,KAAK2X,MAAMtJ,EAASuF,EAAU9S,IAI1Bd,KAAKwG,OAAOsP,4BAA+BC,IAAoB/V,KAAK6C,qBAAqBsF,cAAiBnI,KAAK6C,qBAAqBqN,UAAalQ,KAAK6C,qBAAqBuF,sBAC7KuN,EAAwB0B,eAAe7B,EAAgBvN,cAAe,EAAGnH,GAE3EgN,EAAO8J,2BACA5X,IACT,GAIC,CACD6G,IAAK,2BACLzI,MAAO,SAAkCiQ,EAASuF,EAAUD,EAAQ7F,GAClE,IAAIhG,EAAIyE,EAEJzL,EAAwH,QAAtGyL,EAA8C,QAAxCzE,EAAK9H,KAAK8C,gCAA6C,IAAPgF,OAAgB,EAASA,EAAGhH,sBAAmC,IAAPyL,EAAgBA,EAAK,EACzJvM,KAAKoD,WAAWmU,eAAeC,SAASnJ,EAAQwD,WAAa/Q,GAAgB,GAEzEgN,EAAO2J,sBACT3J,EAAO2J,oBAAoBC,eAAgB,GAE7C1X,KAAK+T,MAAM1F,EAASsF,EAAQC,GAC5B5T,KAAK2X,MAAMtJ,EAASuF,EAAU9S,GAI1Bd,KAAKwG,OAAOsP,6BAA+B9V,KAAK8C,yBAAyB+U,oBAAsB7X,KAAK8C,yBAAyB5B,aAC1HlB,KAAK8C,yBAAyB9B,qBAGjChB,KAAK8C,yBAAyB9B,qBAAqBqW,eAAerX,KAAK8C,yBAAyB5B,WAAY,EAAGJ,GAF/Gd,KAAK8C,yBAAyB9B,qBAAuBhB,KAAK8X,gCAAgC,gBAAiB9X,KAAK8C,yBAAyB5B,YAAY,IAKzJ4M,EAAO8J,0BACT,GAKC,CACD/Q,IAAK,2BACLzI,MAAO,SAAkCiC,EAAkBM,GAE3D,GAIC,CACDkG,IAAK,oBACLzI,MAAO,SAA2B2Z,EAAe1J,EAASsF,EAAQC,EAAUyB,EAAOzU,EAA4BoX,EAAcxU,GAC3H,IAAItB,EAAQlC,KAAKoD,WACb0K,EAAS5L,EAAM4D,YACnB,GAAIlF,GAA8ByN,EAAQgI,mBAAmBtI,iBAE3D,OADA/N,KAAKiY,yBAAyB5J,EAASuF,EAAUD,EAAQ7F,GAClD9N,KAET,GAAIY,EACFZ,KAAKkY,qBAAqB7J,EAASuF,EAAUyB,EAAO1B,EAAQ7F,OACvD,CACDA,EAAO2J,sBACT3J,EAAO2J,oBAAoBC,eAAgB,GAE7C,IAAIS,EAAgB,EAChB9C,EAAM1U,WAAW0N,EAAQiH,OAEvB0C,GACFA,GAAa,EAAOD,EAAcpH,iBAAkBnN,GAEtD2U,IACAnY,KAAK2X,MAAMtJ,EAASuF,EAAU5T,KAAK6C,qBAAqB4M,yBAE1D,IAAI2I,EAA6B/C,EAAMhV,iBAAiBgO,EAAQiH,KAChE,GAAI8C,EAA4B,CAC9B,IAAI7C,EAAuB6C,EAA2Bra,OACtDoa,GAAiB5C,EAEjB,IAAK,IAAIgB,EAAgB,EAAGA,EAAgBhB,EAAsBgB,IAAiB,CACjF,IAEIhT,EAFW6U,EAA2B7B,GAErB5F,iBACjBqH,GACFA,GAAa,EAAMzU,EAAOC,GAG5BxD,KAAK2X,MAAMtJ,EAASuF,EACtB,CACF,CAEA1R,EAAMqV,eAAeC,SAASnJ,EAAQwD,WAAasG,GAAe,EACpE,CACA,OAAOnY,IACT,GAIC,CACD6G,IAAK,WACLzI,MAAO,WACL,IAAI2Y,EAAU9W,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAQ7E,GAPID,KAAK6C,qBAAqB6S,kBAExBqB,GACF/W,KAAK6C,qBAAqB6S,gBAAgBqB,UAE5C/W,KAAK6C,qBAAqB6S,gBAAkB,MAE1C1V,KAAKyM,6BAA8B,CACrC,IAAK,IAAIL,KAAQpM,KAAKyM,6BAA6BC,cAAe,CAChE,IAAI8F,EAASxS,KAAKyM,6BAA6BC,cAAcN,GACzDoG,IAEEuE,GACFvE,EAAOuE,UAET/W,KAAKyM,6BAA6BC,cAAcN,GAAQ,KAE5D,CACIpM,KAAKyM,6BAA6ByH,qBACpClU,KAAKyM,6BAA6ByH,mBAAqB,CAAC,EAE5D,CACAlU,KAAKwC,sBAAsBZ,mBAAqB,MAChD,QAAK,OAAgBE,EAAKxE,WAAY,WAAY0C,MAAMxC,KAAKwC,KAAM+W,EACrE,GAEC,CACDlQ,IAAK,UACLzI,MAAO,WACL,GAAK4B,KAAK6N,UAAV,CAIA,IAAK,IAAI9I,EAAQ,EAAGA,EAAQ/E,KAAK6N,UAAU9P,OAAQgH,IACjD/E,KAAKqY,wBAAwBtT,GAE/B/E,KAAKwC,sBAAsBZ,mBAAqB,KAChD5B,KAAK6C,qBAAqBqN,UAAW,CANrC,CAOF,GAEC,CACDrJ,IAAK,YACLzI,MAAO,WACL4B,KAAK6C,qBAAqBqN,UAAW,EACrClQ,KAAK6C,qBAAqBgS,cAAgB,IAC5C,GAQC,CACDhO,IAAK,SACLzI,MAAO,SAAgBiQ,EAASiK,EAAiBC,GAC/C,IAAIzQ,EAAIyE,EAAIgB,EACRrL,EAAQlC,KAAKoD,WAMjB,GALIpD,KAAKgH,8BAA8BwR,sBACrCxY,KAAKgH,8BAA8BwR,uBAAwB,EAE3DxY,KAAKgH,8BAA8ByR,WAAY,EAE7CzY,KAAK0Y,yBAA2B1Y,KAAK2Y,sBAAsBC,2BAC7D,OAAO5Y,KAGT,IAAIqV,EAAQrV,KAAKqY,wBAAwBhK,EAAQiH,MAAOiD,GACxD,GAAIlD,EAAM3U,WACR,OAAOV,KAGT,IAAKA,KAAK4C,YAAc5C,KAAK4C,UAAUuR,qBAAuBnU,KAAKgI,aAAehI,KAAK4C,UAAUqR,iBAC/F,OAAOjU,KAET,IAAI8N,EAAS5L,EAAM4D,YACf+S,EAAgB,EAChBC,EAAY,KACZ9Y,KAAKmD,kBAAoBjB,EAAMkU,eAAiBlU,EAAM6S,+BACxD8D,EAAgB3W,EAAMkU,aAAa2C,KACnCD,EAAY5W,EAAMkU,aAClBlU,EAAMkU,aAAa2C,KAAO,EAC1B7W,EAAM8W,uBAAsB,IAE1BhZ,KAAKwC,sBAAsB8E,2BAC7BtH,KAAKwC,sBAAsB8E,0BAA0BhB,gBAAgBtG,MAEvE,IAwCIiZ,EAxCAlB,EAAgB1J,EAAQgI,mBACxBzV,EAA6ByU,EAAMzU,2BAA2ByN,EAAQiH,MAAQyC,EAAchK,oBAAsB/N,KAAKyM,+BAAiC4B,EAAQ6K,UAAUlS,8BAA8BmS,kBACxMC,EAAsBpZ,KAAK6C,qBAC3B+B,EAAWyJ,EAAQC,cACvB,IAAK1J,EAKH,OAJIkU,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAEvBhZ,KAGT,GAAKoZ,EAAoBlJ,UAAalQ,KAAKwC,sBAAsBZ,oBAAsB5B,KAAKwC,sBAAsBZ,qBAAuBgD,GAiBlI,GAAIA,EAASsJ,2BAAuD,QAAzBpG,EAAKuG,EAAQsF,cAA2B,IAAP7L,OAAgB,EAASA,EAAGuR,uBAAyBzU,EAASsJ,2BAA6D,QAA/B3B,EAAK3H,EAAS0U,mBAAgC,IAAP/M,OAAgB,EAASA,EAAG8M,qBAKhP,OAJIP,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAEvBhZ,SAtB0I,CACjJ,GAAI4E,EAASsJ,yBACX,IAAKtJ,EAAS2J,kBAAkBvO,KAAMqO,EAASzN,GAK7C,OAJIkY,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAEvBhZ,UAEJ,IAAK4E,EAASwB,QAAQpG,KAAMY,GAKjC,OAJIkY,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAEvBhZ,KAETA,KAAKwC,sBAAsBZ,mBAAqBgD,CAClD,CAQI0T,GACFxK,EAAOyL,aAAavZ,KAAKwC,sBAAsBZ,mBAAmB4X,WAQpE,IAEEC,EAFE9F,EAAiG,QAAvFpG,EAAK0L,OAJjBA,EADEjZ,KAAKwC,sBAAsBZ,mBAAmBsM,wBAClCG,EAAQqL,aAER1Z,KAAKwC,sBAAsBZ,mBAAmB+X,wBAEM,EAASV,EAAYtF,cAA2B,IAAPpG,EAAgBA,EAAK,KAC9HqM,EAAald,EAA2BwF,EAAM2X,2BAElD,IACE,IAAKD,EAAW1b,MAAOub,EAASG,EAAWxc,KAAKe,MAAO,CAC1Csb,EAAOrb,MACb0b,OAAO9Z,KAAMqO,EAASgH,EAAO1B,EACpC,CAKF,CAJE,MAAOlV,GACPmb,EAAWvb,EAAEI,EACf,CAAE,QACAmb,EAAWrb,GACb,CACA,IAAK0a,IAAgBtF,EAKnB,OAJImF,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAEvBhZ,KAET,IACI+Z,EADAC,EAAgBzB,GAA4BvY,KAEhD,GAAKoZ,EAAoBlJ,WAAalQ,KAAKwC,sBAAsBZ,mBAAmBqY,iBAA4D,OAAzCja,KAAKkD,gCAW1G6W,EAAkBX,EAAoBW,oBAX+G,CACrJ,IAAIG,EAAkBF,EAAcG,6BAEb,OADvBJ,EAAkB/Z,KAAKkD,mCAErB6W,EAAkB/Z,KAAKwC,sBAAsBZ,mBAAmBmY,iBAE9DG,EAAkB,IACpBH,EAAkBA,IAAoB,6BAAoC,oCAA2C,8BAEvHX,EAAoBW,gBAAkBA,CACxC,CAGA,IAAIK,EAAUpa,KAAKwC,sBAAsBZ,mBAAmByY,SAASpB,EAAac,GAC9E/Z,KAAKwC,sBAAsBZ,mBAAmB0Y,iBAChDxM,EAAOyM,eAAc,GAGvB,IAAI3G,EAAW1R,EAAMsY,iBAAmB,kBAAyBtY,EAAMuY,eAAiB,sBAA6Bza,KAAKwC,sBAAsBZ,mBAAmBgS,SAC/J5T,KAAKwC,sBAAsB+E,yBAC7BvH,KAAKwC,sBAAsB+E,wBAAwBjB,gBAAgBtG,MAEhEY,GAEHZ,KAAK+T,MAAM1F,EAASsF,EAAQC,GAE9B,IAAIpQ,EAAoBxD,KAAKwC,sBAAsBZ,mBAC/C2B,EAAQyW,EAAcrJ,iBACtBnN,EAAkB0K,wBACpB1K,EAAkBkX,eAAenX,EAAOvD,KAAMqO,GAE9C7K,EAAkBmX,KAAKpX,EAAOvD,OAE3BwD,EAAkByW,iBAAmBzW,EAAkBoX,sBAC1D9M,EAAO+M,UAAS,EAAMrX,EAAkBsX,SAAS,GAAQV,EAAS5W,EAAkBuX,cAAevX,EAAkBwX,QAASxX,EAAkByX,cAChJjb,KAAKkb,kBAAkBlb,KAAMqO,EAASsF,EAAQC,EAAUyB,EAAOzU,EAA4BZ,KAAKqD,cAAerD,KAAKwC,sBAAsBZ,oBAC1IkM,EAAO+M,UAAS,EAAMrX,EAAkBsX,SAAS,EAAOV,EAAS5W,EAAkBuX,cAAevX,EAAkBwX,QAASxX,EAAkByX,cAC3Ijb,KAAKwC,sBAAsBiF,0BAC7BzH,KAAKwC,sBAAsBiF,yBAAyBnB,gBAAgB+H,IAIxErO,KAAKkb,kBAAkBlb,KAAMqO,EAASsF,EAAQC,EAAUyB,EAAOzU,EAA4BZ,KAAKqD,cAAerD,KAAKwC,sBAAsBZ,oBAE1I5B,KAAKwC,sBAAsBZ,mBAAmBuZ,SAC9C,IACEC,EADEC,EAAa3e,EAA2BwF,EAAMoZ,0BAElD,IACE,IAAKD,EAAWnd,MAAOkd,EAASC,EAAWje,KAAKe,MAAO,CACvCid,EAAOhd,MACb0b,OAAO9Z,KAAMqO,EAASgH,EAAO1B,EACvC,CAKF,CAJE,MAAOlV,GACP4c,EAAWhd,EAAEI,EACf,CAAE,QACA4c,EAAW9c,GACb,CAWA,OAVIyB,KAAKwC,sBAAsBgF,0BAC7BxH,KAAKwC,sBAAsBgF,yBAAyBlB,gBAAgBtG,MAElE8Y,IACFA,EAAUC,KAAOF,EACjB3W,EAAM8W,uBAAsB,IAE1B9W,EAAMqZ,sBAAwB,gBAAwCnC,EAAoBlJ,UAC5FlQ,KAAKwb,UAEAxb,IACT,GAOC,CACD6G,IAAK,qBACLzI,MAAO,WACD4B,KAAK8M,sBAAsB,2BACzB9M,KAAK8M,sBAAsB,8BAC7B9M,KAAKyb,gCAELzb,KAAK0b,4BAGX,GAEC,CACD7U,IAAK,4BACLzI,MAAO,WAGL,IAFA,IAAIud,EAAkB3b,KAAK6J,gBAAgB,yBACvC+R,EAAaD,EAAgB5d,OACxBoM,EAAI,EAAGA,EAAIyR,EAAYzR,GAAK,EAAG,CAEtC,IAAI0R,EAAIF,EAAgBxR,GAAKwR,EAAgBxR,EAAI,GAAKwR,EAAgBxR,EAAI,GAAKwR,EAAgBxR,EAAI,GAEnG,GAAU,IAAN0R,EACFF,EAAgBxR,GAAK,MAChB,CAEL,IAAI2R,EAAQ,EAAID,EAChBF,EAAgBxR,IAAM2R,EACtBH,EAAgBxR,EAAI,IAAM2R,EAC1BH,EAAgBxR,EAAI,IAAM2R,EAC1BH,EAAgBxR,EAAI,IAAM2R,CAC5B,CACF,CACA9b,KAAKmH,gBAAgB,wBAAkCwU,EACzD,GAEC,CACD9U,IAAK,gCACLzI,MAAO,WAIL,IAHA,IAAI2d,EAAuB/b,KAAK6J,gBAAgB,8BAC5C8R,EAAkB3b,KAAK6J,gBAAgB,yBACvC+R,EAAaD,EAAgB5d,OACxBoM,EAAI,EAAGA,EAAIyR,EAAYzR,GAAK,EAAG,CAEtC,IAAI0R,EAAIF,EAAgBxR,GAAKwR,EAAgBxR,EAAI,GAAKwR,EAAgBxR,EAAI,GAAKwR,EAAgBxR,EAAI,GAGnG,GAAU,KAFV0R,GAAKE,EAAqB5R,GAAK4R,EAAqB5R,EAAI,GAAK4R,EAAqB5R,EAAI,GAAK4R,EAAqB5R,EAAI,IAGlHwR,EAAgBxR,GAAK,MAChB,CAEL,IAAI2R,EAAQ,EAAID,EAChBF,EAAgBxR,IAAM2R,EACtBH,EAAgBxR,EAAI,IAAM2R,EAC1BH,EAAgBxR,EAAI,IAAM2R,EAC1BH,EAAgBxR,EAAI,IAAM2R,EAE1BC,EAAqB5R,IAAM2R,EAC3BC,EAAqB5R,EAAI,IAAM2R,EAC/BC,EAAqB5R,EAAI,IAAM2R,EAC/BC,EAAqB5R,EAAI,IAAM2R,CACjC,CACF,CACA9b,KAAKmH,gBAAgB,wBAAkCwU,GACvD3b,KAAKmH,gBAAgB,wBAAkC4U,EACzD,GAOC,CACDlV,IAAK,mBACLzI,MAAO,WACL,IAAI2d,EAAuB/b,KAAK6J,gBAAgB,8BAC5C8R,EAAkB3b,KAAK6J,gBAAgB,yBAC3C,GAAwB,OAApB8R,GAA6C,MAAjB3b,KAAK2F,SACnC,MAAO,CACLqW,SAAS,EACTC,OAAO,EACPC,OAAQ,eAUZ,IAPA,IAAIN,EAAaD,EAAgB5d,OAC7Boe,EAAkB,EAClBC,EAAiB,EACjBC,EAAiB,EACjBC,EAAsB,EACtBC,EAAyC,OAAzBR,EAAgC,EAAI,EACpDS,EAAmB,IAAIxf,MAClBmN,EAAI,EAAGA,GAAKoS,EAAepS,IAClCqS,EAAiBrS,GAAK,EAGxB,IADA,IACSsS,EAAM,EAAGA,EAAMb,EAAYa,GAAO,EAAG,CAI5C,IAHA,IAAIC,EAAaf,EAAgBc,GAC7BZ,EAAIa,EACJC,EAAoB,IAANd,EAAU,EAAI,EACvBzR,EAAI,EAAGA,EAAImS,EAAenS,IAAK,CACtC,IAAIwS,EAAIxS,EAAI,EAAIuR,EAAgBc,EAAMrS,GAAK2R,EAAqBU,EAAMrS,EAAI,GACtEwS,EAAIF,GACNP,IAEQ,IAANS,GACFD,IAEFd,GAAKe,EACLF,EAAaE,CACf,CAQA,GANAJ,EAAiBG,KAEbA,EAAcN,IAChBA,EAAiBM,GAGT,IAANd,EACFO,QACK,CAIL,IAFA,IAAIN,EAAQ,EAAID,EACZgB,EAAY,EACPC,EAAM,EAAGA,EAAMP,EAAeO,IAEnCD,GADEC,EAAM,EACKjR,KAAKkR,IAAIpB,EAAgBc,EAAMK,GAAOnB,EAAgBc,EAAMK,GAAOhB,GAEnEjQ,KAAKkR,IAAIhB,EAAqBU,EAAMK,EAAM,GAAKf,EAAqBU,EAAMK,EAAM,GAAKhB,GAIlGe,EArCe,MAsCjBP,GAEJ,CACF,CAMA,IAJA,IAAIU,EAAWhd,KAAK2F,SAASsX,MAAMlf,OAC/Bmf,EAAkBld,KAAK6J,gBAAgB,yBACvCsT,EAAuBnd,KAAK6J,gBAAgB,8BAC5CuT,EAAoB,EACfC,EAAM,EAAGA,EAAMzB,EAAYyB,GAAO,EACzC,IAAK,IAAIC,EAAM,EAAGA,EAAMf,EAAee,IAAO,CAC5C,IAAIvY,EAAQuY,EAAM,EAAIJ,EAAgBG,EAAMC,GAAOH,EAAqBE,EAAMC,EAAM,IAChFvY,GAASiY,GAAYjY,EAAQ,IAC/BqY,GAEJ,CAIF,MAAO,CACLpB,SAAS,EACTC,MAA0B,IAAnBG,GAAgD,IAAxBE,GAAmD,IAAtBc,EAC5DlB,OAJW,uBAAyBN,EAAa,EAAI,0BAA4BS,EAAiB,uBAAyBD,EAAiB,kBAAoBD,EAAkB,sBAAwBG,EAAsB,qBAAuBE,EAA5O,wBAA8RQ,EAAW,wBAA0BI,EAMlV,GAEC,CACDvW,IAAK,mBACLzI,MAAO,WACL,IAAI8D,EAAQlC,KAAKoD,WAOjB,OANIpD,KAAK4C,UACP5C,KAAK4C,UAAU2a,KAAKrb,GACa,IAAxBlC,KAAKyC,iBACdzC,KAAKyC,eAAiB,EACtBzC,KAAKwd,WAAWtb,IAEXlC,IACT,GACC,CACD6G,IAAK,aACLzI,MAAO,SAAoB8D,GACzB,IAAIub,EAASzd,KACbkC,EAAMwb,eAAe1d,MACrB,IAAI2d,GAA6E,IAA7D3d,KAAK4d,iBAAiB5Q,QAAQ,0BAclD,OAbA,cAAehN,KAAK4d,kBAAkB,SAAUpR,GAC1CA,aAAgBqR,YAClBJ,EAAOK,sBAAsBtR,EAAMiR,GAEnCA,EAAOK,sBAAsBC,KAAKC,MAAMxR,GAAOiR,GAEjDA,EAAO/a,UAAUyK,SAAQ,SAAU3E,GACjCA,EAAS5C,sBACT4C,EAASyV,gBACX,IACAR,EAAOhb,eAAiB,EACxBP,EAAMgc,kBAAkBT,EAC1B,IAAG,WAAa,GAAGvb,EAAMic,gBAAiBR,GACnC3d,IACT,GAOC,CACD6G,IAAK,cACLzI,MAAO,SAAqBggB,GAC1B,OAA4B,IAAxBpe,KAAKyC,oBAGJ,QAAK,OAAgBX,EAAKxE,WAAY,cAAe0C,MAAMxC,KAAKwC,KAAMoe,KAG3Epe,KAAKgM,oBACE,GACT,GAMC,CACDnF,IAAK,kBACLzI,MAAO,SAAyBuG,GAC9B,IACII,EADAsZ,EAAYre,KAAKoD,WAAWib,UAEhC,IAAKtZ,EAAQsZ,EAAUtgB,OAAS,EAAGgH,GAAS,EAAGA,IAC7C,GAAIsZ,EAAUtZ,GAAOJ,KAAOA,EAE1B,OADA3E,KAAK4E,SAAWyZ,EAAUtZ,GACnB/E,KAIX,IAAIse,EAAiBte,KAAKoD,WAAWkb,eACrC,IAAKvZ,EAAQuZ,EAAevgB,OAAS,EAAGgH,GAAS,EAAGA,IAClD,GAAIuZ,EAAevZ,GAAOJ,KAAOA,EAE/B,OADA3E,KAAK4E,SAAW0Z,EAAevZ,GACxB/E,KAGX,OAAOA,IACT,GAKC,CACD6G,IAAK,iBACLzI,MAAO,WACL,IAAImgB,EAAU,IAAIvhB,MAOlB,OANIgD,KAAK4E,UACP2Z,EAAQ9T,KAAKzK,KAAK4E,UAEhB5E,KAAK2F,UACP4Y,EAAQ9T,KAAKzK,KAAK2F,UAEb4Y,CACT,GAUC,CACD1X,IAAK,4BACLzI,MAAO,SAAmCogB,GAExC,IAAKxe,KAAK8M,sBAAsB,kBAC9B,OAAO9M,KAET,IAAIye,EAAYze,KAAK6N,UAAUhD,OAAO,GACtC7K,KAAK0e,yBACL,IAEI3Z,EAFAyH,EAAOxM,KAAK6J,gBAAgB,kBAC5B8U,EAAO,IAAI3hB,MAEf,IAAK+H,EAAQ,EAAGA,EAAQyH,EAAKzO,OAAQgH,GAAS,EAC5C,yBAA6B,cAAkByH,EAAMzH,GAAQyZ,GAAWI,QAAQD,EAAM5Z,GAIxF,GAFA/E,KAAKmH,gBAAgB,iBAA2BwX,EAAM3e,KAAK6M,gBAAgB,kBAA2BI,eAElGjN,KAAK8M,sBAAsB,gBAA0B,CAGvD,IAFAN,EAAOxM,KAAK6J,gBAAgB,gBAC5B8U,EAAO,GACF5Z,EAAQ,EAAGA,EAAQyH,EAAKzO,OAAQgH,GAAS,EAC5C,oBAAwB,cAAkByH,EAAMzH,GAAQyZ,GAAWK,YAAYD,QAAQD,EAAM5Z,GAE/F/E,KAAKmH,gBAAgB,eAAyBwX,EAAM3e,KAAK6M,gBAAgB,gBAAyBI,cACpG,CAQA,OANIuR,EAAUM,cAAgB,GAC5B9e,KAAK+e,YAGP/e,KAAKgS,mBACLhS,KAAK6N,UAAY4Q,EACVze,IACT,GAUC,CACD6G,IAAK,mCACLzI,MAAO,WACL,IAAI4gB,IAA6B/e,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAGhG,OAFAD,KAAKif,0BAA0Bjf,KAAK6F,oBAAmB,IACvD7F,KAAKkf,iBAAiBF,GACfhf,IACT,GAGC,CACD6G,IAAK,aACLC,IAAK,WACH,OAAI9G,KAAKgH,8BAA8BmY,WAC9Bnf,KAAKgH,8BAA8BmY,WAExCnf,KAAK4C,UACA5C,KAAK4C,UAAUuc,WAEjB,IACT,GAEC,CACDtY,IAAK,yBACLzI,MAAO,WAIL,OAHI4B,KAAK4C,WACP5C,KAAK4C,UAAU8b,yBAEV1e,IACT,GAEC,CACD6G,IAAK,uBACLzI,MAAO,WACL,QAAI4B,KAAK4C,WACA5C,KAAK4C,UAAUwc,sBAG1B,GAUC,CACDvY,IAAK,QACLzI,MAAO,WACL,IAAIT,EAAOsC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,GAC3EoI,EAAYpI,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,KAChFqC,EAAqBrC,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC3DI,IAAuBtC,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAC1F,OAAO,IAAI6B,EAAKnE,EAAMqC,KAAKoD,WAAYiF,EAAWrI,KAAMsC,EAAoBC,EAC9E,GAMC,CACDsE,IAAK,UACLzI,MAAO,SAAiBihB,GACtB,IAAIC,EAA6Brf,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAChGD,KAAKiF,mBAAqB,KACtBjF,KAAK4C,WACP5C,KAAK4C,UAAU0Q,eAAetT,MAAM,GAEtC,IAAI4K,EAAmB5K,KAAKwC,sBAiB5B,GAhBIoI,EAAiBlD,yBACnBkD,EAAiBlD,wBAAwB6X,QAEvC3U,EAAiBrD,yBACnBqD,EAAiBrD,wBAAwBgY,QAEvC3U,EAAiBtD,2BACnBsD,EAAiBtD,0BAA0BiY,QAEzC3U,EAAiBpD,0BACnBoD,EAAiBpD,yBAAyB+X,QAExC3U,EAAiBnD,0BACnBmD,EAAiBnD,yBAAyB8X,QAGxCvf,KAAKwG,OAAO3C,iBAAkB,CAChC,GAAI+G,EAAiBpJ,QACnB,IAAK,IAAIsC,KAAY8G,EAAiBpJ,QAAS,CAC7C,IAAI8I,EAAOM,EAAiBpJ,QAAQsC,GAChCwG,IACFA,EAAK9H,sBAAsBjB,QAAU,KACrCqJ,EAAiBpJ,QAAQsC,QAAY3B,EAEzC,CAEEyI,EAAiBrJ,SAAWqJ,EAAiBrJ,QAAQiB,sBAAsBhB,UAC7EoJ,EAAiBrJ,QAAQiB,sBAAsBhB,QAAQxB,KAAK8D,eAAY3B,EAE5E,KAAO,CACL,IAEEqd,EAFE5S,EAAS5M,KAAKoD,WAAWwJ,OACzB6S,EAAc/iB,EAA2BkQ,GAE7C,IACE,IAAK6S,EAAYvhB,MAAOshB,EAAUC,EAAYriB,KAAKe,MAAO,CACxD,IAAIuhB,EAAeF,EAAQphB,MACvBuhB,EAAQD,EACRC,EAAMnd,uBAAyBmd,EAAMnd,sBAAsBjB,SAAWoe,EAAMnd,sBAAsBjB,UAAYvB,OAChH2f,EAAMnd,sBAAsBjB,QAAU,KAE1C,CAKF,CAJE,MAAO9C,GACPghB,EAAYphB,EAAEI,EAChB,CAAE,QACAghB,EAAYlhB,GACd,CACF,CACAqM,EAAiBrJ,QAAU,KAE3BvB,KAAK4f,+BAEL5f,KAAK6f,mCACD7f,KAAKwC,sBAAsB+D,yBAC7BvG,KAAKwG,OAAOC,yBAAyBE,OAAO3G,KAAKwC,sBAAsB+D,0BAEzE,QAAK,OAAgBzE,EAAKxE,WAAY,UAAW0C,MAAMxC,KAAKwC,KAAMqf,EAAcC,EAClF,GAEC,CACDzY,IAAK,+BACLzI,MAAO,WAEP,GAEC,CACDyI,IAAK,mCACLzI,MAAO,WAEP,GAEC,CACDyI,IAAK,uCACLzI,MAAO,WAEP,GAcC,CACDyI,IAAK,uBACLzI,MAAO,SAA8B0hB,EAAKC,EAAWC,EAAWC,EAAWC,EAAUC,GACnF,IAAIC,EAASpgB,KACTqgB,EAAcpgB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC7EiC,EAAQlC,KAAKoD,WACbkd,EAAS,SAAgBC,GAE3B,IAAIC,EAAiBD,EAAIE,MACrBC,EAAkBH,EAAII,OAEtBC,EADSR,EAAOta,YAAY+a,aAAaL,EAAgBE,GACxCI,WAAW,MAChCF,EAAQG,UAAUR,EAAK,EAAG,GAG1B,IAAI/N,EAASoO,EAAQI,aAAa,EAAG,EAAGR,EAAgBE,GAAiBlU,KACzE4T,EAAOa,+BAA+BzO,EAAQgO,EAAgBE,EAAiBX,EAAWC,EAAWE,EAAUC,EAASE,GAEpHJ,GACFA,EAAUG,EAEd,EAEA,OADA,eAAgBN,EAAKQ,GAAQ,WAAa,GAAGpe,EAAMic,iBAC5Cne,IACT,GAeC,CACD6G,IAAK,iCACLzI,MAAO,SAAwCoU,EAAQgO,EAAgBE,EAAiBX,EAAWC,EAAWE,EAAUC,GACtH,IAAIE,EAAcpgB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GACjF,IAAKD,KAAK8M,sBAAsB,oBAA+B9M,KAAK8M,sBAAsB,kBAA6B9M,KAAK8M,sBAAsB,YAEhJ,OADA,SAAY,oGACL9M,KAET,IAAIiT,EAAYjT,KAAK6J,gBAAgB,kBAA2B,GAAM,GAClEsJ,EAAUnT,KAAK6J,gBAAgB,gBAC/BqX,EAAMlhB,KAAK6J,gBAAgB,YAC3BjB,EAAW,WACXuY,EAAS,WACTC,EAAK,YACTlB,EAAWA,GAAY,YACvBC,EAAUA,GAAW,IAAI,KAAQ,EAAG,GACpC,IAAK,IAAIpb,EAAQ,EAAGA,EAAQkO,EAAUlV,OAAQgH,GAAS,EAAG,CACxD,mBAAuBkO,EAAWlO,EAAO6D,GACzC,mBAAuBuK,EAASpO,EAAOoc,GACvC,oBAAuBD,EAAKnc,EAAQ,EAAI,EAAGqc,GAE3C,IAAIC,EAAIxV,KAAKkR,IAAIqE,EAAGE,EAAInB,EAAQmB,EAAIpB,EAASoB,EAAI,IAAMd,EAAiB,GAAKA,EAAiB,EAC1Fe,EAAI1V,KAAKkR,IAAIqE,EAAGI,EAAIrB,EAAQqB,EAAItB,EAASsB,EAAI,IAAMd,EAAkB,GAAKA,EAAkB,EAC5Fe,EAAiC,GAA1BJ,EAAIE,EAAIf,GACfkB,EAAIlP,EAAOiP,GAAO,IAClBE,EAAInP,EAAOiP,EAAM,GAAK,IACtBrX,EAAIoI,EAAOiP,EAAM,GAAK,IACtBG,EAAe,GAAJF,EAAc,IAAJC,EAAe,IAAJvX,EACpC+W,EAAOtC,YACPsC,EAAOU,aAAa9B,GAAaC,EAAYD,GAAa6B,IAC1DhZ,EAAWA,EAASlC,IAAIya,IACfvC,QAAQ3L,EAAWlO,EAC9B,CAUA,OATA,mBAA0BkO,EAAWjT,KAAK2J,aAAcwJ,GACpDkN,GACFrgB,KAAKmH,gBAAgB,iBAA2B8L,GAChDjT,KAAKmH,gBAAgB,eAAyBgM,GAC9CnT,KAAKmH,gBAAgB,WAAqB+Z,KAE1ClhB,KAAK8S,mBAAmB,iBAA2BG,GACnDjT,KAAK8S,mBAAmB,eAAyBK,IAE5CnT,IACT,GAOC,CACD6G,IAAK,0BACLzI,MAAO,WACL,IAKI0jB,EACA1V,EANAgB,EAAQpN,KAAKqN,uBACb0U,EAAM,CAAC,EACPvV,EAAO,CAAC,EACRwV,EAAU,CAAC,EACXC,GAAmB,EAGvB,IAAKH,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAAa,CACzD1V,EAAOgB,EAAM0U,GACb,IAAII,EAAeliB,KAAK6M,gBAAgBT,GAEpCkG,EAAa4P,EAAaC,WAC1B7P,aAAsBtV,OAASsV,aAAsBuD,eAC7B,IAAtBvD,EAAWvU,SAIbqO,IAAS,gBAMb2V,EAAI3V,GAAQ8V,EACZ1V,EAAKJ,GAAQpM,KAAK6J,gBAAgBuC,GAClC4V,EAAQ5V,GAAQ,KAPd6V,EAAmBC,EAAajV,cAChCG,EAAMvC,OAAOiX,EAAW,GACxBA,KAMJ,CAEA,IAII/c,EAJAqd,EAAoBpiB,KAAK6N,UAAUpQ,MAAM,GACzCyV,EAAUlT,KAAK2J,aACf4H,EAAevR,KAAKsN,kBAGxB,IAAKvI,EAAQ,EAAGA,EAAQwM,EAAcxM,IAAS,CAC7C,IAAIsd,EAAcnP,EAAQnO,GAC1B,IAAK+c,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAE5C,GAAKC,EADL3V,EAAOgB,EAAM0U,IAKb,IADA,IAAIzP,EAAS0P,EAAI3V,GAAMkW,gBACdpQ,EAAS,EAAGA,EAASG,EAAQH,IACpC8P,EAAQ5V,GAAM3B,KAAK+B,EAAKJ,GAAMiW,EAAchQ,EAASH,GAG3D,CAEA,IAGIqQ,EAHApP,EAAU,GACVF,EAAY+O,EAAQ,kBAQxB,IAJEO,EAHyBviB,KAAKoD,WAAWof,qBAGuB,IAAzCxiB,KAAKkD,gCAEoC,IAAzClD,KAAKkD,gCAEzB6B,EAAQ,EAAGA,EAAQwM,EAAcxM,GAAS,EAAG,CAChDmO,EAAQnO,GAASA,EACjBmO,EAAQnO,EAAQ,GAAKA,EAAQ,EAC7BmO,EAAQnO,EAAQ,GAAKA,EAAQ,EAC7B,IAAI0d,EAAK,cAAkBxP,EAAmB,EAARlO,GAClC2d,EAAK,cAAkBzP,EAAyB,GAAblO,EAAQ,IAC3C4d,EAAK,cAAkB1P,EAAyB,GAAblO,EAAQ,IAC3C6d,EAAOH,EAAGnX,SAASoX,GACnBG,EAAOF,EAAGrX,SAASoX,GACnBvB,EAAS,cAAkB,UAAcyB,EAAMC,IAC/CN,GACFpB,EAAOU,cAAc,GAGvB,IAAK,IAAIiB,EAAa,EAAGA,EAAa,EAAGA,IACvC3P,EAAQ1I,KAAK0W,EAAOG,GACpBnO,EAAQ1I,KAAK0W,EAAOK,GACpBrO,EAAQ1I,KAAK0W,EAAO4B,EAExB,CAIA,IAHA/iB,KAAKuT,WAAWL,GAChBlT,KAAKmH,gBAAgB,eAAyBgM,EAAS8O,GAElDH,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAEvCE,EADL5V,EAAOgB,EAAM0U,KAIb9hB,KAAKmH,gBAAgBiF,EAAM4V,EAAQ5V,GAAO2V,EAAI3V,GAAMa,eAGtDjN,KAAKgS,mBACL,IAAK,IAAIgR,EAAe,EAAGA,EAAeZ,EAAkBrkB,OAAQilB,IAAgB,CAClF,IAAIC,EAAcb,EAAkBY,GACpC,cAAkBC,EAAYC,cAAeD,EAAYrR,WAAYqR,EAAYpR,WAAYoR,EAAYrR,WAAYqR,EAAYpR,WAAY7R,KAC/I,CAEA,OADAA,KAAKmS,uBACEnS,IACT,GAOC,CACD6G,IAAK,yBACLzI,MAAO,WACL,IAII0jB,EACA1V,EALAgB,EAAQpN,KAAKqN,uBACb0U,EAAM,CAAC,EACPvV,EAAO,CAAC,EACRwV,EAAU,CAAC,EAGf,IAAKF,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAAa,CACzD1V,EAAOgB,EAAM0U,GACb,IAAII,EAAeliB,KAAK6M,gBAAgBT,GACxC2V,EAAI3V,GAAQ8V,EACZ1V,EAAKJ,GAAQ2V,EAAI3V,GAAM+V,UACvBH,EAAQ5V,GAAQ,EAClB,CAEA,IAIIrH,EAJAqd,EAAoBpiB,KAAK6N,UAAUpQ,MAAM,GACzCyV,EAAUlT,KAAK2J,aACf4H,EAAevR,KAAKsN,kBAGxB,IAAKvI,EAAQ,EAAGA,EAAQwM,EAAcxM,IAAS,CAC7C,IAAIsd,EAAcnP,EAAQnO,GAC1B,IAAK+c,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAG5C,IADA,IAAIzP,EAAS0P,EADb3V,EAAOgB,EAAM0U,IACUQ,gBACdpQ,EAAS,EAAGA,EAASG,EAAQH,IACpC8P,EAAQ5V,GAAM3B,KAAK+B,EAAKJ,GAAMiW,EAAchQ,EAASH,GAG3D,CAEA,IAAKnN,EAAQ,EAAGA,EAAQwM,EAAcxM,GAAS,EAC7CmO,EAAQnO,GAASA,EACjBmO,EAAQnO,EAAQ,GAAKA,EAAQ,EAC7BmO,EAAQnO,EAAQ,GAAKA,EAAQ,EAI/B,IAFA/E,KAAKuT,WAAWL,GAEX4O,EAAY,EAAGA,EAAY1U,EAAMrP,OAAQ+jB,IAC5C1V,EAAOgB,EAAM0U,GACb9hB,KAAKmH,gBAAgBiF,EAAM4V,EAAQ5V,GAAO2V,EAAI3V,GAAMa,cAAe8U,EAAI3V,GAAMkW,iBAG/EtiB,KAAKgS,mBACL,IAAK,IAAIgR,EAAe,EAAGA,EAAeZ,EAAkBrkB,OAAQilB,IAAgB,CAClF,IAAIC,EAAcb,EAAkBY,GACpC,cAAkBC,EAAYC,cAAeD,EAAYrR,WAAYqR,EAAYpR,WAAYoR,EAAYrR,WAAYqR,EAAYpR,WAAY7R,KAC/I,CAGA,OAFAA,KAAKgI,YAAa,EAClBhI,KAAKmS,uBACEnS,IACT,GAOC,CACD6G,IAAK,YACLzI,MAAO,WACL,IAEIJ,EAOE2gB,EATFwE,EAAcljB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,IAAmBA,UAAU,GAC7EmjB,EAAc,oBAA2BpjB,MAE7C,GAAImjB,GAAenjB,KAAK8M,sBAAsB,iBAA4BsW,EAAYjQ,QACpF,IAAKnV,EAAI,EAAGA,EAAIolB,EAAYjQ,QAAQpV,OAAQC,IAC1ColB,EAAYjQ,QAAQnV,KAAO,EAG/B,GAAIolB,EAAYlQ,QAEd,IAAKlV,EAAI,EAAGA,EAAIolB,EAAYlQ,QAAQnV,OAAQC,GAAK,EAE/C2gB,EAAOyE,EAAYlQ,QAAQlV,EAAI,GAC/BolB,EAAYlQ,QAAQlV,EAAI,GAAKolB,EAAYlQ,QAAQlV,EAAI,GACrDolB,EAAYlQ,QAAQlV,EAAI,GAAK2gB,EAIjC,OADAyE,EAAYxf,YAAY5D,KAAMA,KAAKkN,wBAAwB,mBACpDlN,IACT,GAOC,CACD6G,IAAK,mBACLzI,MAAO,WACL,IAAIilB,EAAgBpjB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,EACpFmjB,EAAc,oBAA2BpjB,MACzCsjB,EAAiBF,EAAYlQ,UAAYlW,MAAMC,QAAQmmB,EAAYlQ,UAAYlW,MAAMY,KAAOZ,MAAMY,KAAKwlB,EAAYlQ,SAAWkQ,EAAYlQ,QAC1ID,EAAYmQ,EAAYnQ,YAAcjW,MAAMC,QAAQmmB,EAAYnQ,YAAcjW,MAAMY,KAAOZ,MAAMY,KAAKwlB,EAAYnQ,WAAamQ,EAAYnQ,UAC3IiO,EAAMkC,EAAYlC,MAAQlkB,MAAMC,QAAQmmB,EAAYlC,MAAQlkB,MAAMY,KAAOZ,MAAMY,KAAKwlB,EAAYlC,KAAOkC,EAAYlC,IACnH/N,EAAUiQ,EAAYjQ,UAAYnW,MAAMC,QAAQmmB,EAAYjQ,UAAYnW,MAAMY,KAAOZ,MAAMY,KAAKwlB,EAAYjQ,SAAWiQ,EAAYjQ,QACvI,GAAKmQ,GAAmBrQ,EAEjB,CACLmQ,EAAYlQ,QAAUoQ,EACtBF,EAAYnQ,UAAYA,EACpBiO,IACFkC,EAAYlC,IAAMA,GAEhB/N,IACFiQ,EAAYjQ,QAAUA,GAIxB,IAFA,IAKIhJ,EACAC,EANAmZ,EAAWF,EAAgB,EAC3BG,EAAc,IAAIxmB,MACbgB,EAAI,EAAGA,EAAIulB,EAAW,EAAGvlB,IAChCwlB,EAAYxlB,GAAK,IAAIhB,MAIvB,IAMIiC,EAEAwkB,EAIAC,EAZAC,EAAgB,IAAI,IAAQ,EAAG,EAAG,GAClCC,EAAc,IAAI,IAAQ,EAAG,EAAG,GAChCC,EAAU,IAAI,KAAQ,EAAG,GACzB3Q,EAAU,IAAIlW,MACdqlB,EAAc,IAAIrlB,MAClB8mB,EAAO,IAAI9mB,MAEX+mB,EAAc9Q,EAAUlV,OAExBmjB,IACFuC,EAAQvC,EAAInjB,QAGVoV,IACFuQ,EAAavQ,EAAQpV,QAEvB,IAAK,IAAIimB,EAAK,EAAGA,EAAKV,EAAevlB,OAAQimB,GAAM,EAAG,CACpD3B,EAAY,GAAKiB,EAAeU,GAChC3B,EAAY,GAAKiB,EAAeU,EAAK,GACrC3B,EAAY,GAAKiB,EAAeU,EAAK,GACrC,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAcrB,GAbA9Z,EAAIkY,EAAY4B,GAChB7Z,EAAIiY,GAAa4B,EAAI,GAAK,QACV9hB,IAAZ2hB,EAAK3Z,SAAgChI,IAAZ2hB,EAAK1Z,IAChC0Z,EAAK3Z,GAAK,IAAInN,MACd8mB,EAAK1Z,GAAK,IAAIpN,aAEEmF,IAAZ2hB,EAAK3Z,KACP2Z,EAAK3Z,GAAK,IAAInN,YAEAmF,IAAZ2hB,EAAK1Z,KACP0Z,EAAK1Z,GAAK,IAAIpN,aAGCmF,IAAf2hB,EAAK3Z,GAAGC,SAAmCjI,IAAf2hB,EAAK1Z,GAAGD,GAAkB,CACxD2Z,EAAK3Z,GAAGC,GAAK,GACbuZ,EAAcrC,GAAKrO,EAAU,EAAI7I,GAAK6I,EAAU,EAAI9I,IAAMoZ,EAC1DI,EAAcnC,GAAKvO,EAAU,EAAI7I,EAAI,GAAK6I,EAAU,EAAI9I,EAAI,IAAMoZ,EAClEI,EAAcZ,GAAK9P,EAAU,EAAI7I,EAAI,GAAK6I,EAAU,EAAI9I,EAAI,IAAMoZ,EAC9DpQ,IACFyQ,EAAYtC,GAAKnO,EAAQ,EAAI/I,GAAK+I,EAAQ,EAAIhJ,IAAMoZ,EACpDK,EAAYpC,GAAKrO,EAAQ,EAAI/I,EAAI,GAAK+I,EAAQ,EAAIhJ,EAAI,IAAMoZ,EAC5DK,EAAYb,GAAK5P,EAAQ,EAAI/I,EAAI,GAAK+I,EAAQ,EAAIhJ,EAAI,IAAMoZ,GAE1DrC,IACF2C,EAAQvC,GAAKJ,EAAI,EAAI9W,GAAK8W,EAAI,EAAI/W,IAAMoZ,EACxCM,EAAQrC,GAAKN,EAAI,EAAI9W,EAAI,GAAK8W,EAAI,EAAI/W,EAAI,IAAMoZ,GAElDO,EAAK3Z,GAAGC,GAAGK,KAAKN,GAChB,IAAK,IAAI+Z,EAAI,EAAGA,EAAIX,EAAUW,IAC5BJ,EAAK3Z,GAAGC,GAAGK,KAAKwI,EAAUlV,OAAS,GACnCkV,EAAU8Q,KAAiB9Q,EAAU,EAAI9I,GAAK+Z,EAAIP,EAAcrC,EAChErO,EAAU8Q,KAAiB9Q,EAAU,EAAI9I,EAAI,GAAK+Z,EAAIP,EAAcnC,EACpEvO,EAAU8Q,KAAiB9Q,EAAU,EAAI9I,EAAI,GAAK+Z,EAAIP,EAAcZ,EAChE5P,IACFA,EAAQuQ,KAAgBvQ,EAAQ,EAAIhJ,GAAK+Z,EAAIN,EAAYtC,EACzDnO,EAAQuQ,KAAgBvQ,EAAQ,EAAIhJ,EAAI,GAAK+Z,EAAIN,EAAYpC,EAC7DrO,EAAQuQ,KAAgBvQ,EAAQ,EAAIhJ,EAAI,GAAK+Z,EAAIN,EAAYb,GAE3D7B,IACFA,EAAIuC,KAAWvC,EAAI,EAAI/W,GAAK+Z,EAAIL,EAAQvC,EACxCJ,EAAIuC,KAAWvC,EAAI,EAAI/W,EAAI,GAAK+Z,EAAIL,EAAQrC,GAGhDsC,EAAK3Z,GAAGC,GAAGK,KAAKL,GAChB0Z,EAAK1Z,GAAGD,GAAK,IAAInN,MACjBiC,EAAM6kB,EAAK3Z,GAAGC,GAAGrM,OACjB,IAAK,IAAIomB,EAAM,EAAGA,EAAMllB,EAAKklB,IAC3BL,EAAK1Z,GAAGD,GAAGga,GAAOL,EAAK3Z,GAAGC,GAAGnL,EAAM,EAAIklB,EAE3C,CAGFX,EAAY,GAAG,GAAKF,EAAeU,GACnCR,EAAY,GAAG,GAAKM,EAAKR,EAAeU,IAAKV,EAAeU,EAAK,IAAI,GACrER,EAAY,GAAG,GAAKM,EAAKR,EAAeU,IAAKV,EAAeU,EAAK,IAAI,GACrE,IAAK,IAAII,EAAK,EAAGA,EAAKb,EAAUa,IAAM,CACpCZ,EAAYY,GAAI,GAAKN,EAAKR,EAAeU,IAAKV,EAAeU,EAAK,IAAII,GACtEZ,EAAYY,GAAIA,GAAMN,EAAKR,EAAeU,IAAKV,EAAeU,EAAK,IAAII,GACvET,EAAcrC,GAAKrO,EAAU,EAAIuQ,EAAYY,GAAIA,IAAOnR,EAAU,EAAIuQ,EAAYY,GAAI,KAAOA,EAC7FT,EAAcnC,GAAKvO,EAAU,EAAIuQ,EAAYY,GAAIA,GAAM,GAAKnR,EAAU,EAAIuQ,EAAYY,GAAI,GAAK,IAAMA,EACrGT,EAAcZ,GAAK9P,EAAU,EAAIuQ,EAAYY,GAAIA,GAAM,GAAKnR,EAAU,EAAIuQ,EAAYY,GAAI,GAAK,IAAMA,EACjGjR,IACFyQ,EAAYtC,GAAKnO,EAAQ,EAAIqQ,EAAYY,GAAIA,IAAOjR,EAAQ,EAAIqQ,EAAYY,GAAI,KAAOA,EACvFR,EAAYpC,GAAKrO,EAAQ,EAAIqQ,EAAYY,GAAIA,GAAM,GAAKjR,EAAQ,EAAIqQ,EAAYY,GAAI,GAAK,IAAMA,EAC/FR,EAAYb,GAAK5P,EAAQ,EAAIqQ,EAAYY,GAAIA,GAAM,GAAKjR,EAAQ,EAAIqQ,EAAYY,GAAI,GAAK,IAAMA,GAE7FlD,IACF2C,EAAQvC,GAAKJ,EAAI,EAAIsC,EAAYY,GAAIA,IAAOlD,EAAI,EAAIsC,EAAYY,GAAI,KAAOA,EAC3EP,EAAQrC,GAAKN,EAAI,EAAIsC,EAAYY,GAAIA,GAAM,GAAKlD,EAAI,EAAIsC,EAAYY,GAAI,GAAK,IAAMA,GAErF,IAAK,IAAIC,EAAK,EAAGA,EAAKD,EAAIC,IACxBb,EAAYY,GAAIC,GAAMpR,EAAUlV,OAAS,EACzCkV,EAAU8Q,KAAiB9Q,EAAU,EAAIuQ,EAAYY,GAAI,IAAMC,EAAKV,EAAcrC,EAClFrO,EAAU8Q,KAAiB9Q,EAAU,EAAIuQ,EAAYY,GAAI,GAAK,GAAKC,EAAKV,EAAcnC,EACtFvO,EAAU8Q,KAAiB9Q,EAAU,EAAIuQ,EAAYY,GAAI,GAAK,GAAKC,EAAKV,EAAcZ,EAClF5P,IACFA,EAAQuQ,KAAgBvQ,EAAQ,EAAIqQ,EAAYY,GAAI,IAAMC,EAAKT,EAAYtC,EAC3EnO,EAAQuQ,KAAgBvQ,EAAQ,EAAIqQ,EAAYY,GAAI,GAAK,GAAKC,EAAKT,EAAYpC,EAC/ErO,EAAQuQ,KAAgBvQ,EAAQ,EAAIqQ,EAAYY,GAAI,GAAK,GAAKC,EAAKT,EAAYb,GAE7E7B,IACFA,EAAIuC,KAAWvC,EAAI,EAAIsC,EAAYY,GAAI,IAAMC,EAAKR,EAAQvC,EAC1DJ,EAAIuC,KAAWvC,EAAI,EAAIsC,EAAYY,GAAI,GAAK,GAAKC,EAAKR,EAAQrC,EAGpE,CACAgC,EAAYD,GAAYO,EAAKR,EAAeU,EAAK,IAAIV,EAAeU,EAAK,IAEzE9Q,EAAQzI,KAAK+Y,EAAY,GAAG,GAAIA,EAAY,GAAG,GAAIA,EAAY,GAAG,IAClE,IAAK,IAAIc,EAAM,EAAGA,EAAMf,EAAUe,IAAO,CACvC,IAAIC,OAAM,EACV,IAAKA,EAAM,EAAGA,EAAMD,EAAKC,IACvBrR,EAAQzI,KAAK+Y,EAAYc,GAAKC,GAAMf,EAAYc,EAAM,GAAGC,GAAMf,EAAYc,EAAM,GAAGC,EAAM,IAC1FrR,EAAQzI,KAAK+Y,EAAYc,GAAKC,GAAMf,EAAYc,EAAM,GAAGC,EAAM,GAAIf,EAAYc,GAAKC,EAAM,IAE5FrR,EAAQzI,KAAK+Y,EAAYc,GAAKC,GAAMf,EAAYc,EAAM,GAAGC,GAAMf,EAAYc,EAAM,GAAGC,EAAM,GAC5F,CACF,CACAnB,EAAYlQ,QAAUA,EACtBkQ,EAAYxf,YAAY5D,KAAMA,KAAKkN,wBAAwB,kBAC7D,MA1IE,SAAY,gGA2IhB,GAMC,CACDrG,IAAK,sBACLzI,MAAO,WACL,IAAIglB,EAAc,oBAA2BpjB,MACzCwkB,EAAapB,EAAYlC,IACzBoC,EAAiBF,EAAYlQ,QAC7BuR,EAAmBrB,EAAYnQ,UAC/ByR,EAAgBtB,EAAYuB,OAC5BC,EAAuBxB,EAAYlG,gBACnC2H,EAAuBzB,EAAYzH,gBACnCmJ,EAA4B1B,EAAYjG,qBACxC4H,EAA4B3B,EAAYrH,qBAC5C,QAAuB,IAAnBuH,QAAkD,IAArBmB,GAAkD,OAAnBnB,GAAgD,OAArBmB,EACzF,SAAY,yCACP,CAcL,IAbA,IAWIO,EACAC,EAZAhS,EAAY,IAAIjW,MAChBkW,EAAU,IAAIlW,MACdkkB,EAAM,IAAIlkB,MACV2nB,EAAS,IAAI3nB,MACbkoB,EAAgB,IAAIloB,MACpBmoB,EAAgB,IAAInoB,MACpBooB,EAAqB,IAAIpoB,MACzBqoB,EAAqB,IAAIroB,MACzBsoB,EAAU,IAAItoB,MACduoB,EAAW,EACXC,EAAkB,CAAC,EAGdxnB,EAAI,EAAGA,EAAIslB,EAAevlB,OAAQC,GAAK,EAAG,CACjDinB,EAAQ,CAAC3B,EAAetlB,GAAIslB,EAAetlB,EAAI,GAAIslB,EAAetlB,EAAI,IACtEsnB,EAAU,IAAItoB,MACd,IAAK,IAAIinB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1BqB,EAAQrB,GAAK,GACb,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAEjBrY,KAAKkR,IAAI0H,EAAiB,EAAIQ,EAAMhB,GAAKC,IAAM,OACjDO,EAAiB,EAAIQ,EAAMhB,GAAKC,GAAK,GAEvCoB,EAAQrB,IAAMQ,EAAiB,EAAIQ,EAAMhB,GAAKC,GAAK,GAEvD,CAGA,GAAMoB,EAAQ,IAAMA,EAAQ,IAAMA,EAAQ,IAAMA,EAAQ,IAAMA,EAAQ,IAAMA,EAAQ,GAIlF,IAAK,IAAIG,EAAM,EAAGA,EAAM,EAAGA,IAAO,CAEhC,QAAYtjB,KADZ6iB,EAAMQ,EAAgBF,EAAQG,KACP,CACrBD,EAAgBF,EAAQG,IAAQF,EAChCP,EAAMO,IAEN,IAAK,IAAIG,EAAM,EAAGA,EAAM,EAAGA,IACzBzS,EAAUxI,KAAKga,EAAiB,EAAIQ,EAAMQ,GAAOC,IAEnD,GAAIhB,QACF,IAAK,IAAIiB,EAAM,EAAGA,EAAM,EAAGA,IACzBhB,EAAOla,KAAKia,EAAc,EAAIO,EAAMQ,GAAOE,IAG/C,GAAInB,QACF,IAAK,IAAIoB,EAAM,EAAGA,EAAM,EAAGA,IACzB1E,EAAIzW,KAAK+Z,EAAW,EAAIS,EAAMQ,GAAOG,IAGzC,GAAIhB,QACF,IAAK,IAAIiB,EAAM,EAAGA,EAAM,EAAGA,IACzBX,EAAcza,KAAKma,EAAqB,EAAIK,EAAMQ,GAAOI,IAG7D,GAAIhB,QACF,IAAK,IAAIiB,EAAM,EAAGA,EAAM,EAAGA,IACzBX,EAAc1a,KAAKoa,EAAqB,EAAII,EAAMQ,GAAOK,IAG7D,GAAIhB,QACF,IAAK,IAAIiB,EAAM,EAAGA,EAAM,EAAGA,IACzBX,EAAmB3a,KAAKqa,EAA0B,EAAIG,EAAMQ,GAAOM,IAGvE,GAAIhB,QACF,IAAK,IAAIiB,EAAM,EAAGA,EAAM,EAAGA,IACzBX,EAAmB5a,KAAKsa,EAA0B,EAAIE,EAAMQ,GAAOO,GAGzE,CAEA9S,EAAQzI,KAAKua,EACf,CAEJ,CACA,IAAI7R,EAAU,IAAInW,MAClB,mBAA0BiW,EAAWC,EAASC,GAE9CiQ,EAAYnQ,UAAYA,EACxBmQ,EAAYlQ,QAAUA,EACtBkQ,EAAYjQ,QAAUA,EAClBqR,UACFpB,EAAYlC,IAAMA,GAEhBwD,UACFtB,EAAYuB,OAASA,GAEnBC,UACFxB,EAAYlG,gBAAkBgI,GAE5BL,UACFzB,EAAYzH,gBAAkBwJ,GAE5BL,UACF1B,EAAYjG,qBAAuBiI,GAEjCP,UACFzB,EAAYrH,qBAAuBsJ,GAErCjC,EAAYxf,YAAY5D,KAAMA,KAAKkN,wBAAwB,kBAC7D,CACF,GAMC,CACDrG,IAAK,iBACLzI,MAOA,SAAwBT,GACtB,OAAOmE,EAAKmkB,sBAAsBtoB,EAAMqC,KAC1C,GAMC,CACD6G,IAAK,uBACLzI,MAAO,WACL,IAAK,IAAImY,EAAgB,EAAGA,EAAgBvW,KAAK0C,UAAU3E,OAAQwY,IAAiB,CACnEvW,KAAK0C,UAAU6T,GACrB0H,gBACX,CACA,OAAOje,IACT,GAQC,CACD6G,IAAK,kBACLzI,MAAO,SAAyB8nB,GAC9B,IAAIC,EAASnmB,KACTkT,EAAUlT,KAAK2J,aACfsJ,EAAYjT,KAAK6J,gBAAgB,kBACrC,IAAKoJ,IAAcC,EACjB,OAAOlT,KAGT,IADA,IAAIomB,EAAkB,IAAIppB,MACjBykB,EAAM,EAAGA,EAAMxO,EAAUlV,OAAQ0jB,GAAY,EACpD2E,EAAgB3b,KAAK,cAAkBwI,EAAWwO,IAEpD,IAAI4E,EAAQ,IAAIrpB,MAuBhB,OAtBA,sBAA2BopB,EAAgBroB,OAAQ,IAAI,SAAUuoB,GAG/D,IAFA,IAAIC,EAAUH,EAAgBroB,OAAS,EAAIuoB,EACvCE,EAAiBJ,EAAgBG,GAC5BtC,EAAI,EAAGA,EAAIsC,IAAWtC,EAAG,CAChC,IAAIwC,EAAkBL,EAAgBnC,GACtC,GAAIuC,EAAeE,OAAOD,GAAkB,CAC1CJ,EAAME,GAAWtC,EACjB,KACF,CACF,CACF,IAAG,WACD,IAAK,IAAIjmB,EAAI,EAAGA,EAAIkV,EAAQnV,SAAUC,EACpCkV,EAAQlV,GAAKqoB,EAAMnT,EAAQlV,KAAOkV,EAAQlV,GAG5C,IAAI2oB,EAAoBR,EAAOtY,UAAUpQ,MAAM,GAC/C0oB,EAAO5S,WAAWL,GAClBiT,EAAOtY,UAAY8Y,EACfT,GACFA,EAAgBC,EAEpB,IACOnmB,IACT,GAKC,CACD6G,IAAK,YACLzI,MAAO,WACL,IAAIwoB,EAAsB3mB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,GAAmBA,UAAU,GAAK,CAAC,EAC/F2mB,EAAoBjpB,KAAOqC,KAAKrC,KAChCipB,EAAoBjiB,GAAK3E,KAAK2E,GAC9BiiB,EAAoB9iB,SAAW9D,KAAK8D,SACpC8iB,EAAoBC,KAAO7mB,KAAKmJ,eAC5B,KAAQ,YAAanJ,QACvB4mB,EAAoBE,KAAO,YAAa9mB,OAE1C4mB,EAAoBhe,SAAW5I,KAAK4I,SAASme,UACzC/mB,KAAK8I,mBACP8d,EAAoB9d,mBAAqB9I,KAAK8I,mBAAmBie,UACxD/mB,KAAK+I,WACd6d,EAAoB7d,SAAW/I,KAAK+I,SAASge,WAE/CH,EAAoB/d,QAAU7I,KAAK6I,QAAQke,UACvC/mB,KAAKgnB,yBACPJ,EAAoBK,YAAcjnB,KAAK0E,iBAAiBqiB,UAExDH,EAAoBM,YAAclnB,KAAK0E,iBAAiBqiB,UAE1DH,EAAoBpiB,UAAYxE,KAAKwE,WAAU,GAC/CoiB,EAAoBzR,UAAYnV,KAAKmV,UACrCyR,EAAoBO,iBAAmBnnB,KAAKmnB,iBAC5CP,EAAoBQ,SAAWpnB,KAAKqnB,WACpCT,EAAoBU,eAAiBtnB,KAAKsnB,eAC1CV,EAAoBW,cAAgBvnB,KAAKunB,cACzCX,EAAoBY,WAAaxnB,KAAKwnB,WACtCZ,EAAoBa,gBAAkBznB,KAAKynB,gBAC3Cb,EAAoBc,UAAY1nB,KAAK0nB,UACrCd,EAAoB1jB,gCAAkClD,KAAKkD,gCAEvDlD,KAAKoC,QACPpC,KAAKoC,OAAOulB,mBAAmBf,GAGjCA,EAAoBgB,YAAc5nB,KAAK4nB,YACvC,IAAI3W,EAAWjR,KAAK4C,UACpB,GAAIqO,GAAYjR,KAAK6N,UAAW,CAC9B+Y,EAAoBiB,iBAAmB5W,EAASnN,SAChD8iB,EAAoBkB,WAAa7W,EAAStM,GAE1CiiB,EAAoB/Y,UAAY,GAChC,IAAK,IAAIka,EAAW,EAAGA,EAAW/nB,KAAK6N,UAAU9P,OAAQgqB,IAAY,CACnE,IAAI1Z,EAAUrO,KAAK6N,UAAUka,GAC7BnB,EAAoB/Y,UAAUpD,KAAK,CACjCyY,cAAe7U,EAAQ6U,cACvBpR,cAAezD,EAAQyD,cACvBC,cAAe1D,EAAQ0D,cACvBH,WAAYvD,EAAQuD,WACpBC,WAAYxD,EAAQwD,YAExB,CACF,CAuBA,GArBI7R,KAAK4E,SACF5E,KAAK4E,SAASojB,iBACjBpB,EAAoBqB,iBAAmBjoB,KAAK4E,SAASd,SACrD8iB,EAAoBsB,WAAaloB,KAAK4E,SAASD,KAGjD3E,KAAK4E,SAAW,KAChBgiB,EAAoBqB,iBAAmBjoB,KAAKwG,OAAOyH,gBAAgBnK,SACnE8iB,EAAoBsB,WAAaloB,KAAKwG,OAAOyH,gBAAgBtJ,IAG3D3E,KAAKiF,qBACP2hB,EAAoBuB,qBAAuBnoB,KAAKiF,mBAAmBnB,UAGjE9D,KAAK2F,WACPihB,EAAoBwB,WAAapoB,KAAK2F,SAAShB,GAC/CiiB,EAAoByB,mBAAqBroB,KAAKqoB,oBAI5CroB,KAAKoD,WAAWklB,cAAc,wBAA6C,CAC7E,IAAIljB,EAAWpF,KAAKuoB,qBAChBnjB,IACFwhB,EAAoB4B,YAAcpjB,EAASqjB,SAAS,QACpD7B,EAAoB8B,gBAAkBtjB,EAASqjB,SAAS,YACxD7B,EAAoB+B,mBAAqBvjB,EAASqjB,SAAS,QAC3D7B,EAAoBthB,gBAAkBF,EAASyhB,KAEnD,CAEI7mB,KAAKqE,WACPuiB,EAAoBviB,SAAWrE,KAAKqE,UAGtCuiB,EAAoBlkB,UAAY,GAChC,IAAK,IAAIqC,EAAQ,EAAGA,EAAQ/E,KAAK0C,UAAU3E,OAAQgH,IAAS,CAC1D,IAAIyD,EAAWxI,KAAK0C,UAAUqC,GAC9B,IAAIyD,EAASwf,eAAb,CAGA,IAAIY,EAAwB,CAC1BjrB,KAAM6K,EAAS7K,KACfgH,GAAI6D,EAAS7D,GACbH,UAAWgE,EAAShE,WAAU,GAC9B2Q,UAAW3M,EAAS2M,UACpBkS,WAAY7e,EAAS6e,WACrBI,gBAAiBjf,EAASif,gBAC1B7e,SAAUJ,EAASI,SAASme,UAC5Ble,QAASL,EAASK,QAAQke,WAY5B,GAVIve,EAASpG,QACXoG,EAASpG,OAAOulB,mBAAmBiB,GAEjCpgB,EAASM,mBACX8f,EAAsB9f,mBAAqBN,EAASM,mBAAmBie,UAC9Dve,EAASO,WAClB6f,EAAsB7f,SAAWP,EAASO,SAASge,WAIjD/mB,KAAKoD,WAAWklB,cAAc,wBAA6C,CAC7E,IAAIO,EAAYrgB,EAAS+f,qBACrBM,IACFD,EAAsBJ,YAAcK,EAAUJ,SAAS,QACvDG,EAAsBF,gBAAkBG,EAAUJ,SAAS,YAC3DG,EAAsBD,mBAAqBE,EAAUJ,SAAS,QAC9DG,EAAsBtjB,gBAAkBujB,EAAUhC,KAEtD,CAEIre,EAASnE,WACXukB,EAAsBvkB,SAAWmE,EAASnE,UAE5CuiB,EAAoBlkB,UAAU+H,KAAKme,GAEnC,gCAA+CpgB,EAAUogB,GACzDA,EAAsB5kB,OAASwE,EAASsgB,0BArCxC,CAsCF,CAEA,GAAI9oB,KAAK8C,yBAAyBhC,gBAAkBd,KAAK8C,yBAAyB5B,aAChF0lB,EAAoBmC,cAAgB,CAClCjoB,eAAgBd,KAAK8C,yBAAyBhC,eAC9CI,WAAYlE,MAAMY,KAAKoC,KAAK8C,yBAAyB5B,YACrDD,iBAAkBjB,KAAK8C,yBAAyB7B,iBAChD+nB,cAAehpB,KAAKipB,2BAElBjpB,KAAKkpB,iCAAiC,CACxC,IAAIC,EAAmB,CACrB3c,KAAM,CAAC,EACPyK,MAAO,CAAC,EACRD,QAAS,CAAC,GAEZ,IAAK,IAAI5K,KAAQpM,KAAKkpB,gCAAgC1c,KACpD2c,EAAiB3c,KAAKJ,GAAQpP,MAAMY,KAAKoC,KAAKkpB,gCAAgC1c,KAAKJ,IACnF+c,EAAiBlS,MAAM7K,GAAQpM,KAAKkpB,gCAAgCjS,MAAM7K,GAC1E+c,EAAiBnS,QAAQ5K,GAAQpM,KAAKkpB,gCAAgClS,QAAQ5K,GAEhFwa,EAAoBmC,cAAcI,iBAAmBA,CACvD,CAoBF,OAjBA,gCAA+CnpB,KAAM4mB,GACrDA,EAAoB5iB,OAAShE,KAAK8oB,2BAElClC,EAAoBwC,UAAYppB,KAAKopB,UAErCxC,EAAoByC,WAAarpB,KAAKqpB,WACtCzC,EAAoB0C,eAAiBtpB,KAAKspB,eAE1C1C,EAAoB2C,aAAevpB,KAAKupB,aACxC3C,EAAoB4C,aAAexpB,KAAKwpB,aAAazC,UACrDH,EAAoB6C,cAAgBzpB,KAAKypB,cAEzC7C,EAAoB8C,SAAW1pB,KAAK0pB,SAEhC1pB,KAAK2pB,gBACP/C,EAAoBgD,QAAU5pB,KAAK2pB,cAAcE,UAAU7pB,KAAKrC,OAE3DipB,CACT,GAEC,CACD/f,IAAK,sCACLzI,MAAO,WACL,GAAK4B,KAAKiR,SAAV,CAGAjR,KAAKqH,kCACL,IAAIpC,EAAqBjF,KAAKgH,8BAA8B8iB,oBAC5D,GAAI7kB,GAAsBA,EAAmB8kB,YAAa,CACxD,GAAI9kB,EAAmB8kB,cAAgB/pB,KAAKyI,mBAG1C,OAFA,UAAa,yGACbzI,KAAKiF,mBAAqB,MAG5B,GAAIA,EAAmB6O,yBACrB,OAEF,IAAK,IAAI/O,EAAQ,EAAGA,EAAQE,EAAmB+kB,eAAgBjlB,IAAS,CACtE,IAAIklB,EAAchlB,EAAmBilB,gBAAgBnlB,GACjDkO,EAAYgX,EAAYE,eAC5B,IAAKlX,EAEH,YADA,UAAa,qDAGfjT,KAAKiR,SAAS9J,gBAAgB,iBAA4BpC,EAAOkO,GAAW,EAAO,GACnF,IAAIE,EAAU8W,EAAYG,aACtBjX,GACFnT,KAAKiR,SAAS9J,gBAAgB,eAA0BpC,EAAOoO,GAAS,EAAO,GAEjF,IAAIkX,EAAWJ,EAAYK,cACvBD,GACFrqB,KAAKiR,SAAS9J,gBAAgB,gBAA2BpC,EAAOslB,GAAU,EAAO,GAEnF,IAAInJ,EAAM+I,EAAYM,SAClBrJ,GACFlhB,KAAKiR,SAAS9J,gBAAgB,WAAsB,IAAMpC,EAAOmc,GAAK,EAAO,EAEjF,CACF,MAGE,IAFA,IAAIsJ,EAAU,EAEPxqB,KAAKiR,SAASnE,sBAAsB,iBAA4B0d,IACrExqB,KAAKiR,SAASsB,mBAAmB,iBAA4BiY,GACzDxqB,KAAKiR,SAASnE,sBAAsB,eAA0B0d,IAChExqB,KAAKiR,SAASsB,mBAAmB,eAA0BiY,GAEzDxqB,KAAKiR,SAASnE,sBAAsB,gBAA2B0d,IACjExqB,KAAKiR,SAASsB,mBAAmB,gBAA2BiY,GAE1DxqB,KAAKiR,SAASnE,sBAAsB,WAAsB0d,IAC5DxqB,KAAKiR,SAASsB,mBAAmB,WAAsB,IAAMiY,GAE/DA,GA/CJ,CAkDF,GAQC,CACD3jB,IAAK,6BACLzI,MAMA,WACE,IAAIwM,EAAmB5K,KAAKwC,sBAC5B,IAAKoI,EAAiB1D,iBAAkB,CACtC,IAAI7E,EAASrC,KAAK6J,gBAAgB,kBAClC,IAAKxH,EACH,OAAOuI,EAAiB1D,iBAE1B0D,EAAiB1D,iBAAmB,IAAI2O,aAAaxT,GAChDrC,KAAKkN,wBAAwB,mBAChClN,KAAKmH,gBAAgB,iBAA2B9E,GAAQ,EAE5D,CACA,OAAOuI,EAAiB1D,gBAC1B,GAKC,CACDL,IAAK,2BACLzI,MAAO,WACL,IAAIwM,EAAmB5K,KAAKwC,sBAC5B,IAAKoI,EAAiBxD,eAAgB,CACpC,IAAI/E,EAASrC,KAAK6J,gBAAgB,gBAClC,IAAKxH,EACH,OAAOuI,EAAiBxD,eAE1BwD,EAAiBxD,eAAiB,IAAIyO,aAAaxT,GAC9CrC,KAAKkN,wBAAwB,iBAChClN,KAAKmH,gBAAgB,eAAyB9E,GAAQ,EAE1D,CACA,OAAOuI,EAAiBxD,cAC1B,GAMC,CACDP,IAAK,gBACLzI,MAAO,SAAuBuH,GAC5B,IAAK3F,KAAKiR,SACR,OAAOjR,KAET,GAAIA,KAAKiR,SAASwZ,0BAA4BzqB,KAAKoD,WAAWsnB,aAC5D,OAAO1qB,KAGT,GADAA,KAAKiR,SAASwZ,yBAA2BzqB,KAAKoD,WAAWsnB,cACpD1qB,KAAK8M,sBAAsB,kBAC9B,OAAO9M,KAET,IAAKA,KAAK8M,sBAAsB,yBAC9B,OAAO9M,KAET,IAAKA,KAAK8M,sBAAsB,yBAC9B,OAAO9M,KAET,IAAI2qB,EAAa3qB,KAAK8M,sBAAsB,gBACxClC,EAAmB5K,KAAKwC,sBAC5B,IAAKoI,EAAiB1D,iBAAkB,CACtC,IAAIuX,EAAYze,KAAK6N,UAAUpQ,QAC/BuC,KAAK4qB,6BACL5qB,KAAK6N,UAAY4Q,CACnB,CACIkM,IAAe/f,EAAiBxD,gBAClCpH,KAAK6qB,2BAGP,IAAIC,EAAgB9qB,KAAK6J,gBAAgB,kBACzC,IAAKihB,EACH,OAAO9qB,KAEH8qB,aAAyBjV,eAC7BiV,EAAgB,IAAIjV,aAAaiV,IAGnC,IAAIC,EAAc/qB,KAAK6J,gBAAgB,gBACvC,GAAI8gB,EAAY,CACd,IAAKI,EACH,OAAO/qB,KAEH+qB,aAAuBlV,eAC3BkV,EAAc,IAAIlV,aAAakV,GAEnC,CACA,IAAIC,EAAsBhrB,KAAK6J,gBAAgB,yBAC3CohB,EAAsBjrB,KAAK6J,gBAAgB,yBAC/C,IAAKohB,IAAwBD,EAC3B,OAAOhrB,KAWT,IATA,IAQIkrB,EARAC,EAAanrB,KAAKqoB,mBAAqB,EACvC+C,EAA2BD,EAAanrB,KAAK6J,gBAAgB,8BAAyC,KACtGwhB,EAA2BF,EAAanrB,KAAK6J,gBAAgB,8BAAyC,KACtGyhB,EAAmB3lB,EAAS4lB,qBAAqBvrB,MACjDwrB,EAAc,WACdC,EAAc,IAAI,KAClBC,EAAa,IAAI,KACjBC,EAAe,EAEV5mB,EAAQ,EAAGA,EAAQ+lB,EAAc/sB,OAAQgH,GAAS,EAAG4mB,GAAgB,EAAG,CAC/E,IAAIC,OAAS,EACb,IAAKV,EAAM,EAAGA,EAAM,EAAGA,KACrBU,EAASX,EAAoBU,EAAeT,IAC/B,IACX,iCAAmCI,EAAkBzf,KAAKggB,MAAgD,GAA1Cb,EAAoBW,EAAeT,IAAYU,EAAQF,GACvHD,EAAYK,UAAUJ,IAG1B,GAAIP,EACF,IAAKD,EAAM,EAAGA,EAAM,EAAGA,KACrBU,EAASP,EAAyBM,EAAeT,IACpC,IACX,iCAAmCI,EAAkBzf,KAAKggB,MAAqD,GAA/CT,EAAyBO,EAAeT,IAAYU,EAAQF,GAC5HD,EAAYK,UAAUJ,IAI5B,wCAA4C9gB,EAAiB1D,iBAAiBnC,GAAQ6F,EAAiB1D,iBAAiBnC,EAAQ,GAAI6F,EAAiB1D,iBAAiBnC,EAAQ,GAAI0mB,EAAaD,GAC/LA,EAAY5M,QAAQkM,EAAe/lB,GAC/B4lB,IACF,mCAAuC/f,EAAiBxD,eAAerC,GAAQ6F,EAAiBxD,eAAerC,EAAQ,GAAI6F,EAAiBxD,eAAerC,EAAQ,GAAI0mB,EAAaD,GACpLA,EAAY5M,QAAQmM,EAAahmB,IAEnC0mB,EAAYM,OACd,CAKA,OAJA/rB,KAAK8S,mBAAmB,iBAA2BgY,GAC/CH,GACF3qB,KAAK8S,mBAAmB,eAAyBiY,GAE5C/qB,IACT,GAOC,CACD6G,IAAK,cACLzI,MAIA,SAAqBoK,GACnBA,EAASwjB,gCAAkChsB,KAAK0C,UAAU3E,OAC1DiC,KAAK0C,UAAU+H,KAAKjC,EACtB,GAIC,CACD3B,IAAK,iBACLzI,MAAO,SAAwBoK,GAE7B,IAAIzD,EAAQyD,EAASwjB,gCACrB,IAAc,GAAVjnB,EAAa,CACf,GAAIA,IAAU/E,KAAK0C,UAAU3E,OAAS,EAAG,CACvC,IAAIkuB,EAAOjsB,KAAK0C,UAAU1C,KAAK0C,UAAU3E,OAAS,GAClDiC,KAAK0C,UAAUqC,GAASknB,EACxBA,EAAKD,gCAAkCjnB,CACzC,CACAyD,EAASwjB,iCAAmC,EAC5ChsB,KAAK0C,UAAUwpB,KACjB,CACF,GAEC,CACDrlB,IAAK,oBACLzI,MAAO,WACL,OAAO4B,KAAKkD,kCAAoC,mCAClD,IACE,CAAC,CACH2D,IAAK,6BACLzI,MAAO,SAAoC+tB,GACzC,OAAOA,GAAerqB,EAAKsqB,SAC7B,GACC,CACDvlB,IAAK,wBACLzI,MAAO,SAA+BT,EAAM2M,GAC1C,MAAM,OAAY,gBACpB,GAKC,CACDzD,IAAK,yBACLzI,MAAO,SAAgC8D,EAAOmqB,EAAcC,GAC1D,MAAM,OAAY,kBACpB,GACC,CACDzlB,IAAK,QACLzI,MAAO,SAAemuB,EAAYrqB,EAAOsqB,GACvC,IAAIliB,EA+IJ,IA7IEA,EADEiiB,EAAW1F,MAA4B,cAApB0F,EAAW1F,KACzB/kB,EAAK2qB,iBAAiBF,EAAYrqB,GAChCqqB,EAAW1F,MAA4B,eAApB0F,EAAW1F,KAChC/kB,EAAK4qB,kBAAkBH,EAAYrqB,GACjCqqB,EAAW1F,MAA4B,iBAApB0F,EAAW1F,KAChC/kB,EAAK6qB,oBAAoBJ,EAAYrqB,GAErC,IAAIJ,EAAKyqB,EAAW5uB,KAAMuE,IAE9ByC,GAAK4nB,EAAW5nB,GACrB2F,EAAKsiB,uBAAyBL,EAAWzoB,SACrC,KACF,cAAewG,EAAMiiB,EAAWzF,MAElCxc,EAAK1B,SAAW,cAAkB2jB,EAAW3jB,eACjBzG,IAAxBoqB,EAAWloB,WACbiG,EAAKjG,SAAWkoB,EAAWloB,UAEzBkoB,EAAWzjB,mBACbwB,EAAKxB,mBAAqB,eAAqByjB,EAAWzjB,oBACjDyjB,EAAWxjB,WACpBuB,EAAKvB,SAAW,cAAkBwjB,EAAWxjB,WAE/CuB,EAAKzB,QAAU,cAAkB0jB,EAAW1jB,SACxC0jB,EAAWrF,YACb5c,EAAKuiB,sBAAsB,eAAiBN,EAAWrF,cAC9CqF,EAAWtF,aACpB3c,EAAK7F,eAAe,eAAiB8nB,EAAWtF,cAElD3c,EAAK/F,WAAWgoB,EAAW/nB,WAC3B8F,EAAK6K,UAAYoX,EAAWpX,UAC5B7K,EAAK6c,iBAAmBoF,EAAWpF,iBACnC7c,EAAKwiB,gBAAkBP,EAAWO,gBAClCxiB,EAAKyiB,yBAA2BR,EAAWQ,8BACf5qB,IAAxBoqB,EAAW7C,WACbpf,EAAKof,SAAW6C,EAAW7C,eAEDvnB,IAAxBoqB,EAAWnF,WACb9c,EAAK+c,WAAakF,EAAWnF,eAEDjlB,IAA1BoqB,EAAWlD,aACb/e,EAAK+e,WAAakD,EAAWlD,YAE/B/e,EAAKgd,eAAiBiF,EAAWjF,eACjChd,EAAKid,cAAgBgF,EAAWhF,mBACFplB,IAA1BoqB,EAAW/E,aACbld,EAAKkd,WAAa+E,EAAW/E,YAE/Bld,EAAKmd,gBAAkB8E,EAAW9E,gBAClCnd,EAAKpH,gCAAkCqpB,EAAWrpB,qCACrBf,IAAzBoqB,EAAW7E,YACbpd,EAAKod,UAAY6E,EAAW7E,WAE9Bpd,EAAKvH,2BAA6BwpB,EAAWS,eAEzCT,EAAWU,oBACb3iB,EAAK4iB,aAAaD,kBAAoBV,EAAWU,wBAGvB9qB,IAAxBoqB,EAAWY,WACb7iB,EAAKd,iBAAmB+iB,EAAWY,eAEEhrB,IAAnCoqB,EAAWa,sBACb9iB,EAAK+iB,4BAA8Bd,EAAWa,0BAGrBjrB,IAAvBoqB,EAAW3C,UACbtf,EAAK4iB,aAAatD,QAAU2C,EAAW3C,cAGTznB,IAA5BoqB,EAAWhD,eACbjf,EAAKif,aAAegD,EAAWhD,mBAEDpnB,IAA5BoqB,EAAW/C,eACblf,EAAKkf,aAAe,eAAiB+C,EAAW/C,oBAEjBrnB,IAA7BoqB,EAAW9C,gBACbnf,EAAKmf,cAAgB8C,EAAW9C,eAGlCnf,EAAKsd,cAAgB2E,EAAW3E,YAChCtd,EAAKgf,eAAiBiD,EAAWjD,eAC7BiD,EAAW3O,kBACbtT,EAAK7H,eAAiB,EACtB6H,EAAKsT,iBAAmB4O,EAAUD,EAAW3O,iBAC7CtT,EAAKgjB,kBAAkB,cAAkBf,EAAWgB,oBAAqB,cAAkBhB,EAAWiB,qBAClGjB,EAAWkB,cACbnjB,EAAKmjB,YAAclB,EAAWkB,aAEhCnjB,EAAKyC,WAAa,GACdwf,EAAWmB,QACbpjB,EAAKyC,WAAWtC,KAAK,YAEnB8hB,EAAWoB,SACbrjB,EAAKyC,WAAWtC,KAAK,aAEnB8hB,EAAWqB,SACbtjB,EAAKyC,WAAWtC,KAAK,aAEnB8hB,EAAWsB,SACbvjB,EAAKyC,WAAWtC,KAAK,aAEnB8hB,EAAWuB,SACbxjB,EAAKyC,WAAWtC,KAAK,aAEnB8hB,EAAWwB,SACbzjB,EAAKyC,WAAWtC,KAAK,aAEnB8hB,EAAWyB,WACb1jB,EAAKyC,WAAWtC,KAAK,eAEnB8hB,EAAW0B,oBACb3jB,EAAKyC,WAAWtC,KAAK,yBAEnB8hB,EAAW2B,oBACb5jB,EAAKyC,WAAWtC,KAAK,yBAEvBH,EAAKwT,sBAAwB,oBACzB,yCACFxT,EAAK0B,oBAGP,oBAAyBugB,EAAYjiB,GAGnCiiB,EAAWtE,iBACb3d,EAAK6jB,mBAAqB5B,EAAWtE,iBAC5BsE,EAAWrE,aACpB5d,EAAK6jB,mBAAqB5B,EAAWrE,YAGnCqE,EAAWpE,sBAAwB,IACrC7d,EAAKrF,mBAAqB/C,EAAMksB,0BAA0B7B,EAAWpE,4BAGzChmB,IAA1BoqB,EAAWnE,YAAsD,OAA1BmE,EAAWnE,aACpD9d,EAAK3E,SAAWzD,EAAMmsB,oBAAoB9B,EAAWnE,YACjDmE,EAAWlE,qBACb/d,EAAK+d,mBAAqBkE,EAAWlE,qBAIrCkE,EAAW9iB,WAAY,CACzB,IAAK,IAAI6kB,EAAiB,EAAGA,EAAiB/B,EAAW9iB,WAAW1L,OAAQuwB,IAAkB,CAC5F,IAAIC,EAAkBhC,EAAW9iB,WAAW6kB,GACxCE,GAAgB,OAAS,qBACzBA,GACFlkB,EAAKb,WAAWgB,KAAK+jB,EAAcC,MAAMF,GAE7C,CACA,EAAAG,EAAA,qBAA0BpkB,EAAMiiB,EAAYrqB,EAC9C,CAuBA,GAtBIqqB,EAAWoC,aACbzsB,EAAM0sB,eAAetkB,EAAMiiB,EAAWsC,gBAAiBtC,EAAWuC,cAAevC,EAAWwC,gBAAiBxC,EAAWyC,kBAAoB,GAG1IzC,EAAWnD,YAAc6F,MAAM1C,EAAWnD,WAC5C9e,EAAK8e,UAAYvd,KAAKkR,IAAImS,SAAS3C,EAAWnD,YAE9C9e,EAAK8e,UAAY,UAGfmD,EAAWjnB,iBACbxD,EAAKqtB,uBAAuBjtB,EAAOoI,EAAMiiB,GAGvCA,EAAW6C,aACb9kB,EAAK4iB,aAAamC,KAAO,CACvBC,IAAK/C,EAAW6C,WAChBG,UAAWhD,EAAWiD,aAAejD,EAAWiD,aAAe,KAC/DC,UAAWlD,EAAWmD,aAAenD,EAAWmD,aAAe,OAI/DnD,EAAW7pB,UACb,IAAK,IAAIqC,EAAQ,EAAGA,EAAQwnB,EAAW7pB,UAAU3E,OAAQgH,IAAS,CAChE,IAAI4qB,EAAiBpD,EAAW7pB,UAAUqC,GACtCyD,EAAW8B,EAAK3B,eAAegnB,EAAehyB,MAwDlD,GAvDIgyB,EAAehrB,KACjB6D,EAAS7D,GAAKgrB,EAAehrB,IAE3B,MACEgrB,EAAe7I,KACjB,cAAete,EAAUmnB,EAAe7I,MAExC,cAAete,EAAU+jB,EAAWzF,OAGxCte,EAASI,SAAW,cAAkB+mB,EAAe/mB,eACrBzG,IAA5BwtB,EAAetrB,WACjBmE,EAASnE,SAAWsrB,EAAetrB,eAELlC,IAA5BwtB,EAAexC,WACjB3kB,EAASgB,iBAAmBmmB,EAAexC,eAEFhrB,IAAvCwtB,EAAevC,sBACjB5kB,EAAS6kB,4BAA8BsC,EAAevC,0BAEvBjrB,IAA7BwtB,EAAenrB,WAAwD,OAA7BmrB,EAAenrB,WAC3DgE,EAASjE,WAAWorB,EAAenrB,gBAEJrC,IAA7BwtB,EAAexa,WAAwD,OAA7Bwa,EAAexa,YAC3D3M,EAAS2M,UAAYwa,EAAexa,gBAEJhT,IAA9BwtB,EAAetI,YAA0D,OAA9BsI,EAAetI,aAC5D7e,EAAS6e,WAAasI,EAAetI,YAEnCsI,EAAe7mB,mBACjBN,EAASM,mBAAqB,eAAqB6mB,EAAe7mB,oBACzD6mB,EAAe5mB,WACxBP,EAASO,SAAW,cAAkB4mB,EAAe5mB,WAEvDP,EAASK,QAAU,cAAkB8mB,EAAe9mB,SACd1G,MAAlCwtB,EAAelI,iBAAkE,MAAlCkI,EAAelI,kBAChEjf,EAASif,gBAAkBkI,EAAelI,iBAEbtlB,MAA3BwtB,EAAevI,UAAoD,MAA3BuI,EAAevI,WACzD5e,EAAS6e,WAAasI,EAAevI,UAEDjlB,MAAlCwtB,EAAe7C,iBAAkE,MAAlC6C,EAAe7C,kBAChEtkB,EAASskB,gBAAkB6C,EAAe7C,iBAEG3qB,MAA3CwtB,EAAe5C,0BAAoF,MAA3C4C,EAAe5C,2BACzEvkB,EAASukB,yBAA2B4C,EAAe5C,0BAEpB5qB,MAA7BwtB,EAAetG,YAAsE,MAA3CsG,EAAe5C,2BAC3DvkB,EAAS6gB,WAAasG,EAAetG,YAGnCsG,EAAerqB,iBACjBxD,EAAKqtB,uBAAuBjtB,EAAOsG,EAAUmnB,GAG3CA,EAAelmB,WAAY,CAC7B,IAAK,IAAImmB,EAAkB,EAAGA,EAAkBD,EAAelmB,WAAW1L,OAAQ6xB,IAAmB,CACnG,IAAIC,EAAmBF,EAAelmB,WAAWmmB,GAC7CE,GAAiB,OAAS,qBAC1BA,GACFtnB,EAASiB,WAAWgB,KAAKqlB,EAAerB,MAAMoB,GAElD,CACA,EAAAnB,EAAA,qBAA0BlmB,EAAUmnB,EAAgBztB,GAChDytB,EAAehB,aACjBzsB,EAAM0sB,eAAepmB,EAAUmnB,EAAed,gBAAiBc,EAAeb,cAAea,EAAeZ,gBAAiBY,EAAeX,kBAAoB,EAEpK,CACF,CAGF,GAAIzC,EAAWxD,cAAe,CAC5B,IAAIA,EAAgBwD,EAAWxD,cAS/B,GARAze,EAAK2e,4BAA8BF,EAAcC,cAC7CD,EAAc7nB,YAChBoJ,EAAKylB,sBAAsB,SAAU,IAAIla,aAAakT,EAAc7nB,YAAa,IAAI,GACrFoJ,EAAKxH,yBAAyB7B,iBAAmB8nB,EAAc9nB,iBAC/DqJ,EAAKxH,yBAAyBhC,eAAiBioB,EAAcjoB,gBAE7DwJ,EAAKxH,yBAAyB7B,iBAAmB8nB,EAAc9nB,iBAE7DsrB,EAAWxD,cAAcI,iBAAkB,CAC7C,IAAIA,EAAmBoD,EAAWxD,cAAcI,iBAChD,IAAK,IAAI/c,KAAQ+c,EAAiB3c,KAChClC,EAAKylB,sBAAsB3jB,EAAM,IAAIyJ,aAAasT,EAAiB3c,KAAKJ,IAAQ+c,EAAiBnS,QAAQ5K,IAAO,GAChH9B,EAAK4e,gCAAgCjS,MAAM7K,GAAQ+c,EAAiBlS,MAAM7K,EAE9E,CACF,CACA,OAAO9B,CACT,GACC,CACDzD,IAAK,SACLzI,MAAO,SAAgBwO,GACrB,IAAIojB,EAAY,KACZC,EAAY,KAYhB,OAXArjB,EAAOO,SAAQ,SAAU7C,GACvB,IACI4lB,EADe5lB,EAAKW,kBACOilB,YAC1BF,GAAcC,GAIjBD,EAAUG,gBAAgBD,EAAYE,cACtCH,EAAUI,gBAAgBH,EAAYI,gBAJtCN,EAAYE,EAAYE,aACxBH,EAAYC,EAAYI,aAK5B,IACKN,GAAcC,EAMZ,CACLM,IAAKP,EACLQ,IAAKP,GAPE,CACLM,IAAK,WACLC,IAAK,WAOX,GAMC,CACD3pB,IAAK,SACLzI,MAAO,SAAgBqyB,GACrB,IAAIC,EAAeD,aAAgCzzB,MAAQ8E,EAAK6uB,OAAOF,GAAwBA,EAC/F,OAAO,WAAeC,EAAaH,IAAKG,EAAaF,IACvD,GAWC,CACD3pB,IAAK,cACLzI,MAAO,SAAqBwO,GAC1B,IAAIgkB,IAAgB3wB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAC/E4wB,EAAqB5wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC3D2uB,EAAe7wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EACrD4uB,EAAyB9wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC/D6uB,EAAsB/wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAChE,OAAO,QAAiBL,EAAKmvB,sBAAsBrkB,EAAQgkB,EAAeC,EAAoBC,EAAcC,EAAwBC,GAAqB,GAC3J,GAWC,CACDnqB,IAAK,mBACLzI,MAAO,SAA0BwO,GAC/B,IAAIgkB,IAAgB3wB,UAAUlC,OAAS,QAAsBoE,IAAjBlC,UAAU,KAAmBA,UAAU,GAC/E4wB,EAAqB5wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC3D2uB,EAAe7wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EACrD4uB,EAAyB9wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAC/D6uB,EAAsB/wB,UAAUlC,OAAS,EAAIkC,UAAU,QAAKkC,EAChE,OAAO,QAAkBL,EAAKmvB,sBAAsBrkB,EAAQgkB,EAAeC,EAAoBC,EAAcC,EAAwBC,GAAqB,IAAO,UACnK,GACC,CACDnqB,IAAK,wBACLzI,MAAoB,UAAyB,SAAS6yB,EAAsBrkB,GAC1E,IAAIgkB,EACFC,EACAC,EACAC,EACAC,EACAE,EACAnsB,EACAuM,EACA6f,EACAC,EACAC,EACAC,EACAhnB,EACA1F,EACA2sB,EACAxJ,EACAyJ,EACAC,EACApvB,EACAqvB,EACAC,EACAC,EACAC,EACAC,EACAC,EACA/zB,EACAg0B,EACAC,EACA3f,EACA4f,EACAC,EACAjgB,EACAkgB,EACAC,EAEAC,EACAC,EAAQtyB,UACV,OAAO,UAAyB,SAAgCuyB,GAC9D,OACE,OAAQA,EAASC,KAAOD,EAAS3zB,MAC/B,KAAK,EASH,GARA+xB,IAAgB2B,EAAMx0B,OAAS,QAAkBoE,IAAbowB,EAAM,KAAmBA,EAAM,GACnE1B,EAAqB0B,EAAMx0B,OAAS,EAAIw0B,EAAM,QAAKpwB,EACnD2uB,EAAeyB,EAAMx0B,OAAS,EAAIw0B,EAAM,QAAKpwB,EAC7C4uB,EAAyBwB,EAAMx0B,OAAS,EAAIw0B,EAAM,QAAKpwB,EACvD6uB,EAAsBuB,EAAMx0B,OAAS,EAAIw0B,EAAM,QAAKpwB,EACpD+uB,EAAUqB,EAAMx0B,OAAS,EAAIw0B,EAAM,QAAKpwB,EAGhB,KADxByK,EAASA,EAAO8lB,OAAOhzB,UACV3B,OAAe,CAC1By0B,EAAS3zB,KAAO,EAChB,KACF,CACA,OAAO2zB,EAASG,OAAO,SAAU,MACnC,KAAK,EACH,GAAI9B,EAAoB,CACtB2B,EAAS3zB,KAAO,GAChB,KACF,CACAyS,EAAgB,EAChBvM,EAAQ,EACV,KAAK,GACH,KAAMA,EAAQ6H,EAAO7O,QAAS,CAC5By0B,EAAS3zB,KAAO,GAChB,KACF,CAEA,MADAyS,GAAiB1E,EAAO7H,GAAO0D,qBACR,OAAQ,CAC7B+pB,EAAS3zB,KAAO,GAChB,KACF,CAEA,OADA,SAAY,8IACL2zB,EAASG,OAAO,SAAU,MACnC,KAAK,GACH5tB,IACAytB,EAAS3zB,KAAO,GAChB,MACF,KAAK,GACCmyB,IACFD,GAAyB,GAE3BI,EAAgB,IAAIn0B,MACpBo0B,EAAqB,IAAIp0B,MACzBq0B,EAAc,IAAIr0B,MAClBs0B,EAAyC1kB,EAAO,GAAG1J,gCACnD6B,EAAQ,EACV,KAAK,GACH,KAAMA,EAAQ6H,EAAO7O,QAAS,CAC5By0B,EAAS3zB,KAAO,GAChB,KACF,CAEA,KADAyL,EAAOsC,EAAO7H,IACJ6tB,aAAc,CACtBJ,EAAS3zB,KAAO,GAChB,KACF,CAEA,OADA,SAAY,iCACL2zB,EAASG,OAAO,SAAU,MACnC,KAAK,GACH,GAAMrB,IAA2ChnB,EAAKpH,gCAAkC,CACtFsvB,EAAS3zB,KAAO,GAChB,KACF,CAEA,OADA,SAAY,8EACL2zB,EAASG,OAAO,SAAU,MACnC,KAAK,GAIH,GAHI5B,GACFM,EAAY5mB,KAAKH,EAAKgD,mBAEpB0jB,EACF,GAAI1mB,EAAK1F,SAEP,IADAA,EAAW0F,EAAK1F,oBACQ,IAAe,CACrC,IAAK2sB,EAAW,EAAGA,EAAW3sB,EAASiuB,aAAa90B,OAAQwzB,IACtDJ,EAAcnkB,QAAQpI,EAASiuB,aAAatB,IAAa,GAC3DJ,EAAc1mB,KAAK7F,EAASiuB,aAAatB,IAG7C,IAAKxJ,EAAW,EAAGA,EAAWzd,EAAKuD,UAAU9P,OAAQgqB,IACnDqJ,EAAmB3mB,KAAK0mB,EAAcnkB,QAAQpI,EAASiuB,aAAavoB,EAAKuD,UAAUka,GAAU7E,iBAC7FmO,EAAY5mB,KAAKH,EAAKuD,UAAUka,GAAUlW,WAE9C,MAIE,IAHIsf,EAAcnkB,QAAQpI,GAAY,GACpCusB,EAAc1mB,KAAK7F,GAEhB4sB,EAAY,EAAGA,EAAYlnB,EAAKuD,UAAU9P,OAAQyzB,IACrDJ,EAAmB3mB,KAAK0mB,EAAcnkB,QAAQpI,IAC9CysB,EAAY5mB,KAAKH,EAAKuD,UAAU2jB,GAAW3f,iBAI/C,IAAK4f,EAAa,EAAGA,EAAannB,EAAKuD,UAAU9P,OAAQ0zB,IACvDL,EAAmB3mB,KAAK,GACxB4mB,EAAY5mB,KAAKH,EAAKuD,UAAU4jB,GAAY5f,YAIpD,KAAK,GACH9M,IACAytB,EAAS3zB,KAAO,GAChB,MACF,KAAK,GAQH,GAPAwD,EAASuK,EAAO,GAChB8kB,EAAwB,SAA+BpnB,GACrD,IAAIwoB,EAAKxoB,EAAKzE,oBAAmB,GAEjC,MAAO,CADU,oBAA2ByE,GAAM,GAAO,GACrCwoB,EACtB,EACAnB,EAAwBD,EAAsBrvB,GAASuvB,GAAyB,OAAeD,EAAuB,GAAIE,EAAmBD,EAAuB,GAAIE,EAAkBF,EAAuB,IAC5MV,EAAS,CACZsB,EAAS3zB,KAAO,GAChB,KACF,CAEA,YADA2zB,EAAS3zB,KAAO,IAElB,KAAK,GACHkzB,EAAkB,IAAI/0B,MAAM4P,EAAO7O,OAAS,GAC5CC,EAAI,EACN,KAAK,GACH,KAAMA,EAAI4O,EAAO7O,QAAS,CACxBy0B,EAAS3zB,KAAO,GAChB,KACF,CAEA,GADAkzB,EAAgB/zB,EAAI,GAAK0zB,EAAsB9kB,EAAO5O,KACjDkzB,EAAS,CACZsB,EAAS3zB,KAAO,GAChB,KACF,CAEA,YADA2zB,EAAS3zB,KAAO,IAElB,KAAK,GACHb,IACAw0B,EAAS3zB,KAAO,GAChB,MACF,KAAK,GACHmzB,EAAiBH,EAAiBkB,gBAAgBjB,EAAiBC,EAAiBlB,EAAoBK,GAAUN,GAClHqB,EAAqBD,EAAenzB,OACtC,KAAK,GACH,GAAIozB,EAAmB9zB,KAAM,CAC3Bq0B,EAAS3zB,KAAO,GAChB,KACF,CACA,IAAKqyB,EAAS,CACZsB,EAAS3zB,KAAO,GAChB,KACF,CAEA,YADA2zB,EAAS3zB,KAAO,IAElB,KAAK,GACHozB,EAAqBD,EAAenzB,OACpC2zB,EAAS3zB,KAAO,GAChB,MACF,KAAK,GACHyT,EAAa2f,EAAmB7zB,MAC3B0yB,IACHA,EAAe,IAAIhvB,EAAKO,EAAO1E,KAAO,UAAW0E,EAAOe,aAE1D8uB,EAAmB5f,EAAW0gB,kBAAkBlC,OAAc3uB,EAAW+uB,GACzEiB,EAAuBD,EAAiBrzB,OAC1C,KAAK,GACH,GAAIszB,EAAqBh0B,KAAM,CAC7Bq0B,EAAS3zB,KAAO,GAChB,KACF,CACA,IAAKqyB,EAAS,CACZsB,EAAS3zB,KAAO,GAChB,KACF,CAEA,YADA2zB,EAAS3zB,KAAO,IAElB,KAAK,GACHszB,EAAuBD,EAAiBrzB,OACxC2zB,EAAS3zB,KAAO,GAChB,MACF,KAAK,GAKH,GAHAiyB,EAAarJ,gBAAkBplB,EAAOolB,gBACtCqJ,EAAa5tB,gCAAkCb,EAAOa,gCAElD0tB,EACF,IAAK7rB,EAAQ,EAAGA,EAAQ6H,EAAO7O,OAAQgH,IACrC6H,EAAO7H,GAAOgS,UAIlB,GAAIga,GAA0BC,EAAqB,CAKjD,IAHAF,EAAa9e,mBACbjN,EAAQ,EACRmN,EAAS,EACFnN,EAAQssB,EAAYtzB,QACzB,sBAA0B,EAAGmU,EAAQmf,EAAYtsB,GAAQ+rB,OAAc3uB,GAAW,GAClF+P,GAAUmf,EAAYtsB,GACtBA,IAEFqtB,EAAc11B,EAA2Bo0B,EAAajjB,WACtD,IACE,IAAKukB,EAAYl0B,MAAOm0B,EAAUD,EAAYh1B,KAAKe,MACvCk0B,EAAQj0B,MACVwH,qBAMZ,CAJE,MAAOnH,GACP2zB,EAAY/zB,EAAEI,EAChB,CAAE,QACA2zB,EAAY7zB,GACd,CACAuyB,EAAajrB,oBAAmB,EAClC,CACA,GAAImrB,EAAqB,CAGvB,KAFAsB,EAAmB,IAAI,IAAcjwB,EAAO1E,KAAO,UAAW0E,EAAOe,aACpDyvB,aAAe1B,EAC3BpJ,EAAW,EAAGA,EAAW+I,EAAajjB,UAAU9P,OAAQgqB,IAC3D+I,EAAajjB,UAAUka,GAAU7E,cAAgBkO,EAAmBrJ,GAEtE+I,EAAalsB,SAAW0tB,CAC1B,MACExB,EAAalsB,SAAWvC,EAAOuC,SAEjC,OAAO4tB,EAASG,OAAO,SAAU7B,GACnC,KAAK,GACL,IAAK,MACH,OAAO0B,EAASS,OAGxB,GAAGhC,EACL,OAEKnvB,CACT,CAviI+B,CAuiI7B,KAKFA,EAAKsqB,UAAY,cAIjBtqB,EAAKoxB,SAAW,aAIhBpxB,EAAKqxB,WAAa,eAIlBrxB,EAAKmB,YAAc,gBAInBnB,EAAKsxB,OAAS,EAIdtxB,EAAKuxB,UAAY,EAIjBvxB,EAAKwxB,QAAU,EAIfxxB,EAAKyxB,QAAU,EAIfzxB,EAAK0xB,QAAU,EAIf1xB,EAAK2xB,UAAY,EAIjB3xB,EAAK4xB,YAAc,EAInB5xB,EAAK6xB,SAAW,EAIhB7xB,EAAK8xB,WAAa,EAIlB9xB,EAAK+xB,mBAAqB,EAI1B/xB,EAAKgyB,kBAAoB,EAIzBhyB,EAAKiyB,OAAS,EAIdjyB,EAAKkyB,KAAO,EAIZlyB,EAAKmyB,MAAQ,EAIbnyB,EAAKoyB,IAAM,EAIXpyB,EAAKqyB,OAAS,EAIdryB,EAAKqU,gCAAiC,EAMtCrU,EAAK4qB,kBAAoB,SAAUH,EAAYrqB,GAC7C,MAAM,OAAY,aACpB,EAKAJ,EAAK6qB,oBAAsB,SAAUJ,EAAYrqB,GAC/C,MAAM,OAAY,eACpB,EAKAJ,EAAK2qB,iBAAmB,SAAUF,EAAYrqB,GAC5C,MAAM,OAAY,YACpB,GACA,OAAc,eAAgBJ,GAI9BA,EAAKxE,UAAU82B,gBAAkB,SAAUzvB,GACzC,OAAO3E,KAAKq0B,gBAAgB1vB,EAC9B,EACA7C,EAAKwyB,WAAaxyB,EAAKwyB,YAAc,WACnC,MAAM,IAAIC,MAAM,+CAClB,EACAzyB,EAAK0yB,UAAY1yB,EAAK0yB,WAAa,WACjC,MAAM,IAAID,MAAM,+CAClB,EACAzyB,EAAK2yB,aAAe3yB,EAAK2yB,cAAgB,WACvC,MAAM,IAAIF,MAAM,+CAClB,EACAzyB,EAAK4yB,eAAiB5yB,EAAK4yB,gBAAkB,WAC3C,MAAM,IAAIH,MAAM,+CAClB,EACAzyB,EAAK6yB,gBAAkB7yB,EAAK6yB,iBAAmB,WAC7C,MAAM,IAAIJ,MAAM,+CAClB,EACAzyB,EAAK8yB,YAAc9yB,EAAK8yB,aAAe,WACrC,MAAM,IAAIL,MAAM,+CAClB,EACAzyB,EAAK+yB,YAAc/yB,EAAK+yB,aAAe,WACrC,MAAM,IAAIN,MAAM,+CAClB,EACAzyB,EAAKgzB,aAAehzB,EAAKgzB,cAAgB,WACvC,MAAM,IAAIP,MAAM,+CAClB,EACAzyB,EAAKizB,kBAAoBjzB,EAAKizB,mBAAqB,WACjD,MAAM,IAAIR,MAAM,+CAClB,EACAzyB,EAAKkzB,0BAA4BlzB,EAAKkzB,2BAA6B,WACjE,MAAM,IAAIT,MAAM,+CAClB,EACAzyB,EAAKmzB,WAAanzB,EAAKmzB,YAAc,WACnC,MAAM,IAAIV,MAAM,+CAClB,EACAzyB,EAAKozB,iBAAmBpzB,EAAKozB,kBAAoB,WAC/C,MAAM,IAAIX,MAAM,+CAClB,EACAzyB,EAAKqzB,gBAAkBrzB,EAAKqzB,iBAAmB,WAC7C,MAAM,IAAIZ,MAAM,+CAClB,EACAzyB,EAAKszB,YAActzB,EAAKszB,aAAe,WACrC,MAAM,IAAIb,MAAM,+CAClB,EACAzyB,EAAKuzB,cAAgBvzB,EAAKuzB,eAAiB,WACzC,MAAM,IAAId,MAAM,+CAClB,EACAzyB,EAAKwzB,iBAAmBxzB,EAAKwzB,kBAAoB,WAC/C,MAAM,IAAIf,MAAM,+CAClB,C","sources":["webpack://freak-noize-studio/./node_modules/@babylonjs/core/Meshes/mesh.js"],"sourcesContent":["import _slicedToArray from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _assertThisInitialized from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _inherits from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _possibleConstructorReturn from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _getPrototypeOf from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _createClass from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _regeneratorRuntime from \"C:/Users/camila/Documents/FreakNoize-Studio-2022/node_modules/@babel/runtime/regenerator/index.js\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { Observable } from \"../Misc/observable.js\";\nimport { Tools, AsyncLoop } from \"../Misc/tools.js\";\nimport { DeepCopier } from \"../Misc/deepCopier.js\";\nimport { Tags } from \"../Misc/tags.js\";\nimport { runCoroutineSync, runCoroutineAsync, createYieldingScheduler } from \"../Misc/coroutine.js\";\nimport { Camera } from \"../Cameras/camera.js\";\nimport { ScenePerformancePriority } from \"../scene.js\";\nimport { Quaternion, Matrix, Vector3, Vector2 } from \"../Maths/math.vector.js\";\nimport { Color3 } from \"../Maths/math.color.js\";\nimport { Node } from \"../node.js\";\nimport { VertexBuffer, Buffer } from \"../Buffers/buffer.js\";\nimport { VertexData } from \"./mesh.vertexData.js\";\nimport { Geometry } from \"./geometry.js\";\nimport { AbstractMesh } from \"./abstractMesh.js\";\nimport { SubMesh } from \"./subMesh.js\";\nimport { Material } from \"../Materials/material.js\";\nimport { MultiMaterial } from \"../Materials/multiMaterial.js\";\nimport { SceneLoaderFlags } from \"../Loading/sceneLoaderFlags.js\";\nimport { SerializationHelper } from \"../Misc/decorators.js\";\nimport { Logger } from \"../Misc/logger.js\";\nimport { GetClass, RegisterClass } from \"../Misc/typeStore.js\";\nimport { _WarnImport } from \"../Misc/devTools.js\";\nimport { SceneComponentConstants } from \"../sceneComponent.js\";\nimport { MeshLODLevel } from \"./meshLODLevel.js\";\n/**\n * @internal\n **/\nexport var _CreationDataStorage = /*#__PURE__*/_createClass(function _CreationDataStorage() {\n  _classCallCheck(this, _CreationDataStorage);\n});\n/**\n * @internal\n **/\nvar _InstanceDataStorage = /*#__PURE__*/_createClass(function _InstanceDataStorage() {\n  _classCallCheck(this, _InstanceDataStorage);\n  this.visibleInstances = {};\n  this.batchCache = new _InstancesBatch();\n  this.batchCacheReplacementModeInFrozenMode = new _InstancesBatch();\n  this.instancesBufferSize = 32 * 16 * 4; // let's start with a maximum of 32 instances\n});\n/**\n * @internal\n **/\n\nexport var _InstancesBatch = /*#__PURE__*/_createClass(function _InstancesBatch() {\n  _classCallCheck(this, _InstancesBatch);\n  this.mustReturn = false;\n  this.visibleInstances = new Array();\n  this.renderSelf = new Array();\n  this.hardwareInstancedRendering = new Array();\n});\n/**\n * @internal\n **/\nvar _ThinInstanceDataStorage = /*#__PURE__*/_createClass(function _ThinInstanceDataStorage() {\n  _classCallCheck(this, _ThinInstanceDataStorage);\n  this.instancesCount = 0;\n  this.matrixBuffer = null;\n  this.previousMatrixBuffer = null;\n  this.matrixBufferSize = 32 * 16; // let's start with a maximum of 32 thin instances\n  this.matrixData = null;\n  this.boundingVectors = [];\n  this.worldMatrices = null;\n});\n/**\n * @internal\n **/\nvar _InternalMeshDataInfo = /*#__PURE__*/_createClass(function _InternalMeshDataInfo() {\n  _classCallCheck(this, _InternalMeshDataInfo);\n  this._areNormalsFrozen = false; // Will be used by ribbons mainly\n  // Will be used to save a source mesh reference, If any\n  this._source = null;\n  // Will be used to for fast cloned mesh lookup\n  this.meshMap = null;\n  this._preActivateId = -1;\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  this._LODLevels = new Array();\n  /** Alternative definition of LOD level, using screen coverage instead of distance */\n  this._useLODScreenCoverage = false;\n  this._effectiveMaterial = null;\n  this._forcedInstanceCount = 0;\n});\n/**\n * Class used to represent renderable models\n */\nexport var Mesh = /*#__PURE__*/function (_AbstractMesh) {\n  _inherits(Mesh, _AbstractMesh);\n  var _super = _createSuper(Mesh);\n  /**\n   * @constructor\n   * @param name The value used by scene.getMeshByName() to do a lookup.\n   * @param scene The scene to add this mesh to.\n   * @param parent The parent of this mesh, if it has one\n   * @param source An optional Mesh from which geometry is shared, cloned.\n   * @param doNotCloneChildren When cloning, skip cloning child meshes of source, default False.\n   *                  When false, achieved by calling a clone(), also passing False.\n   *                  This will make creation of children, recursive.\n   * @param clonePhysicsImpostor When cloning, include cloning mesh physics impostor, default True.\n   */\n  function Mesh(name) {\n    var _this;\n    var scene = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    var source = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    var doNotCloneChildren = arguments.length > 4 ? arguments[4] : undefined;\n    var clonePhysicsImpostor = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    _classCallCheck(this, Mesh);\n    _this = _super.call(this, name, scene);\n    // Internal data\n    _this._internalMeshDataInfo = new _InternalMeshDataInfo();\n    // Members\n    /**\n     * Gets the delay loading state of the mesh (when delay loading is turned on)\n     * @see https://doc.babylonjs.com/how_to/using_the_incremental_loading_system\n     */\n    _this.delayLoadState = 0;\n    /**\n     * Gets the list of instances created from this mesh\n     * it is not supposed to be modified manually.\n     * Note also that the order of the InstancedMesh wihin the array is not significant and might change.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_instances\n     */\n    _this.instances = new Array();\n    // Private\n    /** @internal */\n    _this._creationDataStorage = null;\n    /** @internal */\n    _this._geometry = null;\n    /** @internal */\n    _this._instanceDataStorage = new _InstanceDataStorage();\n    /** @internal */\n    _this._thinInstanceDataStorage = new _ThinInstanceDataStorage();\n    /** @internal */\n    _this._shouldGenerateFlatShading = false;\n    // Use by builder only to know what orientation were the mesh build in.\n    /** @internal */\n    _this._originalBuilderSideOrientation = Mesh.DEFAULTSIDE;\n    /**\n     * Use this property to change the original side orientation defined at construction time\n     */\n    _this.overrideMaterialSideOrientation = null;\n    /**\n     * Gets or sets a boolean indicating whether to render ignoring the active camera's max z setting. (false by default)\n     * Note this will reduce performance when set to true.\n     */\n    _this.ignoreCameraMaxZ = false;\n    scene = _this.getScene();\n    _this._onBeforeDraw = function (isInstance, world, effectiveMaterial) {\n      if (isInstance && effectiveMaterial) {\n        if (_this._uniformBuffer) {\n          _this.transferToEffect(world);\n        } else {\n          effectiveMaterial.bindOnlyWorldMatrix(world);\n        }\n      }\n    };\n    if (source) {\n      // Geometry\n      if (source._geometry) {\n        source._geometry.applyToMesh(_assertThisInitialized(_this));\n      }\n      // Deep copy\n      DeepCopier.DeepCopy(source, _assertThisInitialized(_this), [\"name\", \"material\", \"skeleton\", \"instances\", \"parent\", \"uniqueId\", \"source\", \"metadata\", \"morphTargetManager\", \"hasInstances\", \"worldMatrixInstancedBuffer\", \"previousWorldMatrixInstancedBuffer\", \"hasLODLevels\", \"geometry\", \"isBlocked\", \"areNormalsFrozen\", \"facetNb\", \"isFacetDataEnabled\", \"lightSources\", \"useBones\", \"isAnInstance\", \"collider\", \"edgesRenderer\", \"forward\", \"up\", \"right\", \"absolutePosition\", \"absoluteScaling\", \"absoluteRotationQuaternion\", \"isWorldMatrixFrozen\", \"nonUniformScaling\", \"behaviors\", \"worldMatrixFromCache\", \"hasThinInstances\", \"cloneMeshMap\", \"hasBoundingInfo\"], [\"_poseMatrix\"]);\n      // Source mesh\n      _this._internalMeshDataInfo._source = source;\n      if (scene.useClonedMeshMap) {\n        if (!source._internalMeshDataInfo.meshMap) {\n          source._internalMeshDataInfo.meshMap = {};\n        }\n        source._internalMeshDataInfo.meshMap[_this.uniqueId] = _assertThisInitialized(_this);\n      }\n      // Construction Params\n      // Clone parameters allowing mesh to be updated in case of parametric shapes.\n      _this._originalBuilderSideOrientation = source._originalBuilderSideOrientation;\n      _this._creationDataStorage = source._creationDataStorage;\n      // Animation ranges\n      if (source._ranges) {\n        var ranges = source._ranges;\n        for (var _name in ranges) {\n          if (!Object.prototype.hasOwnProperty.call(ranges, _name)) {\n            continue;\n          }\n          if (!ranges[_name]) {\n            continue;\n          }\n          _this.createAnimationRange(_name, ranges[_name].from, ranges[_name].to);\n        }\n      }\n      // Metadata\n      if (source.metadata && source.metadata.clone) {\n        _this.metadata = source.metadata.clone();\n      } else {\n        _this.metadata = source.metadata;\n      }\n      // Tags\n      if (Tags && Tags.HasTags(source)) {\n        Tags.AddTagsTo(_assertThisInitialized(_this), Tags.GetTags(source, true));\n      }\n      // Enabled. We shouldn't need to check the source's ancestors, as this mesh\n      // will have the same ones.\n      _this.setEnabled(source.isEnabled(false));\n      // Parent\n      _this.parent = source.parent;\n      // Pivot\n      _this.setPivotMatrix(source.getPivotMatrix());\n      _this.id = name + \".\" + source.id;\n      // Material\n      _this.material = source.material;\n      if (!doNotCloneChildren) {\n        // Children\n        var directDescendants = source.getDescendants(true);\n        for (var index = 0; index < directDescendants.length; index++) {\n          var child = directDescendants[index];\n          if (child.clone) {\n            child.clone(name + \".\" + child.name, _assertThisInitialized(_this));\n          }\n        }\n      }\n      // Morphs\n      if (source.morphTargetManager) {\n        _this.morphTargetManager = source.morphTargetManager;\n      }\n      // Physics clone\n      if (scene.getPhysicsEngine) {\n        var physicsEngine = scene.getPhysicsEngine();\n        if (clonePhysicsImpostor && physicsEngine) {\n          var impostor = physicsEngine.getImpostorForPhysicsObject(source);\n          if (impostor) {\n            _this.physicsImpostor = impostor.clone(_assertThisInitialized(_this));\n          }\n        }\n      }\n      // Particles\n      for (var _index = 0; _index < scene.particleSystems.length; _index++) {\n        var system = scene.particleSystems[_index];\n        if (system.emitter === source) {\n          system.clone(system.name, _assertThisInitialized(_this));\n        }\n      }\n      // Skeleton\n      _this.skeleton = source.skeleton;\n      _this.refreshBoundingInfo(true, true);\n      _this.computeWorldMatrix(true);\n    }\n    // Parent\n    if (parent !== null) {\n      _this.parent = parent;\n    }\n    _this._instanceDataStorage.hardwareInstancedRendering = _this.getEngine().getCaps().instancedArrays;\n    _this._internalMeshDataInfo._onMeshReadyObserverAdded = function (observer) {\n      // only notify once! then unregister the observer\n      observer.unregisterOnNextCall = true;\n      if (_this.isReady(true)) {\n        _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n      } else {\n        if (!_this._internalMeshDataInfo._checkReadinessObserver) {\n          _this._internalMeshDataInfo._checkReadinessObserver = _this._scene.onBeforeRenderObservable.add(function () {\n            // check for complete readiness\n            if (_this.isReady(true)) {\n              _this._scene.onBeforeRenderObservable.remove(_this._internalMeshDataInfo._checkReadinessObserver);\n              _this._internalMeshDataInfo._checkReadinessObserver = null;\n              _this.onMeshReadyObservable.notifyObservers(_assertThisInitialized(_this));\n            }\n          });\n        }\n      }\n    };\n    _this.onMeshReadyObservable = new Observable(_this._internalMeshDataInfo._onMeshReadyObserverAdded);\n    if (source) {\n      source.onClonedObservable.notifyObservers(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  /**\n   * Gets the default side orientation.\n   * @param orientation the orientation to value to attempt to get\n   * @returns the default orientation\n   * @internal\n   */\n  _createClass(Mesh, [{\n    key: \"useLODScreenCoverage\",\n    get:\n    /**\n     * Determines if the LOD levels are intended to be calculated using screen coverage (surface area ratio) instead of distance\n     */\n    function get() {\n      return this._internalMeshDataInfo._useLODScreenCoverage;\n    },\n    set: function set(value) {\n      this._internalMeshDataInfo._useLODScreenCoverage = value;\n    }\n  }, {\n    key: \"computeBonesUsingShaders\",\n    get: function get() {\n      return this._internalAbstractMeshDataInfo._computeBonesUsingShaders;\n    },\n    set: function set(value) {\n      if (this._internalAbstractMeshDataInfo._computeBonesUsingShaders === value) {\n        return;\n      }\n      if (value && this._internalMeshDataInfo._sourcePositions) {\n        // switch from software to GPU computation: we need to reset the vertex and normal buffers that have been updated by the software process\n        this.setVerticesData(VertexBuffer.PositionKind, this._internalMeshDataInfo._sourcePositions, true);\n        if (this._internalMeshDataInfo._sourceNormals) {\n          this.setVerticesData(VertexBuffer.NormalKind, this._internalMeshDataInfo._sourceNormals, true);\n        }\n        this._internalMeshDataInfo._sourcePositions = null;\n        this._internalMeshDataInfo._sourceNormals = null;\n      }\n      this._internalAbstractMeshDataInfo._computeBonesUsingShaders = value;\n      this._markSubMeshesAsAttributesDirty();\n    }\n    /**\n     * An event triggered before rendering the mesh\n     */\n  }, {\n    key: \"onBeforeRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeRenderObservable;\n    }\n    /**\n     * An event triggered before binding the mesh\n     */\n  }, {\n    key: \"onBeforeBindObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeBindObservable;\n    }\n    /**\n     * An event triggered after rendering the mesh\n     */\n  }, {\n    key: \"onAfterRenderObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onAfterRenderObservable;\n    }\n    /**\n     * An event triggeredbetween rendering pass when using separateCullingPass = true\n     */\n  }, {\n    key: \"onBetweenPassObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBetweenPassObservable) {\n        this._internalMeshDataInfo._onBetweenPassObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBetweenPassObservable;\n    }\n    /**\n     * An event triggered before drawing the mesh\n     */\n  }, {\n    key: \"onBeforeDrawObservable\",\n    get: function get() {\n      if (!this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable = new Observable();\n      }\n      return this._internalMeshDataInfo._onBeforeDrawObservable;\n    }\n    /**\n     * Sets a callback to call before drawing the mesh. It is recommended to use onBeforeDrawObservable instead\n     */\n  }, {\n    key: \"onBeforeDraw\",\n    set: function set(callback) {\n      if (this._onBeforeDrawObserver) {\n        this.onBeforeDrawObservable.remove(this._onBeforeDrawObserver);\n      }\n      this._onBeforeDrawObserver = this.onBeforeDrawObservable.add(callback);\n    }\n  }, {\n    key: \"hasInstances\",\n    get: function get() {\n      return this.instances.length > 0;\n    }\n  }, {\n    key: \"hasThinInstances\",\n    get: function get() {\n      var _a;\n      return ((_a = this._thinInstanceDataStorage.instancesCount) !== null && _a !== void 0 ? _a : 0) > 0;\n    }\n    /**\n     * Gets or sets the forced number of instances to display.\n     * If 0 (default value), the number of instances is not forced and depends on the draw type\n     * (regular / instance / thin instances mesh)\n     */\n  }, {\n    key: \"forcedInstanceCount\",\n    get: function get() {\n      return this._internalMeshDataInfo._forcedInstanceCount;\n    },\n    set: function set(count) {\n      this._internalMeshDataInfo._forcedInstanceCount = count;\n    }\n    /**\n     * Gets the source mesh (the one used to clone this one from)\n     */\n  }, {\n    key: \"source\",\n    get: function get() {\n      return this._internalMeshDataInfo._source;\n    }\n    /**\n     * Gets the list of clones of this mesh\n     * The scene must have been constructed with useClonedMeshMap=true for this to work!\n     * Note that useClonedMeshMap=true is the default setting\n     */\n  }, {\n    key: \"cloneMeshMap\",\n    get: function get() {\n      return this._internalMeshDataInfo.meshMap;\n    }\n    /**\n     * Gets or sets a boolean indicating that this mesh does not use index buffer\n     */\n  }, {\n    key: \"isUnIndexed\",\n    get: function get() {\n      return this._unIndexed;\n    },\n    set: function set(value) {\n      if (this._unIndexed !== value) {\n        this._unIndexed = value;\n        this._markSubMeshesAsAttributesDirty();\n      }\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' world matrices */\n  }, {\n    key: \"worldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesData;\n    }\n    /** Gets the array buffer used to store the instanced buffer used for instances' previous world matrices */\n  }, {\n    key: \"previousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.instancesPreviousData;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.manualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.manualUpdate = value;\n    }\n    /** Gets or sets a boolean indicating that the update of the instance buffer of the world matrices is manual */\n  }, {\n    key: \"manualUpdateOfPreviousWorldMatrixInstancedBuffer\",\n    get: function get() {\n      return this._instanceDataStorage.previousManualUpdate;\n    },\n    set: function set(value) {\n      this._instanceDataStorage.previousManualUpdate = value;\n    }\n  }, {\n    key: \"instantiateHierarchy\",\n    value: function instantiateHierarchy() {\n      var newParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var options = arguments.length > 1 ? arguments[1] : undefined;\n      var onNewNodeCreated = arguments.length > 2 ? arguments[2] : undefined;\n      var instance = this.getTotalVertices() === 0 || options && options.doNotInstantiate && (options.doNotInstantiate === true || options.doNotInstantiate(this)) ? this.clone(\"Clone of \" + (this.name || this.id), newParent || this.parent, true) : this.createInstance(\"instance of \" + (this.name || this.id));\n      instance.parent = newParent || this.parent;\n      instance.position = this.position.clone();\n      instance.scaling = this.scaling.clone();\n      if (this.rotationQuaternion) {\n        instance.rotationQuaternion = this.rotationQuaternion.clone();\n      } else {\n        instance.rotation = this.rotation.clone();\n      }\n      if (onNewNodeCreated) {\n        onNewNodeCreated(this, instance);\n      }\n      var _iterator = _createForOfIteratorHelper(this.getChildTransformNodes(true)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n          // instancedMesh should have a different sourced mesh\n          if (child.getClassName() === \"InstancedMesh\" && instance.getClassName() === \"Mesh\") {\n            child.instantiateHierarchy(instance, {\n              doNotInstantiate: options && options.doNotInstantiate || false,\n              newSourcedMesh: instance\n            }, onNewNodeCreated);\n          } else {\n            child.instantiateHierarchy(instance, options, onNewNodeCreated);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return instance;\n    }\n    /**\n     * Gets the class name\n     * @returns the string \"Mesh\".\n     */\n  }, {\n    key: \"getClassName\",\n    value: function getClassName() {\n      return \"Mesh\";\n    }\n    /** @internal */\n  }, {\n    key: \"_isMesh\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Returns a description of this mesh\n     * @param fullDetails define if full details about this mesh must be used\n     * @returns a descriptive string representing this mesh\n     */\n  }, {\n    key: \"toString\",\n    value: function toString(fullDetails) {\n      var ret = _get(_getPrototypeOf(Mesh.prototype), \"toString\", this).call(this, fullDetails);\n      ret += \", n vertices: \" + this.getTotalVertices();\n      ret += \", parent: \" + (this._waitingParentId ? this._waitingParentId : this.parent ? this.parent.name : \"NONE\");\n      if (this.animations) {\n        for (var i = 0; i < this.animations.length; i++) {\n          ret += \", animation[0]: \" + this.animations[i].toString(fullDetails);\n        }\n      }\n      if (fullDetails) {\n        if (this._geometry) {\n          var ib = this.getIndices();\n          var vb = this.getVerticesData(VertexBuffer.PositionKind);\n          if (vb && ib) {\n            ret += \", flat shading: \" + (vb.length / 3 === ib.length ? \"YES\" : \"NO\");\n          }\n        } else {\n          ret += \", flat shading: UNKNOWN\";\n        }\n      }\n      return ret;\n    }\n    /** @internal */\n  }, {\n    key: \"_unBindEffect\",\n    value: function _unBindEffect() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_unBindEffect\", this).call(this);\n      var _iterator2 = _createForOfIteratorHelper(this.instances),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var instance = _step2.value;\n          instance._unBindEffect();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n    /**\n     * Gets a boolean indicating if this mesh has LOD\n     */\n  }, {\n    key: \"hasLODLevels\",\n    get: function get() {\n      return this._internalMeshDataInfo._LODLevels.length > 0;\n    }\n    /**\n     * Gets the list of MeshLODLevel associated with the current mesh\n     * @returns an array of MeshLODLevel\n     */\n  }, {\n    key: \"getLODLevels\",\n    value: function getLODLevels() {\n      return this._internalMeshDataInfo._LODLevels;\n    }\n  }, {\n    key: \"_sortLODLevels\",\n    value: function _sortLODLevels() {\n      var sortingOrderFactor = this._internalMeshDataInfo._useLODScreenCoverage ? -1 : 1;\n      this._internalMeshDataInfo._LODLevels.sort(function (a, b) {\n        if (a.distanceOrScreenCoverage < b.distanceOrScreenCoverage) {\n          return sortingOrderFactor;\n        }\n        if (a.distanceOrScreenCoverage > b.distanceOrScreenCoverage) {\n          return -sortingOrderFactor;\n        }\n        return 0;\n      });\n    }\n    /**\n     * Add a mesh as LOD level triggered at the given distance.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param distanceOrScreenCoverage Either distance from the center of the object to show this level or the screen coverage if `useScreenCoverage` is set to `true`.\n     * If screen coverage, value is a fraction of the screen's total surface, between 0 and 1.\n     * @param mesh The mesh to be added as LOD level (can be null)\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"addLODLevel\",\n    value: function addLODLevel(distanceOrScreenCoverage, mesh) {\n      if (mesh && mesh._masterMesh) {\n        Logger.Warn(\"You cannot use a mesh as LOD level twice\");\n        return this;\n      }\n      var level = new MeshLODLevel(distanceOrScreenCoverage, mesh);\n      this._internalMeshDataInfo._LODLevels.push(level);\n      if (mesh) {\n        mesh._masterMesh = this;\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the LOD level mesh at the passed distance or null if not found.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param distance The distance from the center of the object to show this level\n     * @returns a Mesh or `null`\n     */\n  }, {\n    key: \"getLODLevelAtDistance\",\n    value: function getLODLevelAtDistance(distance) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (level.distanceOrScreenCoverage === distance) {\n          return level.mesh;\n        }\n      }\n      return null;\n    }\n    /**\n     * Remove a mesh from the LOD array\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param mesh defines the mesh to be removed\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"removeLODLevel\",\n    value: function removeLODLevel(mesh) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        if (internalDataInfo._LODLevels[index].mesh === mesh) {\n          internalDataInfo._LODLevels.splice(index, 1);\n          if (mesh) {\n            mesh._masterMesh = null;\n          }\n        }\n      }\n      this._sortLODLevels();\n      return this;\n    }\n    /**\n     * Returns the registered LOD mesh distant from the parameter `camera` position if any, else returns the current mesh.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_lod\n     * @param camera defines the camera to use to compute distance\n     * @param boundingSphere defines a custom bounding sphere to use instead of the one from this mesh\n     * @returns This mesh (for chaining)\n     */\n  }, {\n    key: \"getLOD\",\n    value: function getLOD(camera, boundingSphere) {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._LODLevels || internalDataInfo._LODLevels.length === 0) {\n        return this;\n      }\n      var bSphere;\n      if (boundingSphere) {\n        bSphere = boundingSphere;\n      } else {\n        var boundingInfo = this.getBoundingInfo();\n        bSphere = boundingInfo.boundingSphere;\n      }\n      var distanceToCamera = camera.mode === Camera.ORTHOGRAPHIC_CAMERA ? camera.minZ : bSphere.centerWorld.subtract(camera.globalPosition).length();\n      var useScreenCoverage = internalDataInfo._useLODScreenCoverage;\n      var compareValue = distanceToCamera;\n      var compareSign = 1;\n      if (useScreenCoverage) {\n        var screenArea = camera.screenArea;\n        var meshArea = bSphere.radiusWorld * camera.minZ / distanceToCamera;\n        meshArea = meshArea * meshArea * Math.PI;\n        compareValue = meshArea / screenArea;\n        compareSign = -1;\n      }\n      if (compareSign * internalDataInfo._LODLevels[internalDataInfo._LODLevels.length - 1].distanceOrScreenCoverage > compareSign * compareValue) {\n        if (this.onLODLevelSelection) {\n          this.onLODLevelSelection(compareValue, this, this);\n        }\n        return this;\n      }\n      for (var index = 0; index < internalDataInfo._LODLevels.length; index++) {\n        var level = internalDataInfo._LODLevels[index];\n        if (compareSign * level.distanceOrScreenCoverage < compareSign * compareValue) {\n          if (level.mesh) {\n            if (level.mesh.delayLoadState === 4) {\n              level.mesh._checkDelayState();\n              return this;\n            }\n            if (level.mesh.delayLoadState === 2) {\n              return this;\n            }\n            level.mesh._preActivate();\n            level.mesh._updateSubMeshesBoundingInfo(this.worldMatrixFromCache);\n          }\n          if (this.onLODLevelSelection) {\n            this.onLODLevelSelection(compareValue, this, level.mesh);\n          }\n          return level.mesh;\n        }\n      }\n      if (this.onLODLevelSelection) {\n        this.onLODLevelSelection(compareValue, this, this);\n      }\n      return this;\n    }\n    /**\n     * Gets the mesh internal Geometry object\n     */\n  }, {\n    key: \"geometry\",\n    get: function get() {\n      return this._geometry;\n    }\n    /**\n     * Returns the total number of vertices within the mesh geometry or zero if the mesh has no geometry.\n     * @returns the total number of vertices\n     */\n  }, {\n    key: \"getTotalVertices\",\n    value: function getTotalVertices() {\n      if (this._geometry === null || this._geometry === undefined) {\n        return 0;\n      }\n      return this._geometry.getTotalVertices();\n    }\n    /**\n     * Returns the content of an associated vertex buffer\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param copyWhenShared defines a boolean indicating that if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one\n     * @param forceCopy defines a boolean forcing the copy of the buffer no matter what the value of copyWhenShared is\n     * @returns a FloatArray or null if the mesh has no geometry or no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVerticesData\",\n    value: function getVerticesData(kind, copyWhenShared, forceCopy) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      var data = (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.getFloatData(this._geometry.getTotalVertices(), forceCopy || copyWhenShared && this._geometry.meshes.length !== 1);\n      if (!data) {\n        data = this._geometry.getVerticesData(kind, copyWhenShared, forceCopy);\n      }\n      return data;\n    }\n    /**\n     * Returns the mesh VertexBuffer object from the requested `kind`\n     * @param kind defines which buffer to read from (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a FloatArray or null if the mesh has no vertex buffer for this kind.\n     */\n  }, {\n    key: \"getVertexBuffer\",\n    value: function getVertexBuffer(kind) {\n      var _a, _b;\n      if (!this._geometry) {\n        return null;\n      }\n      return (_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== null && _b !== void 0 ? _b : this._geometry.getVertexBuffer(kind);\n    }\n    /**\n     * Tests if a specific vertex buffer is associated with this mesh\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.NormalKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVerticesDataPresent\",\n    value: function isVerticesDataPresent(kind) {\n      var _a;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      return ((_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) !== undefined || this._geometry.isVerticesDataPresent(kind);\n    }\n    /**\n     * Returns a boolean defining if the vertex data for the requested `kind` is updatable.\n     * @param kind defines which buffer to check (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @returns a boolean\n     */\n  }, {\n    key: \"isVertexBufferUpdatable\",\n    value: function isVertexBufferUpdatable(kind) {\n      var _a, _b;\n      if (!this._geometry) {\n        if (this._delayInfo) {\n          return this._delayInfo.indexOf(kind) !== -1;\n        }\n        return false;\n      }\n      return ((_b = (_a = this._userInstancedBuffersStorage) === null || _a === void 0 ? void 0 : _a.vertexBuffers[kind]) === null || _b === void 0 ? void 0 : _b.isUpdatable()) || this._geometry.isVertexBufferUpdatable(kind);\n    }\n    /**\n     * Returns a string which contains the list of existing `kinds` of Vertex Data associated with this mesh.\n     * @returns an array of strings\n     */\n  }, {\n    key: \"getVerticesDataKinds\",\n    value: function getVerticesDataKinds() {\n      if (!this._geometry) {\n        var result = new Array();\n        if (this._delayInfo) {\n          this._delayInfo.forEach(function (kind) {\n            result.push(kind);\n          });\n        }\n        return result;\n      }\n      var kinds = this._geometry.getVerticesDataKinds();\n      if (this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          kinds.push(kind);\n        }\n      }\n      return kinds;\n    }\n    /**\n     * Returns a positive integer : the total number of indices in this mesh geometry.\n     * @returns the numner of indices or zero if the mesh has no geometry.\n     */\n  }, {\n    key: \"getTotalIndices\",\n    value: function getTotalIndices() {\n      if (!this._geometry) {\n        return 0;\n      }\n      return this._geometry.getTotalIndices();\n    }\n    /**\n     * Returns an array of integers or a typed array (Int32Array, Uint32Array, Uint16Array) populated with the mesh indices.\n     * @param copyWhenShared If true (default false) and and if the mesh geometry is shared among some other meshes, the returned array is a copy of the internal one.\n     * @param forceCopy defines a boolean indicating that the returned array must be cloned upon returning it\n     * @returns the indices array or an empty array if the mesh has no geometry\n     */\n  }, {\n    key: \"getIndices\",\n    value: function getIndices(copyWhenShared, forceCopy) {\n      if (!this._geometry) {\n        return [];\n      }\n      return this._geometry.getIndices(copyWhenShared, forceCopy);\n    }\n  }, {\n    key: \"isBlocked\",\n    get: function get() {\n      return this._masterMesh !== null && this._masterMesh !== undefined;\n    }\n    /**\n     * Determine if the current mesh is ready to be rendered\n     * @param completeCheck defines if a complete check (including materials and lights) has to be done (false by default)\n     * @param forceInstanceSupport will check if the mesh will be ready when used with instances (false by default)\n     * @returns true if all associated assets are ready (material, textures, shaders)\n     */\n  }, {\n    key: \"isReady\",\n    value: function isReady() {\n      var completeCheck = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var forceInstanceSupport = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var _a, _b, _c, _d, _e, _f;\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isReady\", this).call(this, completeCheck)) {\n        return false;\n      }\n      if (!this.subMeshes || this.subMeshes.length === 0) {\n        return true;\n      }\n      if (!completeCheck) {\n        return true;\n      }\n      var engine = this.getEngine();\n      var scene = this.getScene();\n      var hardwareInstancedRendering = forceInstanceSupport || engine.getCaps().instancedArrays && (this.instances.length > 0 || this.hasThinInstances);\n      this.computeWorldMatrix();\n      var mat = this.material || scene.defaultMaterial;\n      if (mat) {\n        if (mat._storeEffectOnSubMeshes) {\n          var _iterator3 = _createForOfIteratorHelper(this.subMeshes),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var subMesh = _step3.value;\n              var effectiveMaterial = subMesh.getMaterial();\n              if (effectiveMaterial) {\n                if (effectiveMaterial._storeEffectOnSubMeshes) {\n                  if (!effectiveMaterial.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                } else {\n                  if (!effectiveMaterial.isReady(this, hardwareInstancedRendering)) {\n                    return false;\n                  }\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        } else {\n          if (!mat.isReady(this, hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      }\n      // Shadows\n      var currentRenderPassId = engine.currentRenderPassId;\n      var _iterator4 = _createForOfIteratorHelper(this.lightSources),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var light = _step4.value;\n          var generator = light.getShadowGenerator();\n          if (generator && (!((_a = generator.getShadowMap()) === null || _a === void 0 ? void 0 : _a.renderList) || ((_b = generator.getShadowMap()) === null || _b === void 0 ? void 0 : _b.renderList) && ((_d = (_c = generator.getShadowMap()) === null || _c === void 0 ? void 0 : _c.renderList) === null || _d === void 0 ? void 0 : _d.indexOf(this)) !== -1)) {\n            if (generator.getShadowMap()) {\n              engine.currentRenderPassId = generator.getShadowMap().renderPassId;\n            }\n            var _iterator6 = _createForOfIteratorHelper(this.subMeshes),\n              _step6;\n            try {\n              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                var _subMesh = _step6.value;\n                if (!generator.isReady(_subMesh, hardwareInstancedRendering, (_f = (_e = _subMesh.getMaterial()) === null || _e === void 0 ? void 0 : _e.needAlphaBlendingForMesh(this)) !== null && _f !== void 0 ? _f : false)) {\n                  engine.currentRenderPassId = currentRenderPassId;\n                  return false;\n                }\n              }\n            } catch (err) {\n              _iterator6.e(err);\n            } finally {\n              _iterator6.f();\n            }\n            engine.currentRenderPassId = currentRenderPassId;\n          }\n        }\n        // LOD\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      var _iterator5 = _createForOfIteratorHelper(this._internalMeshDataInfo._LODLevels),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var lod = _step5.value;\n          if (lod.mesh && !lod.mesh.isReady(hardwareInstancedRendering)) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n      return true;\n    }\n    /**\n     * Gets a boolean indicating if the normals aren't to be recomputed on next mesh `positions` array update. This property is pertinent only for updatable parametric shapes.\n     */\n  }, {\n    key: \"areNormalsFrozen\",\n    get: function get() {\n      return this._internalMeshDataInfo._areNormalsFrozen;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It prevents the mesh normals from being recomputed on next `positions` array update.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"freezeNormals\",\n    value: function freezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = true;\n      return this;\n    }\n    /**\n     * This function affects parametric shapes on vertex position update only : ribbons, tubes, etc. It has no effect at all on other shapes. It reactivates the mesh normals computation if it was previously frozen\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unfreezeNormals\",\n    value: function unfreezeNormals() {\n      this._internalMeshDataInfo._areNormalsFrozen = false;\n      return this;\n    }\n    /**\n     * Sets a value overriding the instance count. Only applicable when custom instanced InterleavedVertexBuffer are used rather than InstancedMeshs\n     */\n  }, {\n    key: \"overridenInstanceCount\",\n    set: function set(count) {\n      this._instanceDataStorage.overridenInstanceCount = count;\n    }\n    // Methods\n    /** @internal */\n  }, {\n    key: \"_preActivate\",\n    value: function _preActivate() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      var sceneRenderId = this.getScene().getRenderId();\n      if (internalDataInfo._preActivateId === sceneRenderId) {\n        return this;\n      }\n      internalDataInfo._preActivateId = sceneRenderId;\n      this._instanceDataStorage.visibleInstances = null;\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_preActivateForIntermediateRendering\",\n    value: function _preActivateForIntermediateRendering(renderId) {\n      if (this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances.intermediateDefaultRenderId = renderId;\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_registerInstanceForRenderId\",\n    value: function _registerInstanceForRenderId(instance, renderId) {\n      if (!this._instanceDataStorage.visibleInstances) {\n        this._instanceDataStorage.visibleInstances = {\n          defaultRenderId: renderId,\n          selfDefaultRenderId: this._renderId\n        };\n      }\n      if (!this._instanceDataStorage.visibleInstances[renderId]) {\n        if (this._instanceDataStorage.previousRenderId !== undefined && this._instanceDataStorage.isFrozen) {\n          this._instanceDataStorage.visibleInstances[this._instanceDataStorage.previousRenderId] = null;\n        }\n        this._instanceDataStorage.previousRenderId = renderId;\n        this._instanceDataStorage.visibleInstances[renderId] = new Array();\n      }\n      this._instanceDataStorage.visibleInstances[renderId].push(instance);\n      return this;\n    }\n  }, {\n    key: \"_afterComputeWorldMatrix\",\n    value: function _afterComputeWorldMatrix() {\n      _get(_getPrototypeOf(Mesh.prototype), \"_afterComputeWorldMatrix\", this).call(this);\n      if (!this.hasThinInstances) {\n        return;\n      }\n      if (!this.doNotSyncBoundingInfo) {\n        this.thinInstanceRefreshBoundingInfo(false);\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_postActivate\",\n    value: function _postActivate() {\n      if (this.edgesShareWithInstances && this.edgesRenderer && this.edgesRenderer.isEnabled && this._renderingGroup) {\n        this._renderingGroup._edgesRenderers.pushNoDuplicate(this.edgesRenderer);\n        this.edgesRenderer.customInstances.push(this.getWorldMatrix());\n      }\n    }\n    /**\n     * This method recomputes and sets a new BoundingInfo to the mesh unless it is locked.\n     * This means the mesh underlying bounding box and sphere are recomputed.\n     * @param applySkeleton defines whether to apply the skeleton before computing the bounding info\n     * @param applyMorph  defines whether to apply the morph target before computing the bounding info\n     * @returns the current mesh\n     */\n  }, {\n    key: \"refreshBoundingInfo\",\n    value: function refreshBoundingInfo() {\n      var applySkeleton = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var applyMorph = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this.hasBoundingInfo && this.getBoundingInfo().isLocked) {\n        return this;\n      }\n      var bias = this.geometry ? this.geometry.boundingBias : null;\n      this._refreshBoundingInfo(this._getPositionData(applySkeleton, applyMorph), bias);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_createGlobalSubMesh\",\n    value: function _createGlobalSubMesh(force) {\n      var totalVertices = this.getTotalVertices();\n      if (!totalVertices || !this.getIndices()) {\n        return null;\n      }\n      // Check if we need to recreate the submeshes\n      if (this.subMeshes && this.subMeshes.length > 0) {\n        var ib = this.getIndices();\n        if (!ib) {\n          return null;\n        }\n        var totalIndices = ib.length;\n        var needToRecreate = false;\n        if (force) {\n          needToRecreate = true;\n        } else {\n          var _iterator7 = _createForOfIteratorHelper(this.subMeshes),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var submesh = _step7.value;\n              if (submesh.indexStart + submesh.indexCount > totalIndices) {\n                needToRecreate = true;\n                break;\n              }\n              if (submesh.verticesStart + submesh.verticesCount > totalVertices) {\n                needToRecreate = true;\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n        }\n        if (!needToRecreate) {\n          return this.subMeshes[0];\n        }\n      }\n      this.releaseSubMeshes();\n      return new SubMesh(0, 0, totalVertices, 0, this.getTotalIndices(), this);\n    }\n    /**\n     * This function will subdivide the mesh into multiple submeshes\n     * @param count defines the expected number of submeshes\n     */\n  }, {\n    key: \"subdivide\",\n    value: function subdivide(count) {\n      if (count < 1) {\n        return;\n      }\n      var totalIndices = this.getTotalIndices();\n      var subdivisionSize = totalIndices / count | 0;\n      var offset = 0;\n      // Ensure that subdivisionSize is a multiple of 3\n      while (subdivisionSize % 3 !== 0) {\n        subdivisionSize++;\n      }\n      this.releaseSubMeshes();\n      for (var index = 0; index < count; index++) {\n        if (offset >= totalIndices) {\n          break;\n        }\n        SubMesh.CreateFromIndices(0, offset, index === count - 1 ? totalIndices - offset : subdivisionSize, this);\n        offset += subdivisionSize;\n      }\n      this.synchronizeInstances();\n    }\n    /**\n     * Copy a FloatArray into a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     * @param stride defines the data stride size (can be null)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesData\",\n    value: function setVerticesData(kind, data) {\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var stride = arguments.length > 3 ? arguments[3] : undefined;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.set(data, kind);\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setVerticesData(kind, data, updatable, stride);\n      }\n      return this;\n    }\n    /**\n     * Delete a vertex buffer associated with this mesh\n     * @param kind defines which buffer to delete (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     */\n  }, {\n    key: \"removeVerticesData\",\n    value: function removeVerticesData(kind) {\n      if (!this._geometry) {\n        return;\n      }\n      this._geometry.removeVerticesData(kind);\n    }\n    /**\n     * Flags an associated vertex buffer as updatable\n     * @param kind defines which buffer to use (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param updatable defines if the updated vertex buffer must be flagged as updatable\n     */\n  }, {\n    key: \"markVerticesDataAsUpdatable\",\n    value: function markVerticesDataAsUpdatable(kind) {\n      var updatable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var vb = this.getVertexBuffer(kind);\n      if (!vb || vb.isUpdatable() === updatable) {\n        return;\n      }\n      this.setVerticesData(kind, this.getVerticesData(kind), updatable);\n    }\n    /**\n     * Sets the mesh global Vertex Buffer\n     * @param buffer defines the buffer to use\n     * @param disposeExistingBuffer disposes the existing buffer, if any (default: true)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setVerticesBuffer\",\n    value: function setVerticesBuffer(buffer) {\n      var disposeExistingBuffer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!this._geometry) {\n        this._geometry = Geometry.CreateGeometryForMesh(this);\n      }\n      this._geometry.setVerticesBuffer(buffer, null, disposeExistingBuffer);\n      return this;\n    }\n    /**\n     * Update a specific associated vertex buffer\n     * @param kind defines which buffer to write to (positions, indices, normals, etc). Possible `kind` values :\n     * - VertexBuffer.PositionKind\n     * - VertexBuffer.UVKind\n     * - VertexBuffer.UV2Kind\n     * - VertexBuffer.UV3Kind\n     * - VertexBuffer.UV4Kind\n     * - VertexBuffer.UV5Kind\n     * - VertexBuffer.UV6Kind\n     * - VertexBuffer.ColorKind\n     * - VertexBuffer.MatricesIndicesKind\n     * - VertexBuffer.MatricesIndicesExtraKind\n     * - VertexBuffer.MatricesWeightsKind\n     * - VertexBuffer.MatricesWeightsExtraKind\n     * @param data defines the data source\n     * @param updateExtends defines if extends info of the mesh must be updated (can be null). This is mostly useful for \"position\" kind\n     * @param makeItUnique defines if the geometry associated with the mesh must be cloned to make the change only for this mesh (and not all meshes associated with the same geometry)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateVerticesData\",\n    value: function updateVerticesData(kind, data, updateExtends, makeItUnique) {\n      if (!this._geometry) {\n        return this;\n      }\n      if (!makeItUnique) {\n        this._geometry.updateVerticesData(kind, data, updateExtends);\n      } else {\n        this.makeGeometryUnique();\n        this.updateVerticesData(kind, data, updateExtends, false);\n      }\n      return this;\n    }\n    /**\n     * This method updates the vertex positions of an updatable mesh according to the `positionFunction` returned values.\n     * @see https://doc.babylonjs.com/how_to/how_to_dynamically_morph_a_mesh#other-shapes-updatemeshpositions\n     * @param positionFunction is a simple JS function what is passed the mesh `positions` array. It doesn't need to return anything\n     * @param computeNormals is a boolean (default true) to enable/disable the mesh normal recomputation after the vertex position update\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateMeshPositions\",\n    value: function updateMeshPositions(positionFunction) {\n      var computeNormals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions) {\n        return this;\n      }\n      positionFunction(positions);\n      this.updateVerticesData(VertexBuffer.PositionKind, positions, false, false);\n      if (computeNormals) {\n        var indices = this.getIndices();\n        var normals = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!normals) {\n          return this;\n        }\n        VertexData.ComputeNormals(positions, indices, normals);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals, false, false);\n      }\n      return this;\n    }\n    /**\n     * Creates a un-shared specific occurence of the geometry for the mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"makeGeometryUnique\",\n    value: function makeGeometryUnique() {\n      if (!this._geometry) {\n        return this;\n      }\n      if (this._geometry.meshes.length === 1) {\n        return this;\n      }\n      var oldGeometry = this._geometry;\n      var geometry = this._geometry.copy(Geometry.RandomId());\n      oldGeometry.releaseForMesh(this, true);\n      geometry.applyToMesh(this);\n      return this;\n    }\n    /**\n     * Set the index buffer of this mesh\n     * @param indices defines the source data\n     * @param totalVertices defines the total number of vertices referenced by this index data (can be null)\n     * @param updatable defines if the updated index buffer must be flagged as updatable (default is false)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setIndices\",\n    value: function setIndices(indices) {\n      var totalVertices = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var updatable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        var vertexData = new VertexData();\n        vertexData.indices = indices;\n        var scene = this.getScene();\n        new Geometry(Geometry.RandomId(), scene, vertexData, updatable, this);\n      } else {\n        this._geometry.setIndices(indices, totalVertices, updatable);\n      }\n      return this;\n    }\n    /**\n     * Update the current index buffer\n     * @param indices defines the source data\n     * @param offset defines the offset in the index buffer where to store the new data (can be null)\n     * @param gpuMemoryOnly defines a boolean indicating that only the GPU memory must be updated leaving the CPU version of the indices unchanged (false by default)\n     * @returns the current mesh\n     */\n  }, {\n    key: \"updateIndices\",\n    value: function updateIndices(indices, offset) {\n      var gpuMemoryOnly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.updateIndices(indices, offset, gpuMemoryOnly);\n      return this;\n    }\n    /**\n     * Invert the geometry to move from a right handed system to a left handed one.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"toLeftHanded\",\n    value: function toLeftHanded() {\n      if (!this._geometry) {\n        return this;\n      }\n      this._geometry.toLeftHanded();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_bind\",\n    value: function _bind(subMesh, effect, fillMode) {\n      if (!this._geometry) {\n        return this;\n      }\n      var engine = this.getScene().getEngine();\n      // Morph targets\n      if (this.morphTargetManager && this.morphTargetManager.isUsingTextureForTargets) {\n        this.morphTargetManager._bind(effect);\n      }\n      // Wireframe\n      var indexToBind;\n      if (this._unIndexed) {\n        indexToBind = null;\n      } else {\n        switch (fillMode) {\n          case Material.PointFillMode:\n            indexToBind = null;\n            break;\n          case Material.WireFrameFillMode:\n            indexToBind = subMesh._getLinesIndexBuffer(this.getIndices(), engine);\n            break;\n          default:\n          case Material.TriangleFillMode:\n            indexToBind = this._geometry.getIndexBuffer();\n            break;\n        }\n      }\n      // VBOs\n      if (!this._userInstancedBuffersStorage || this.hasThinInstances) {\n        this._geometry._bind(effect, indexToBind);\n      } else {\n        this._geometry._bind(effect, indexToBind, this._userInstancedBuffersStorage.vertexBuffers, this._userInstancedBuffersStorage.vertexArrayObjects);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_draw\",\n    value: function _draw(subMesh, fillMode, instancesCount) {\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      if (this._internalMeshDataInfo._onBeforeDrawObservable) {\n        this._internalMeshDataInfo._onBeforeDrawObservable.notifyObservers(this);\n      }\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      if (this._unIndexed || fillMode == Material.PointFillMode) {\n        // or triangles as points\n        engine.drawArraysType(fillMode, subMesh.verticesStart, subMesh.verticesCount, this.forcedInstanceCount || instancesCount);\n      } else if (fillMode == Material.WireFrameFillMode) {\n        // Triangles as wireframe\n        engine.drawElementsType(fillMode, 0, subMesh._linesIndexCount, this.forcedInstanceCount || instancesCount);\n      } else {\n        engine.drawElementsType(fillMode, subMesh.indexStart, subMesh.indexCount, this.forcedInstanceCount || instancesCount);\n      }\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just before the rendering process\n     * @param func defines the function to call before rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerBeforeRender\",\n    value: function registerBeforeRender(func) {\n      this.onBeforeRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called before the rendering\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterBeforeRender\",\n    value: function unregisterBeforeRender(func) {\n      this.onBeforeRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * Registers for this mesh a javascript function called just after the rendering is complete\n     * @param func defines the function to call after rendering this mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"registerAfterRender\",\n    value: function registerAfterRender(func) {\n      this.onAfterRenderObservable.add(func);\n      return this;\n    }\n    /**\n     * Disposes a previously registered javascript function called after the rendering.\n     * @param func defines the function to remove\n     * @returns the current mesh\n     */\n  }, {\n    key: \"unregisterAfterRender\",\n    value: function unregisterAfterRender(func) {\n      this.onAfterRenderObservable.removeCallback(func);\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_getInstancesRenderList\",\n    value: function _getInstancesRenderList(subMeshId) {\n      var isReplacementMode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (this._instanceDataStorage.isFrozen) {\n        if (isReplacementMode) {\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.hardwareInstancedRendering[subMeshId] = false;\n          this._instanceDataStorage.batchCacheReplacementModeInFrozenMode.renderSelf[subMeshId] = true;\n          return this._instanceDataStorage.batchCacheReplacementModeInFrozenMode;\n        }\n        if (this._instanceDataStorage.previousBatch) {\n          return this._instanceDataStorage.previousBatch;\n        }\n      }\n      var scene = this.getScene();\n      var isInIntermediateRendering = scene._isInIntermediateRendering();\n      var onlyForInstances = isInIntermediateRendering ? this._internalAbstractMeshDataInfo._onlyForInstancesIntermediate : this._internalAbstractMeshDataInfo._onlyForInstances;\n      var batchCache = this._instanceDataStorage.batchCache;\n      batchCache.mustReturn = false;\n      batchCache.renderSelf[subMeshId] = isReplacementMode || !onlyForInstances && this.isEnabled() && this.isVisible;\n      batchCache.visibleInstances[subMeshId] = null;\n      if (this._instanceDataStorage.visibleInstances && !isReplacementMode) {\n        var visibleInstances = this._instanceDataStorage.visibleInstances;\n        var currentRenderId = scene.getRenderId();\n        var defaultRenderId = isInIntermediateRendering ? visibleInstances.intermediateDefaultRenderId : visibleInstances.defaultRenderId;\n        batchCache.visibleInstances[subMeshId] = visibleInstances[currentRenderId];\n        if (!batchCache.visibleInstances[subMeshId] && defaultRenderId) {\n          batchCache.visibleInstances[subMeshId] = visibleInstances[defaultRenderId];\n        }\n      }\n      batchCache.hardwareInstancedRendering[subMeshId] = !isReplacementMode && this._instanceDataStorage.hardwareInstancedRendering && batchCache.visibleInstances[subMeshId] !== null && batchCache.visibleInstances[subMeshId] !== undefined;\n      this._instanceDataStorage.previousBatch = batchCache;\n      return batchCache;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithInstances\",\n    value: function _renderWithInstances(subMesh, fillMode, batch, effect, engine) {\n      var _a;\n      var visibleInstances = batch.visibleInstances[subMesh._id];\n      var visibleInstanceCount = visibleInstances ? visibleInstances.length : 0;\n      var instanceStorage = this._instanceDataStorage;\n      var currentInstancesBufferSize = instanceStorage.instancesBufferSize;\n      var instancesBuffer = instanceStorage.instancesBuffer;\n      var instancesPreviousBuffer = instanceStorage.instancesPreviousBuffer;\n      var matricesCount = visibleInstanceCount + 1;\n      var bufferSize = matricesCount * 16 * 4;\n      while (instanceStorage.instancesBufferSize < bufferSize) {\n        instanceStorage.instancesBufferSize *= 2;\n      }\n      if (!instanceStorage.instancesData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      if (this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousData || currentInstancesBufferSize != instanceStorage.instancesBufferSize) {\n        instanceStorage.instancesPreviousData = new Float32Array(instanceStorage.instancesBufferSize / 4);\n      }\n      var offset = 0;\n      var instancesCount = 0;\n      var renderSelf = batch.renderSelf[subMesh._id];\n      var needUpdateBuffer = !instancesBuffer || currentInstancesBufferSize !== instanceStorage.instancesBufferSize || this._scene.needsPreviousWorldMatrices && !instanceStorage.instancesPreviousBuffer;\n      if (!this._instanceDataStorage.manualUpdate && (!instanceStorage.isFrozen || needUpdateBuffer)) {\n        var world = this.getWorldMatrix();\n        if (renderSelf) {\n          if (this._scene.needsPreviousWorldMatrices) {\n            if (!instanceStorage.masterMeshPreviousWorldMatrix) {\n              instanceStorage.masterMeshPreviousWorldMatrix = world.clone();\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n            } else {\n              instanceStorage.masterMeshPreviousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              instanceStorage.masterMeshPreviousWorldMatrix.copyFrom(world);\n            }\n          }\n          world.copyToArray(instanceStorage.instancesData, offset);\n          offset += 16;\n          instancesCount++;\n        }\n        if (visibleInstances) {\n          if (Mesh.INSTANCEDMESH_SORT_TRANSPARENT && this._scene.activeCamera && ((_a = subMesh.getMaterial()) === null || _a === void 0 ? void 0 : _a.needAlphaBlendingForMesh(subMesh.getRenderingMesh()))) {\n            var cameraPosition = this._scene.activeCamera.globalPosition;\n            for (var instanceIndex = 0; instanceIndex < visibleInstances.length; instanceIndex++) {\n              var instanceMesh = visibleInstances[instanceIndex];\n              instanceMesh._distanceToCamera = Vector3.Distance(instanceMesh.getBoundingInfo().boundingSphere.centerWorld, cameraPosition);\n            }\n            visibleInstances.sort(function (m1, m2) {\n              return m1._distanceToCamera > m2._distanceToCamera ? -1 : m1._distanceToCamera < m2._distanceToCamera ? 1 : 0;\n            });\n          }\n          for (var _instanceIndex = 0; _instanceIndex < visibleInstances.length; _instanceIndex++) {\n            var instance = visibleInstances[_instanceIndex];\n            var matrix = instance.getWorldMatrix();\n            matrix.copyToArray(instanceStorage.instancesData, offset);\n            if (this._scene.needsPreviousWorldMatrices) {\n              if (!instance._previousWorldMatrix) {\n                instance._previousWorldMatrix = matrix.clone();\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n              } else {\n                instance._previousWorldMatrix.copyToArray(instanceStorage.instancesPreviousData, offset);\n                instance._previousWorldMatrix.copyFrom(matrix);\n              }\n            }\n            offset += 16;\n            instancesCount++;\n          }\n        }\n      } else {\n        instancesCount = (renderSelf ? 1 : 0) + visibleInstanceCount;\n      }\n      if (needUpdateBuffer) {\n        if (instancesBuffer) {\n          instancesBuffer.dispose();\n        }\n        if (instancesPreviousBuffer) {\n          instancesPreviousBuffer.dispose();\n        }\n        instancesBuffer = new Buffer(engine, instanceStorage.instancesData, true, 16, false, true);\n        instanceStorage.instancesBuffer = instancesBuffer;\n        if (!this._userInstancedBuffersStorage) {\n          this._userInstancedBuffersStorage = {\n            data: {},\n            vertexBuffers: {},\n            strides: {},\n            sizes: {},\n            vertexArrayObjects: this.getEngine().getCaps().vertexArrayObject ? {} : undefined\n          };\n        }\n        this._userInstancedBuffersStorage.vertexBuffers[\"world0\"] = instancesBuffer.createVertexBuffer(\"world0\", 0, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world1\"] = instancesBuffer.createVertexBuffer(\"world1\", 4, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world2\"] = instancesBuffer.createVertexBuffer(\"world2\", 8, 4);\n        this._userInstancedBuffersStorage.vertexBuffers[\"world3\"] = instancesBuffer.createVertexBuffer(\"world3\", 12, 4);\n        if (this._scene.needsPreviousWorldMatrices) {\n          instancesPreviousBuffer = new Buffer(engine, instanceStorage.instancesPreviousData, true, 16, false, true);\n          instanceStorage.instancesPreviousBuffer = instancesPreviousBuffer;\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld0\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld0\", 0, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld1\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld1\", 4, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld2\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld2\", 8, 4);\n          this._userInstancedBuffersStorage.vertexBuffers[\"previousWorld3\"] = instancesPreviousBuffer.createVertexBuffer(\"previousWorld3\", 12, 4);\n        }\n        this._invalidateInstanceVertexArrayObject();\n      } else {\n        if (!this._instanceDataStorage.isFrozen) {\n          instancesBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n          if (this._scene.needsPreviousWorldMatrices && (!this._instanceDataStorage.manualUpdate || this._instanceDataStorage.previousManualUpdate)) {\n            instancesPreviousBuffer.updateDirectly(instanceStorage.instancesPreviousData, 0, instancesCount);\n          }\n        }\n      }\n      this._processInstancedBuffers(visibleInstances, renderSelf);\n      // Stats\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices in case of manual update\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !needUpdateBuffer && this._instanceDataStorage.manualUpdate && !this._instanceDataStorage.isFrozen && !this._instanceDataStorage.previousManualUpdate) {\n        instancesPreviousBuffer.updateDirectly(instanceStorage.instancesData, 0, instancesCount);\n      }\n      engine.unbindInstanceAttributes();\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_renderWithThinInstances\",\n    value: function _renderWithThinInstances(subMesh, fillMode, effect, engine) {\n      var _a, _b;\n      // Stats\n      var instancesCount = (_b = (_a = this._thinInstanceDataStorage) === null || _a === void 0 ? void 0 : _a.instancesCount) !== null && _b !== void 0 ? _b : 0;\n      this.getScene()._activeIndices.addCount(subMesh.indexCount * instancesCount, false);\n      // Draw\n      if (engine._currentDrawContext) {\n        engine._currentDrawContext.useInstancing = true;\n      }\n      this._bind(subMesh, effect, fillMode);\n      this._draw(subMesh, fillMode, instancesCount);\n      // Write current matrices as previous matrices\n      // Default behaviour when previous matrices are not specified explicitly\n      // Will break if instances number/order changes\n      if (this._scene.needsPreviousWorldMatrices && !this._thinInstanceDataStorage.previousMatrixData && this._thinInstanceDataStorage.matrixData) {\n        if (!this._thinInstanceDataStorage.previousMatrixBuffer) {\n          this._thinInstanceDataStorage.previousMatrixBuffer = this._thinInstanceCreateMatrixBuffer(\"previousWorld\", this._thinInstanceDataStorage.matrixData, false);\n        } else {\n          this._thinInstanceDataStorage.previousMatrixBuffer.updateDirectly(this._thinInstanceDataStorage.matrixData, 0, instancesCount);\n        }\n      }\n      engine.unbindInstanceAttributes();\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_processInstancedBuffers\",\n    value: function _processInstancedBuffers(visibleInstances, renderSelf) {\n      // Do nothing\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_processRendering\",\n    value: function _processRendering(renderingMesh, subMesh, effect, fillMode, batch, hardwareInstancedRendering, onBeforeDraw, effectiveMaterial) {\n      var scene = this.getScene();\n      var engine = scene.getEngine();\n      if (hardwareInstancedRendering && subMesh.getRenderingMesh().hasThinInstances) {\n        this._renderWithThinInstances(subMesh, fillMode, effect, engine);\n        return this;\n      }\n      if (hardwareInstancedRendering) {\n        this._renderWithInstances(subMesh, fillMode, batch, effect, engine);\n      } else {\n        if (engine._currentDrawContext) {\n          engine._currentDrawContext.useInstancing = false;\n        }\n        var instanceCount = 0;\n        if (batch.renderSelf[subMesh._id]) {\n          // Draw\n          if (onBeforeDraw) {\n            onBeforeDraw(false, renderingMesh.getWorldMatrix(), effectiveMaterial);\n          }\n          instanceCount++;\n          this._draw(subMesh, fillMode, this._instanceDataStorage.overridenInstanceCount);\n        }\n        var visibleInstancesForSubMesh = batch.visibleInstances[subMesh._id];\n        if (visibleInstancesForSubMesh) {\n          var visibleInstanceCount = visibleInstancesForSubMesh.length;\n          instanceCount += visibleInstanceCount;\n          // Stats\n          for (var instanceIndex = 0; instanceIndex < visibleInstanceCount; instanceIndex++) {\n            var instance = visibleInstancesForSubMesh[instanceIndex];\n            // World\n            var world = instance.getWorldMatrix();\n            if (onBeforeDraw) {\n              onBeforeDraw(true, world, effectiveMaterial);\n            }\n            // Draw\n            this._draw(subMesh, fillMode);\n          }\n        }\n        // Stats\n        scene._activeIndices.addCount(subMesh.indexCount * instanceCount, false);\n      }\n      return this;\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"_rebuild\",\n    value: function _rebuild() {\n      var dispose = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this._instanceDataStorage.instancesBuffer) {\n        // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n        if (dispose) {\n          this._instanceDataStorage.instancesBuffer.dispose();\n        }\n        this._instanceDataStorage.instancesBuffer = null;\n      }\n      if (this._userInstancedBuffersStorage) {\n        for (var kind in this._userInstancedBuffersStorage.vertexBuffers) {\n          var buffer = this._userInstancedBuffersStorage.vertexBuffers[kind];\n          if (buffer) {\n            // Dispose instance buffer to be recreated in _renderWithInstances when rendered\n            if (dispose) {\n              buffer.dispose();\n            }\n            this._userInstancedBuffersStorage.vertexBuffers[kind] = null;\n          }\n        }\n        if (this._userInstancedBuffersStorage.vertexArrayObjects) {\n          this._userInstancedBuffersStorage.vertexArrayObjects = {};\n        }\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      _get(_getPrototypeOf(Mesh.prototype), \"_rebuild\", this).call(this, dispose);\n    }\n    /** @internal */\n  }, {\n    key: \"_freeze\",\n    value: function _freeze() {\n      if (!this.subMeshes) {\n        return;\n      }\n      // Prepare batches\n      for (var index = 0; index < this.subMeshes.length; index++) {\n        this._getInstancesRenderList(index);\n      }\n      this._internalMeshDataInfo._effectiveMaterial = null;\n      this._instanceDataStorage.isFrozen = true;\n    }\n    /** @internal */\n  }, {\n    key: \"_unFreeze\",\n    value: function _unFreeze() {\n      this._instanceDataStorage.isFrozen = false;\n      this._instanceDataStorage.previousBatch = null;\n    }\n    /**\n     * Triggers the draw call for the mesh. Usually, you don't need to call this method by your own because the mesh rendering is handled by the scene rendering manager\n     * @param subMesh defines the subMesh to render\n     * @param enableAlphaMode defines if alpha mode can be changed\n     * @param effectiveMeshReplacement defines an optional mesh used to provide info for the rendering\n     * @returns the current mesh\n     */\n  }, {\n    key: \"render\",\n    value: function render(subMesh, enableAlphaMode, effectiveMeshReplacement) {\n      var _a, _b, _c;\n      var scene = this.getScene();\n      if (this._internalAbstractMeshDataInfo._isActiveIntermediate) {\n        this._internalAbstractMeshDataInfo._isActiveIntermediate = false;\n      } else {\n        this._internalAbstractMeshDataInfo._isActive = false;\n      }\n      if (this._checkOcclusionQuery() && !this._occlusionDataStorage.forceRenderingWhenOccluded) {\n        return this;\n      }\n      // Managing instances\n      var batch = this._getInstancesRenderList(subMesh._id, !!effectiveMeshReplacement);\n      if (batch.mustReturn) {\n        return this;\n      }\n      // Checking geometry state\n      if (!this._geometry || !this._geometry.getVertexBuffers() || !this._unIndexed && !this._geometry.getIndexBuffer()) {\n        return this;\n      }\n      var engine = scene.getEngine();\n      var oldCameraMaxZ = 0;\n      var oldCamera = null;\n      if (this.ignoreCameraMaxZ && scene.activeCamera && !scene._isInIntermediateRendering()) {\n        oldCameraMaxZ = scene.activeCamera.maxZ;\n        oldCamera = scene.activeCamera;\n        scene.activeCamera.maxZ = 0;\n        scene.updateTransformMatrix(true);\n      }\n      if (this._internalMeshDataInfo._onBeforeRenderObservable) {\n        this._internalMeshDataInfo._onBeforeRenderObservable.notifyObservers(this);\n      }\n      var renderingMesh = subMesh.getRenderingMesh();\n      var hardwareInstancedRendering = batch.hardwareInstancedRendering[subMesh._id] || renderingMesh.hasThinInstances || !!this._userInstancedBuffersStorage && !subMesh.getMesh()._internalAbstractMeshDataInfo._actAsRegularMesh;\n      var instanceDataStorage = this._instanceDataStorage;\n      var material = subMesh.getMaterial();\n      if (!material) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Material\n      if (!instanceDataStorage.isFrozen || !this._internalMeshDataInfo._effectiveMaterial || this._internalMeshDataInfo._effectiveMaterial !== material) {\n        if (material._storeEffectOnSubMeshes) {\n          if (!material.isReadyForSubMesh(this, subMesh, hardwareInstancedRendering)) {\n            if (oldCamera) {\n              oldCamera.maxZ = oldCameraMaxZ;\n              scene.updateTransformMatrix(true);\n            }\n            return this;\n          }\n        } else if (!material.isReady(this, hardwareInstancedRendering)) {\n          if (oldCamera) {\n            oldCamera.maxZ = oldCameraMaxZ;\n            scene.updateTransformMatrix(true);\n          }\n          return this;\n        }\n        this._internalMeshDataInfo._effectiveMaterial = material;\n      } else if (material._storeEffectOnSubMeshes && !((_a = subMesh.effect) === null || _a === void 0 ? void 0 : _a._wasPreviouslyReady) || !material._storeEffectOnSubMeshes && !((_b = material.getEffect()) === null || _b === void 0 ? void 0 : _b._wasPreviouslyReady)) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      // Alpha mode\n      if (enableAlphaMode) {\n        engine.setAlphaMode(this._internalMeshDataInfo._effectiveMaterial.alphaMode);\n      }\n      var drawWrapper;\n      if (this._internalMeshDataInfo._effectiveMaterial._storeEffectOnSubMeshes) {\n        drawWrapper = subMesh._drawWrapper;\n      } else {\n        drawWrapper = this._internalMeshDataInfo._effectiveMaterial._getDrawWrapper();\n      }\n      var effect = (_c = drawWrapper === null || drawWrapper === void 0 ? void 0 : drawWrapper.effect) !== null && _c !== void 0 ? _c : null;\n      var _iterator8 = _createForOfIteratorHelper(scene._beforeRenderingMeshStage),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var step = _step8.value;\n          step.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      if (!drawWrapper || !effect) {\n        if (oldCamera) {\n          oldCamera.maxZ = oldCameraMaxZ;\n          scene.updateTransformMatrix(true);\n        }\n        return this;\n      }\n      var effectiveMesh = effectiveMeshReplacement || this;\n      var sideOrientation;\n      if (!instanceDataStorage.isFrozen && (this._internalMeshDataInfo._effectiveMaterial.backFaceCulling || this.overrideMaterialSideOrientation !== null)) {\n        var mainDeterminant = effectiveMesh._getWorldMatrixDeterminant();\n        sideOrientation = this.overrideMaterialSideOrientation;\n        if (sideOrientation == null) {\n          sideOrientation = this._internalMeshDataInfo._effectiveMaterial.sideOrientation;\n        }\n        if (mainDeterminant < 0) {\n          sideOrientation = sideOrientation === Material.ClockWiseSideOrientation ? Material.CounterClockWiseSideOrientation : Material.ClockWiseSideOrientation;\n        }\n        instanceDataStorage.sideOrientation = sideOrientation;\n      } else {\n        sideOrientation = instanceDataStorage.sideOrientation;\n      }\n      var reverse = this._internalMeshDataInfo._effectiveMaterial._preBind(drawWrapper, sideOrientation);\n      if (this._internalMeshDataInfo._effectiveMaterial.forceDepthWrite) {\n        engine.setDepthWrite(true);\n      }\n      // Bind\n      var fillMode = scene.forcePointsCloud ? Material.PointFillMode : scene.forceWireframe ? Material.WireFrameFillMode : this._internalMeshDataInfo._effectiveMaterial.fillMode;\n      if (this._internalMeshDataInfo._onBeforeBindObservable) {\n        this._internalMeshDataInfo._onBeforeBindObservable.notifyObservers(this);\n      }\n      if (!hardwareInstancedRendering) {\n        // Binding will be done later because we need to add more info to the VB\n        this._bind(subMesh, effect, fillMode);\n      }\n      var effectiveMaterial = this._internalMeshDataInfo._effectiveMaterial;\n      var world = effectiveMesh.getWorldMatrix();\n      if (effectiveMaterial._storeEffectOnSubMeshes) {\n        effectiveMaterial.bindForSubMesh(world, this, subMesh);\n      } else {\n        effectiveMaterial.bind(world, this);\n      }\n      if (!effectiveMaterial.backFaceCulling && effectiveMaterial.separateCullingPass) {\n        engine.setState(true, effectiveMaterial.zOffset, false, !reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n        engine.setState(true, effectiveMaterial.zOffset, false, reverse, effectiveMaterial.cullBackFaces, effectiveMaterial.stencil, effectiveMaterial.zOffsetUnits);\n        if (this._internalMeshDataInfo._onBetweenPassObservable) {\n          this._internalMeshDataInfo._onBetweenPassObservable.notifyObservers(subMesh);\n        }\n      }\n      // Draw\n      this._processRendering(this, subMesh, effect, fillMode, batch, hardwareInstancedRendering, this._onBeforeDraw, this._internalMeshDataInfo._effectiveMaterial);\n      // Unbind\n      this._internalMeshDataInfo._effectiveMaterial.unbind();\n      var _iterator9 = _createForOfIteratorHelper(scene._afterRenderingMeshStage),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _step10 = _step9.value;\n          _step10.action(this, subMesh, batch, effect);\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      if (this._internalMeshDataInfo._onAfterRenderObservable) {\n        this._internalMeshDataInfo._onAfterRenderObservable.notifyObservers(this);\n      }\n      if (oldCamera) {\n        oldCamera.maxZ = oldCameraMaxZ;\n        scene.updateTransformMatrix(true);\n      }\n      if (scene.performancePriority === ScenePerformancePriority.Aggressive && !instanceDataStorage.isFrozen) {\n        this._freeze();\n      }\n      return this;\n    }\n    /**\n     *   Renormalize the mesh and patch it up if there are no weights\n     *   Similar to normalization by adding the weights compute the reciprocal and multiply all elements, this wil ensure that everything adds to 1.\n     *   However in the case of zero weights then we set just a single influence to 1.\n     *   We check in the function for extra's present and if so we use the normalizeSkinWeightsWithExtras rather than the FourWeights version.\n     */\n  }, {\n    key: \"cleanMatrixWeights\",\n    value: function cleanMatrixWeights() {\n      if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        if (this.isVerticesDataPresent(VertexBuffer.MatricesWeightsExtraKind)) {\n          this._normalizeSkinWeightsAndExtra();\n        } else {\n          this._normalizeSkinFourWeights();\n        }\n      }\n    }\n    // faster 4 weight version.\n  }, {\n    key: \"_normalizeSkinFourWeights\",\n    value: function _normalizeSkinFourWeights() {\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n    }\n    // handle special case of extra verts.  (in theory gltf can handle 12 influences)\n  }, {\n    key: \"_normalizeSkinWeightsAndExtra\",\n    value: function _normalizeSkinWeightsAndExtra() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      var numWeights = matricesWeights.length;\n      for (var a = 0; a < numWeights; a += 4) {\n        // accumulate weights\n        var t = matricesWeights[a] + matricesWeights[a + 1] + matricesWeights[a + 2] + matricesWeights[a + 3];\n        t += matricesWeightsExtra[a] + matricesWeightsExtra[a + 1] + matricesWeightsExtra[a + 2] + matricesWeightsExtra[a + 3];\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          matricesWeights[a] = 1;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          matricesWeights[a] *= recip;\n          matricesWeights[a + 1] *= recip;\n          matricesWeights[a + 2] *= recip;\n          matricesWeights[a + 3] *= recip;\n          // same goes for extras\n          matricesWeightsExtra[a] *= recip;\n          matricesWeightsExtra[a + 1] *= recip;\n          matricesWeightsExtra[a + 2] *= recip;\n          matricesWeightsExtra[a + 3] *= recip;\n        }\n      }\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeights);\n      this.setVerticesData(VertexBuffer.MatricesWeightsKind, matricesWeightsExtra);\n    }\n    /**\n     * ValidateSkinning is used to determine that a mesh has valid skinning data along with skin metrics, if missing weights,\n     * or not normalized it is returned as invalid mesh the string can be used for console logs, or on screen messages to let\n     * the user know there was an issue with importing the mesh\n     * @returns a validation object with skinned, valid and report string\n     */\n  }, {\n    key: \"validateSkinning\",\n    value: function validateSkinning() {\n      var matricesWeightsExtra = this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind);\n      var matricesWeights = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (matricesWeights === null || this.skeleton == null) {\n        return {\n          skinned: false,\n          valid: true,\n          report: \"not skinned\"\n        };\n      }\n      var numWeights = matricesWeights.length;\n      var numberNotSorted = 0;\n      var missingWeights = 0;\n      var maxUsedWeights = 0;\n      var numberNotNormalized = 0;\n      var numInfluences = matricesWeightsExtra === null ? 4 : 8;\n      var usedWeightCounts = new Array();\n      for (var a = 0; a <= numInfluences; a++) {\n        usedWeightCounts[a] = 0;\n      }\n      var toleranceEpsilon = 0.001;\n      for (var _a2 = 0; _a2 < numWeights; _a2 += 4) {\n        var lastWeight = matricesWeights[_a2];\n        var t = lastWeight;\n        var usedWeights = t === 0 ? 0 : 1;\n        for (var b = 1; b < numInfluences; b++) {\n          var d = b < 4 ? matricesWeights[_a2 + b] : matricesWeightsExtra[_a2 + b - 4];\n          if (d > lastWeight) {\n            numberNotSorted++;\n          }\n          if (d !== 0) {\n            usedWeights++;\n          }\n          t += d;\n          lastWeight = d;\n        }\n        // count the buffer weights usage\n        usedWeightCounts[usedWeights]++;\n        // max influences\n        if (usedWeights > maxUsedWeights) {\n          maxUsedWeights = usedWeights;\n        }\n        // check for invalid weight and just set it to 1.\n        if (t === 0) {\n          missingWeights++;\n        } else {\n          // renormalize so everything adds to 1 use reciprocal\n          var recip = 1 / t;\n          var tolerance = 0;\n          for (var _b2 = 0; _b2 < numInfluences; _b2++) {\n            if (_b2 < 4) {\n              tolerance += Math.abs(matricesWeights[_a2 + _b2] - matricesWeights[_a2 + _b2] * recip);\n            } else {\n              tolerance += Math.abs(matricesWeightsExtra[_a2 + _b2 - 4] - matricesWeightsExtra[_a2 + _b2 - 4] * recip);\n            }\n          }\n          // arbitrary epsilon value for dictating not normalized\n          if (tolerance > toleranceEpsilon) {\n            numberNotNormalized++;\n          }\n        }\n      }\n      // validate bone indices are in range of the skeleton\n      var numBones = this.skeleton.bones.length;\n      var matricesIndices = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesIndicesExtra = this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind);\n      var numBadBoneIndices = 0;\n      for (var _a3 = 0; _a3 < numWeights; _a3 += 4) {\n        for (var _b3 = 0; _b3 < numInfluences; _b3++) {\n          var index = _b3 < 4 ? matricesIndices[_a3 + _b3] : matricesIndicesExtra[_a3 + _b3 - 4];\n          if (index >= numBones || index < 0) {\n            numBadBoneIndices++;\n          }\n        }\n      }\n      // log mesh stats\n      var output = \"Number of Weights = \" + numWeights / 4 + \"\\nMaximum influences = \" + maxUsedWeights + \"\\nMissing Weights = \" + missingWeights + \"\\nNot Sorted = \" + numberNotSorted + \"\\nNot Normalized = \" + numberNotNormalized + \"\\nWeightCounts = [\" + usedWeightCounts + \"]\" + \"\\nNumber of bones = \" + numBones + \"\\nBad Bone Indices = \" + numBadBoneIndices;\n      return {\n        skinned: true,\n        valid: missingWeights === 0 && numberNotNormalized === 0 && numBadBoneIndices === 0,\n        report: output\n      };\n    }\n    /** @internal */\n  }, {\n    key: \"_checkDelayState\",\n    value: function _checkDelayState() {\n      var scene = this.getScene();\n      if (this._geometry) {\n        this._geometry.load(scene);\n      } else if (this.delayLoadState === 4) {\n        this.delayLoadState = 2;\n        this._queueLoad(scene);\n      }\n      return this;\n    }\n  }, {\n    key: \"_queueLoad\",\n    value: function _queueLoad(scene) {\n      var _this2 = this;\n      scene.addPendingData(this);\n      var getBinaryData = this.delayLoadingFile.indexOf(\".babylonbinarymeshdata\") !== -1;\n      Tools.LoadFile(this.delayLoadingFile, function (data) {\n        if (data instanceof ArrayBuffer) {\n          _this2._delayLoadingFunction(data, _this2);\n        } else {\n          _this2._delayLoadingFunction(JSON.parse(data), _this2);\n        }\n        _this2.instances.forEach(function (instance) {\n          instance.refreshBoundingInfo();\n          instance._syncSubMeshes();\n        });\n        _this2.delayLoadState = 1;\n        scene.removePendingData(_this2);\n      }, function () {}, scene.offlineProvider, getBinaryData);\n      return this;\n    }\n    /**\n     * Returns `true` if the mesh is within the frustum defined by the passed array of planes.\n     * A mesh is in the frustum if its bounding box intersects the frustum\n     * @param frustumPlanes defines the frustum to test\n     * @returns true if the mesh is in the frustum planes\n     */\n  }, {\n    key: \"isInFrustum\",\n    value: function isInFrustum(frustumPlanes) {\n      if (this.delayLoadState === 2) {\n        return false;\n      }\n      if (!_get(_getPrototypeOf(Mesh.prototype), \"isInFrustum\", this).call(this, frustumPlanes)) {\n        return false;\n      }\n      this._checkDelayState();\n      return true;\n    }\n    /**\n     * Sets the mesh material by the material or multiMaterial `id` property\n     * @param id is a string identifying the material or the multiMaterial\n     * @returns the current mesh\n     */\n  }, {\n    key: \"setMaterialById\",\n    value: function setMaterialById(id) {\n      var materials = this.getScene().materials;\n      var index;\n      for (index = materials.length - 1; index > -1; index--) {\n        if (materials[index].id === id) {\n          this.material = materials[index];\n          return this;\n        }\n      }\n      // Multi\n      var multiMaterials = this.getScene().multiMaterials;\n      for (index = multiMaterials.length - 1; index > -1; index--) {\n        if (multiMaterials[index].id === id) {\n          this.material = multiMaterials[index];\n          return this;\n        }\n      }\n      return this;\n    }\n    /**\n     * Returns as a new array populated with the mesh material and/or skeleton, if any.\n     * @returns an array of IAnimatable\n     */\n  }, {\n    key: \"getAnimatables\",\n    value: function getAnimatables() {\n      var results = new Array();\n      if (this.material) {\n        results.push(this.material);\n      }\n      if (this.skeleton) {\n        results.push(this.skeleton);\n      }\n      return results;\n    }\n    /**\n     * Modifies the mesh geometry according to the passed transformation matrix.\n     * This method returns nothing but it really modifies the mesh even if it's originally not set as updatable.\n     * The mesh normals are modified using the same transformation.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @param transform defines the transform matrix to use\n     * @see https://doc.babylonjs.com/resources/baking_transformations\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeTransformIntoVertices\",\n    value: function bakeTransformIntoVertices(transform) {\n      // Position\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      var submeshes = this.subMeshes.splice(0);\n      this._resetPointsArrayCache();\n      var data = this.getVerticesData(VertexBuffer.PositionKind);\n      var temp = new Array();\n      var index;\n      for (index = 0; index < data.length; index += 3) {\n        Vector3.TransformCoordinates(Vector3.FromArray(data, index), transform).toArray(temp, index);\n      }\n      this.setVerticesData(VertexBuffer.PositionKind, temp, this.getVertexBuffer(VertexBuffer.PositionKind).isUpdatable());\n      // Normals\n      if (this.isVerticesDataPresent(VertexBuffer.NormalKind)) {\n        data = this.getVerticesData(VertexBuffer.NormalKind);\n        temp = [];\n        for (index = 0; index < data.length; index += 3) {\n          Vector3.TransformNormal(Vector3.FromArray(data, index), transform).normalize().toArray(temp, index);\n        }\n        this.setVerticesData(VertexBuffer.NormalKind, temp, this.getVertexBuffer(VertexBuffer.NormalKind).isUpdatable());\n      }\n      // flip faces?\n      if (transform.determinant() < 0) {\n        this.flipFaces();\n      }\n      // Restore submeshes\n      this.releaseSubMeshes();\n      this.subMeshes = submeshes;\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to its own current World Matrix.\n     * The mesh World Matrix is then reset.\n     * This method returns nothing but really modifies the mesh even if it's originally not set as updatable.\n     * Note that, under the hood, this method sets a new VertexBuffer each call.\n     * @see https://doc.babylonjs.com/resources/baking_transformations\n     * @param bakeIndependenlyOfChildren indicates whether to preserve all child nodes' World Matrix during baking\n     * @returns the current mesh\n     */\n  }, {\n    key: \"bakeCurrentTransformIntoVertices\",\n    value: function bakeCurrentTransformIntoVertices() {\n      var bakeIndependenlyOfChildren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.bakeTransformIntoVertices(this.computeWorldMatrix(true));\n      this.resetLocalMatrix(bakeIndependenlyOfChildren);\n      return this;\n    }\n    // Cache\n    /** @internal */\n  }, {\n    key: \"_positions\",\n    get: function get() {\n      if (this._internalAbstractMeshDataInfo._positions) {\n        return this._internalAbstractMeshDataInfo._positions;\n      }\n      if (this._geometry) {\n        return this._geometry._positions;\n      }\n      return null;\n    }\n    /** @internal */\n  }, {\n    key: \"_resetPointsArrayCache\",\n    value: function _resetPointsArrayCache() {\n      if (this._geometry) {\n        this._geometry._resetPointsArrayCache();\n      }\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_generatePointsArray\",\n    value: function _generatePointsArray() {\n      if (this._geometry) {\n        return this._geometry._generatePointsArray();\n      }\n      return false;\n    }\n    /**\n     * Returns a new Mesh object generated from the current mesh properties.\n     * This method must not get confused with createInstance()\n     * @param name is a string, the name given to the new mesh\n     * @param newParent can be any Node object (default `null`)\n     * @param doNotCloneChildren allows/denies the recursive cloning of the original mesh children if any (default `false`)\n     * @param clonePhysicsImpostor allows/denies the cloning in the same time of the original mesh `body` used by the physics engine, if any (default `true`)\n     * @returns a new mesh\n     */\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      var newParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var doNotCloneChildren = arguments.length > 2 ? arguments[2] : undefined;\n      var clonePhysicsImpostor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      return new Mesh(name, this.getScene(), newParent, this, doNotCloneChildren, clonePhysicsImpostor);\n    }\n    /**\n     * Releases resources associated with this mesh.\n     * @param doNotRecurse Set to true to not recurse into each children (recurse into each children by default)\n     * @param disposeMaterialAndTextures Set to true to also dispose referenced materials and textures (false by default)\n     */\n  }, {\n    key: \"dispose\",\n    value: function dispose(doNotRecurse) {\n      var disposeMaterialAndTextures = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.morphTargetManager = null;\n      if (this._geometry) {\n        this._geometry.releaseForMesh(this, true);\n      }\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (internalDataInfo._onBeforeDrawObservable) {\n        internalDataInfo._onBeforeDrawObservable.clear();\n      }\n      if (internalDataInfo._onBeforeBindObservable) {\n        internalDataInfo._onBeforeBindObservable.clear();\n      }\n      if (internalDataInfo._onBeforeRenderObservable) {\n        internalDataInfo._onBeforeRenderObservable.clear();\n      }\n      if (internalDataInfo._onAfterRenderObservable) {\n        internalDataInfo._onAfterRenderObservable.clear();\n      }\n      if (internalDataInfo._onBetweenPassObservable) {\n        internalDataInfo._onBetweenPassObservable.clear();\n      }\n      // Sources\n      if (this._scene.useClonedMeshMap) {\n        if (internalDataInfo.meshMap) {\n          for (var uniqueId in internalDataInfo.meshMap) {\n            var mesh = internalDataInfo.meshMap[uniqueId];\n            if (mesh) {\n              mesh._internalMeshDataInfo._source = null;\n              internalDataInfo.meshMap[uniqueId] = undefined;\n            }\n          }\n        }\n        if (internalDataInfo._source && internalDataInfo._source._internalMeshDataInfo.meshMap) {\n          internalDataInfo._source._internalMeshDataInfo.meshMap[this.uniqueId] = undefined;\n        }\n      } else {\n        var meshes = this.getScene().meshes;\n        var _iterator10 = _createForOfIteratorHelper(meshes),\n          _step11;\n        try {\n          for (_iterator10.s(); !(_step11 = _iterator10.n()).done;) {\n            var abstractMesh = _step11.value;\n            var _mesh = abstractMesh;\n            if (_mesh._internalMeshDataInfo && _mesh._internalMeshDataInfo._source && _mesh._internalMeshDataInfo._source === this) {\n              _mesh._internalMeshDataInfo._source = null;\n            }\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      }\n      internalDataInfo._source = null;\n      // Instances\n      this._disposeInstanceSpecificData();\n      // Thin instances\n      this._disposeThinInstanceSpecificData();\n      if (this._internalMeshDataInfo._checkReadinessObserver) {\n        this._scene.onBeforeRenderObservable.remove(this._internalMeshDataInfo._checkReadinessObserver);\n      }\n      _get(_getPrototypeOf(Mesh.prototype), \"dispose\", this).call(this, doNotRecurse, disposeMaterialAndTextures);\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeInstanceSpecificData\",\n    value: function _disposeInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_disposeThinInstanceSpecificData\",\n    value: function _disposeThinInstanceSpecificData() {\n      // Do nothing\n    }\n    /** @internal */\n  }, {\n    key: \"_invalidateInstanceVertexArrayObject\",\n    value: function _invalidateInstanceVertexArrayObject() {\n      // Do nothing\n    }\n    /**\n     * Modifies the mesh geometry according to a displacement map.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param url is a string, the URL from the image file is to be downloaded.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param onSuccess is an optional Javascript function to be called just after the mesh is modified. It is passed the modified mesh and must return nothing.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMap\",\n    value: function applyDisplacementMap(url, minHeight, maxHeight, onSuccess, uvOffset, uvScale) {\n      var _this3 = this;\n      var forceUpdate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var scene = this.getScene();\n      var onload = function onload(img) {\n        // Getting height map data\n        var heightMapWidth = img.width;\n        var heightMapHeight = img.height;\n        var canvas = _this3.getEngine().createCanvas(heightMapWidth, heightMapHeight);\n        var context = canvas.getContext(\"2d\");\n        context.drawImage(img, 0, 0);\n        // Create VertexData from map data\n        //Cast is due to wrong definition in lib.d.ts from ts 1.3 - https://github.com/Microsoft/TypeScript/issues/949\n        var buffer = context.getImageData(0, 0, heightMapWidth, heightMapHeight).data;\n        _this3.applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale, forceUpdate);\n        //execute success callback, if set\n        if (onSuccess) {\n          onSuccess(_this3);\n        }\n      };\n      Tools.LoadImage(url, onload, function () {}, scene.offlineProvider);\n      return this;\n    }\n    /**\n     * Modifies the mesh geometry according to a displacementMap buffer.\n     * A displacement map is a colored image. Each pixel color value (actually a gradient computed from red, green, blue values) will give the displacement to apply to each mesh vertex.\n     * The mesh must be set as updatable. Its internal geometry is directly modified, no new buffer are allocated.\n     * @param buffer is a `Uint8Array` buffer containing series of `Uint8` lower than 255, the red, green, blue and alpha values of each successive pixel.\n     * @param heightMapWidth is the width of the buffer image.\n     * @param heightMapHeight is the height of the buffer image.\n     * @param minHeight is the lower limit of the displacement.\n     * @param maxHeight is the upper limit of the displacement.\n     * @param uvOffset is an optional vector2 used to offset UV.\n     * @param uvScale is an optional vector2 used to scale UV.\n     * @param forceUpdate defines whether or not to force an update of the generated buffers. This is useful to apply on a deserialized model for instance.\n     * @returns the Mesh.\n     */\n  }, {\n    key: \"applyDisplacementMapFromBuffer\",\n    value: function applyDisplacementMapFromBuffer(buffer, heightMapWidth, heightMapHeight, minHeight, maxHeight, uvOffset, uvScale) {\n      var forceUpdate = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind) || !this.isVerticesDataPresent(VertexBuffer.NormalKind) || !this.isVerticesDataPresent(VertexBuffer.UVKind)) {\n        Logger.Warn(\"Cannot call applyDisplacementMap: Given mesh is not complete. Position, Normal or UV are missing\");\n        return this;\n      }\n      var positions = this.getVerticesData(VertexBuffer.PositionKind, true, true);\n      var normals = this.getVerticesData(VertexBuffer.NormalKind);\n      var uvs = this.getVerticesData(VertexBuffer.UVKind);\n      var position = Vector3.Zero();\n      var normal = Vector3.Zero();\n      var uv = Vector2.Zero();\n      uvOffset = uvOffset || Vector2.Zero();\n      uvScale = uvScale || new Vector2(1, 1);\n      for (var index = 0; index < positions.length; index += 3) {\n        Vector3.FromArrayToRef(positions, index, position);\n        Vector3.FromArrayToRef(normals, index, normal);\n        Vector2.FromArrayToRef(uvs, index / 3 * 2, uv);\n        // Compute height\n        var u = Math.abs(uv.x * uvScale.x + uvOffset.x % 1) * (heightMapWidth - 1) % heightMapWidth | 0;\n        var v = Math.abs(uv.y * uvScale.y + uvOffset.y % 1) * (heightMapHeight - 1) % heightMapHeight | 0;\n        var pos = (u + v * heightMapWidth) * 4;\n        var r = buffer[pos] / 255.0;\n        var g = buffer[pos + 1] / 255.0;\n        var b = buffer[pos + 2] / 255.0;\n        var gradient = r * 0.3 + g * 0.59 + b * 0.11;\n        normal.normalize();\n        normal.scaleInPlace(minHeight + (maxHeight - minHeight) * gradient);\n        position = position.add(normal);\n        position.toArray(positions, index);\n      }\n      VertexData.ComputeNormals(positions, this.getIndices(), normals);\n      if (forceUpdate) {\n        this.setVerticesData(VertexBuffer.PositionKind, positions);\n        this.setVerticesData(VertexBuffer.NormalKind, normals);\n        this.setVerticesData(VertexBuffer.UVKind, uvs);\n      } else {\n        this.updateVerticesData(VertexBuffer.PositionKind, positions);\n        this.updateVerticesData(VertexBuffer.NormalKind, normals);\n      }\n      return this;\n    }\n    /**\n     * Modify the mesh to get a flat shading rendering.\n     * This means each mesh facet will then have its own normals. Usually new vertices are added in the mesh geometry to get this result.\n     * Warning : the mesh is really modified even if not set originally as updatable and, under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToFlatShadedMesh\",\n    value: function convertToFlatShadedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var updatableNormals = false;\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        // Check data consistency\n        var vertexData = vertexBuffer.getData();\n        if (vertexData instanceof Array || vertexData instanceof Float32Array) {\n          if (vertexData.length === 0) {\n            continue;\n          }\n        }\n        if (kind === VertexBuffer.NormalKind) {\n          updatableNormals = vertexBuffer.isUpdatable();\n          kinds.splice(kindIndex, 1);\n          kindIndex--;\n          continue;\n        }\n        vbs[kind] = vertexBuffer;\n        data[kind] = this.getVerticesData(kind);\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          if (!vbs[kind]) {\n            continue;\n          }\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating faces & normal\n      var normals = [];\n      var positions = newdata[VertexBuffer.PositionKind];\n      var useRightHandedSystem = this.getScene().useRightHandedSystem;\n      var flipNormalGeneration;\n      if (useRightHandedSystem) {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 1;\n      } else {\n        flipNormalGeneration = this.overrideMaterialSideOrientation === 0;\n      }\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n        var p1 = Vector3.FromArray(positions, index * 3);\n        var p2 = Vector3.FromArray(positions, (index + 1) * 3);\n        var p3 = Vector3.FromArray(positions, (index + 2) * 3);\n        var p1p2 = p1.subtract(p2);\n        var p3p2 = p3.subtract(p2);\n        var normal = Vector3.Normalize(Vector3.Cross(p1p2, p3p2));\n        if (flipNormalGeneration) {\n          normal.scaleInPlace(-1);\n        }\n        // Store same normals for every vertex\n        for (var localIndex = 0; localIndex < 3; localIndex++) {\n          normals.push(normal.x);\n          normals.push(normal.y);\n          normals.push(normal.z);\n        }\n      }\n      this.setIndices(indices);\n      this.setVerticesData(VertexBuffer.NormalKind, normals, updatableNormals);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        if (!newdata[kind]) {\n          continue;\n        }\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * This method removes all the mesh indices and add new vertices (duplication) in order to unfold facets into buffers.\n     * In other words, more vertices, no more indices and a single bigger VBO.\n     * The mesh is really modified even if not set originally as updatable. Under the hood, a new VertexBuffer is allocated.\n     * @returns current mesh\n     */\n  }, {\n    key: \"convertToUnIndexedMesh\",\n    value: function convertToUnIndexedMesh() {\n      var kinds = this.getVerticesDataKinds();\n      var vbs = {};\n      var data = {};\n      var newdata = {};\n      var kindIndex;\n      var kind;\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        var vertexBuffer = this.getVertexBuffer(kind);\n        vbs[kind] = vertexBuffer;\n        data[kind] = vbs[kind].getData();\n        newdata[kind] = [];\n      }\n      // Save previous submeshes\n      var previousSubmeshes = this.subMeshes.slice(0);\n      var indices = this.getIndices();\n      var totalIndices = this.getTotalIndices();\n      // Generating unique vertices per face\n      var index;\n      for (index = 0; index < totalIndices; index++) {\n        var vertexIndex = indices[index];\n        for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n          kind = kinds[kindIndex];\n          var stride = vbs[kind].getStrideSize();\n          for (var offset = 0; offset < stride; offset++) {\n            newdata[kind].push(data[kind][vertexIndex * stride + offset]);\n          }\n        }\n      }\n      // Updating indices\n      for (index = 0; index < totalIndices; index += 3) {\n        indices[index] = index;\n        indices[index + 1] = index + 1;\n        indices[index + 2] = index + 2;\n      }\n      this.setIndices(indices);\n      // Updating vertex buffers\n      for (kindIndex = 0; kindIndex < kinds.length; kindIndex++) {\n        kind = kinds[kindIndex];\n        this.setVerticesData(kind, newdata[kind], vbs[kind].isUpdatable(), vbs[kind].getStrideSize());\n      }\n      // Updating submeshes\n      this.releaseSubMeshes();\n      for (var submeshIndex = 0; submeshIndex < previousSubmeshes.length; submeshIndex++) {\n        var previousOne = previousSubmeshes[submeshIndex];\n        SubMesh.AddToMesh(previousOne.materialIndex, previousOne.indexStart, previousOne.indexCount, previousOne.indexStart, previousOne.indexCount, this);\n      }\n      this._unIndexed = true;\n      this.synchronizeInstances();\n      return this;\n    }\n    /**\n     * Inverses facet orientations.\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param flipNormals will also inverts the normals\n     * @returns current mesh\n     */\n  }, {\n    key: \"flipFaces\",\n    value: function flipFaces() {\n      var flipNormals = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var i;\n      if (flipNormals && this.isVerticesDataPresent(VertexBuffer.NormalKind) && vertex_data.normals) {\n        for (i = 0; i < vertex_data.normals.length; i++) {\n          vertex_data.normals[i] *= -1;\n        }\n      }\n      if (vertex_data.indices) {\n        var temp;\n        for (i = 0; i < vertex_data.indices.length; i += 3) {\n          // reassign indices\n          temp = vertex_data.indices[i + 1];\n          vertex_data.indices[i + 1] = vertex_data.indices[i + 2];\n          vertex_data.indices[i + 2] = temp;\n        }\n      }\n      vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      return this;\n    }\n    /**\n     * Increase the number of facets and hence vertices in a mesh\n     * Vertex normals are interpolated from existing vertex normals\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     * @param numberPerEdge the number of new vertices to add to each edge of a facet, optional default 1\n     */\n  }, {\n    key: \"increaseVertices\",\n    value: function increaseVertices() {\n      var numberPerEdge = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentIndices = vertex_data.indices && !Array.isArray(vertex_data.indices) && Array.from ? Array.from(vertex_data.indices) : vertex_data.indices;\n      var positions = vertex_data.positions && !Array.isArray(vertex_data.positions) && Array.from ? Array.from(vertex_data.positions) : vertex_data.positions;\n      var uvs = vertex_data.uvs && !Array.isArray(vertex_data.uvs) && Array.from ? Array.from(vertex_data.uvs) : vertex_data.uvs;\n      var normals = vertex_data.normals && !Array.isArray(vertex_data.normals) && Array.from ? Array.from(vertex_data.normals) : vertex_data.normals;\n      if (!currentIndices || !positions) {\n        Logger.Warn(\"Couldn't increase number of vertices : VertexData must contain at least indices and positions\");\n      } else {\n        vertex_data.indices = currentIndices;\n        vertex_data.positions = positions;\n        if (uvs) {\n          vertex_data.uvs = uvs;\n        }\n        if (normals) {\n          vertex_data.normals = normals;\n        }\n        var segments = numberPerEdge + 1; //segments per current facet edge, become sides of new facets\n        var tempIndices = new Array();\n        for (var i = 0; i < segments + 1; i++) {\n          tempIndices[i] = new Array();\n        }\n        var a; //vertex index of one end of a side\n        var b; //vertex index of other end of the side\n        var deltaPosition = new Vector3(0, 0, 0);\n        var deltaNormal = new Vector3(0, 0, 0);\n        var deltaUV = new Vector2(0, 0);\n        var indices = new Array();\n        var vertexIndex = new Array();\n        var side = new Array();\n        var len;\n        var positionPtr = positions.length;\n        var uvPtr;\n        if (uvs) {\n          uvPtr = uvs.length;\n        }\n        var normalsPtr;\n        if (normals) {\n          normalsPtr = normals.length;\n        }\n        for (var _i = 0; _i < currentIndices.length; _i += 3) {\n          vertexIndex[0] = currentIndices[_i];\n          vertexIndex[1] = currentIndices[_i + 1];\n          vertexIndex[2] = currentIndices[_i + 2];\n          for (var j = 0; j < 3; j++) {\n            a = vertexIndex[j];\n            b = vertexIndex[(j + 1) % 3];\n            if (side[a] === undefined && side[b] === undefined) {\n              side[a] = new Array();\n              side[b] = new Array();\n            } else {\n              if (side[a] === undefined) {\n                side[a] = new Array();\n              }\n              if (side[b] === undefined) {\n                side[b] = new Array();\n              }\n            }\n            if (side[a][b] === undefined && side[b][a] === undefined) {\n              side[a][b] = [];\n              deltaPosition.x = (positions[3 * b] - positions[3 * a]) / segments;\n              deltaPosition.y = (positions[3 * b + 1] - positions[3 * a + 1]) / segments;\n              deltaPosition.z = (positions[3 * b + 2] - positions[3 * a + 2]) / segments;\n              if (normals) {\n                deltaNormal.x = (normals[3 * b] - normals[3 * a]) / segments;\n                deltaNormal.y = (normals[3 * b + 1] - normals[3 * a + 1]) / segments;\n                deltaNormal.z = (normals[3 * b + 2] - normals[3 * a + 2]) / segments;\n              }\n              if (uvs) {\n                deltaUV.x = (uvs[2 * b] - uvs[2 * a]) / segments;\n                deltaUV.y = (uvs[2 * b + 1] - uvs[2 * a + 1]) / segments;\n              }\n              side[a][b].push(a);\n              for (var k = 1; k < segments; k++) {\n                side[a][b].push(positions.length / 3);\n                positions[positionPtr++] = positions[3 * a] + k * deltaPosition.x;\n                positions[positionPtr++] = positions[3 * a + 1] + k * deltaPosition.y;\n                positions[positionPtr++] = positions[3 * a + 2] + k * deltaPosition.z;\n                if (normals) {\n                  normals[normalsPtr++] = normals[3 * a] + k * deltaNormal.x;\n                  normals[normalsPtr++] = normals[3 * a + 1] + k * deltaNormal.y;\n                  normals[normalsPtr++] = normals[3 * a + 2] + k * deltaNormal.z;\n                }\n                if (uvs) {\n                  uvs[uvPtr++] = uvs[2 * a] + k * deltaUV.x;\n                  uvs[uvPtr++] = uvs[2 * a + 1] + k * deltaUV.y;\n                }\n              }\n              side[a][b].push(b);\n              side[b][a] = new Array();\n              len = side[a][b].length;\n              for (var idx = 0; idx < len; idx++) {\n                side[b][a][idx] = side[a][b][len - 1 - idx];\n              }\n            }\n          }\n          //Calculate positions, normals and uvs of new internal vertices\n          tempIndices[0][0] = currentIndices[_i];\n          tempIndices[1][0] = side[currentIndices[_i]][currentIndices[_i + 1]][1];\n          tempIndices[1][1] = side[currentIndices[_i]][currentIndices[_i + 2]][1];\n          for (var _k = 2; _k < segments; _k++) {\n            tempIndices[_k][0] = side[currentIndices[_i]][currentIndices[_i + 1]][_k];\n            tempIndices[_k][_k] = side[currentIndices[_i]][currentIndices[_i + 2]][_k];\n            deltaPosition.x = (positions[3 * tempIndices[_k][_k]] - positions[3 * tempIndices[_k][0]]) / _k;\n            deltaPosition.y = (positions[3 * tempIndices[_k][_k] + 1] - positions[3 * tempIndices[_k][0] + 1]) / _k;\n            deltaPosition.z = (positions[3 * tempIndices[_k][_k] + 2] - positions[3 * tempIndices[_k][0] + 2]) / _k;\n            if (normals) {\n              deltaNormal.x = (normals[3 * tempIndices[_k][_k]] - normals[3 * tempIndices[_k][0]]) / _k;\n              deltaNormal.y = (normals[3 * tempIndices[_k][_k] + 1] - normals[3 * tempIndices[_k][0] + 1]) / _k;\n              deltaNormal.z = (normals[3 * tempIndices[_k][_k] + 2] - normals[3 * tempIndices[_k][0] + 2]) / _k;\n            }\n            if (uvs) {\n              deltaUV.x = (uvs[2 * tempIndices[_k][_k]] - uvs[2 * tempIndices[_k][0]]) / _k;\n              deltaUV.y = (uvs[2 * tempIndices[_k][_k] + 1] - uvs[2 * tempIndices[_k][0] + 1]) / _k;\n            }\n            for (var _j = 1; _j < _k; _j++) {\n              tempIndices[_k][_j] = positions.length / 3;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0]] + _j * deltaPosition.x;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 1] + _j * deltaPosition.y;\n              positions[positionPtr++] = positions[3 * tempIndices[_k][0] + 2] + _j * deltaPosition.z;\n              if (normals) {\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0]] + _j * deltaNormal.x;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 1] + _j * deltaNormal.y;\n                normals[normalsPtr++] = normals[3 * tempIndices[_k][0] + 2] + _j * deltaNormal.z;\n              }\n              if (uvs) {\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0]] + _j * deltaUV.x;\n                uvs[uvPtr++] = uvs[2 * tempIndices[_k][0] + 1] + _j * deltaUV.y;\n              }\n            }\n          }\n          tempIndices[segments] = side[currentIndices[_i + 1]][currentIndices[_i + 2]];\n          // reform indices\n          indices.push(tempIndices[0][0], tempIndices[1][0], tempIndices[1][1]);\n          for (var _k2 = 1; _k2 < segments; _k2++) {\n            var _j2 = void 0;\n            for (_j2 = 0; _j2 < _k2; _j2++) {\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n              indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2 + 1], tempIndices[_k2][_j2 + 1]);\n            }\n            indices.push(tempIndices[_k2][_j2], tempIndices[_k2 + 1][_j2], tempIndices[_k2 + 1][_j2 + 1]);\n          }\n        }\n        vertex_data.indices = indices;\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    /**\n     * Force adjacent facets to share vertices and remove any facets that have all vertices in a line\n     * This will undo any application of covertToFlatShadedMesh\n     * Warning : the mesh is really modified even if not set originally as updatable. A new VertexBuffer is created under the hood each call.\n     */\n  }, {\n    key: \"forceSharedVertices\",\n    value: function forceSharedVertices() {\n      var vertex_data = VertexData.ExtractFromMesh(this);\n      var currentUVs = vertex_data.uvs;\n      var currentIndices = vertex_data.indices;\n      var currentPositions = vertex_data.positions;\n      var currentColors = vertex_data.colors;\n      var currentMatrixIndices = vertex_data.matricesIndices;\n      var currentMatrixWeights = vertex_data.matricesWeights;\n      var currentMatrixIndicesExtra = vertex_data.matricesIndicesExtra;\n      var currentMatrixWeightsExtra = vertex_data.matricesWeightsExtra;\n      if (currentIndices === void 0 || currentPositions === void 0 || currentIndices === null || currentPositions === null) {\n        Logger.Warn(\"VertexData contains empty entries\");\n      } else {\n        var positions = new Array();\n        var indices = new Array();\n        var uvs = new Array();\n        var colors = new Array();\n        var matrixIndices = new Array();\n        var matrixWeights = new Array();\n        var matrixIndicesExtra = new Array();\n        var matrixWeightsExtra = new Array();\n        var pstring = new Array(); //lists facet vertex positions (a,b,c) as string \"a|b|c\"\n        var indexPtr = 0; // pointer to next available index value\n        var uniquePositions = {}; // unique vertex positions\n        var ptr; // pointer to element in uniquePositions\n        var facet;\n        for (var i = 0; i < currentIndices.length; i += 3) {\n          facet = [currentIndices[i], currentIndices[i + 1], currentIndices[i + 2]]; //facet vertex indices\n          pstring = new Array();\n          for (var j = 0; j < 3; j++) {\n            pstring[j] = \"\";\n            for (var k = 0; k < 3; k++) {\n              //small values make 0\n              if (Math.abs(currentPositions[3 * facet[j] + k]) < 0.00000001) {\n                currentPositions[3 * facet[j] + k] = 0;\n              }\n              pstring[j] += currentPositions[3 * facet[j] + k] + \"|\";\n            }\n          }\n          //check facet vertices to see that none are repeated\n          // do not process any facet that has a repeated vertex, ie is a line\n          if (!(pstring[0] == pstring[1] || pstring[0] == pstring[2] || pstring[1] == pstring[2])) {\n            //for each facet position check if already listed in uniquePositions\n            // if not listed add to uniquePositions and set index pointer\n            // if listed use its index in uniquePositions and new index pointer\n            for (var _j3 = 0; _j3 < 3; _j3++) {\n              ptr = uniquePositions[pstring[_j3]];\n              if (ptr === undefined) {\n                uniquePositions[pstring[_j3]] = indexPtr;\n                ptr = indexPtr++;\n                //not listed so add individual x, y, z coordinates to positions\n                for (var _k3 = 0; _k3 < 3; _k3++) {\n                  positions.push(currentPositions[3 * facet[_j3] + _k3]);\n                }\n                if (currentColors !== null && currentColors !== void 0) {\n                  for (var _k4 = 0; _k4 < 4; _k4++) {\n                    colors.push(currentColors[4 * facet[_j3] + _k4]);\n                  }\n                }\n                if (currentUVs !== null && currentUVs !== void 0) {\n                  for (var _k5 = 0; _k5 < 2; _k5++) {\n                    uvs.push(currentUVs[2 * facet[_j3] + _k5]);\n                  }\n                }\n                if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n                  for (var _k6 = 0; _k6 < 4; _k6++) {\n                    matrixIndices.push(currentMatrixIndices[4 * facet[_j3] + _k6]);\n                  }\n                }\n                if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n                  for (var _k7 = 0; _k7 < 4; _k7++) {\n                    matrixWeights.push(currentMatrixWeights[4 * facet[_j3] + _k7]);\n                  }\n                }\n                if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n                  for (var _k8 = 0; _k8 < 4; _k8++) {\n                    matrixIndicesExtra.push(currentMatrixIndicesExtra[4 * facet[_j3] + _k8]);\n                  }\n                }\n                if (currentMatrixWeightsExtra !== null && currentMatrixWeightsExtra !== void 0) {\n                  for (var _k9 = 0; _k9 < 4; _k9++) {\n                    matrixWeightsExtra.push(currentMatrixWeightsExtra[4 * facet[_j3] + _k9]);\n                  }\n                }\n              }\n              // add new index pointer to indices array\n              indices.push(ptr);\n            }\n          }\n        }\n        var normals = new Array();\n        VertexData.ComputeNormals(positions, indices, normals);\n        //create new vertex data object and update\n        vertex_data.positions = positions;\n        vertex_data.indices = indices;\n        vertex_data.normals = normals;\n        if (currentUVs !== null && currentUVs !== void 0) {\n          vertex_data.uvs = uvs;\n        }\n        if (currentColors !== null && currentColors !== void 0) {\n          vertex_data.colors = colors;\n        }\n        if (currentMatrixIndices !== null && currentMatrixIndices !== void 0) {\n          vertex_data.matricesIndices = matrixIndices;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeights = matrixWeights;\n        }\n        if (currentMatrixIndicesExtra !== null && currentMatrixIndicesExtra !== void 0) {\n          vertex_data.matricesIndicesExtra = matrixIndicesExtra;\n        }\n        if (currentMatrixWeights !== null && currentMatrixWeights !== void 0) {\n          vertex_data.matricesWeightsExtra = matrixWeightsExtra;\n        }\n        vertex_data.applyToMesh(this, this.isVertexBufferUpdatable(VertexBuffer.PositionKind));\n      }\n    }\n    // Instances\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/naming-convention\n  }, {\n    key: \"createInstance\",\n    value:\n    /**\n     * Creates a new InstancedMesh object from the mesh model.\n     * @see https://doc.babylonjs.com/how_to/how_to_use_instances\n     * @param name defines the name of the new instance\n     * @returns a new InstancedMesh\n     */\n    function createInstance(name) {\n      return Mesh._instancedMeshFactory(name, this);\n    }\n    /**\n     * Synchronises all the mesh instance submeshes to the current mesh submeshes, if any.\n     * After this call, all the mesh instances have the same submeshes than the current mesh.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"synchronizeInstances\",\n    value: function synchronizeInstances() {\n      for (var instanceIndex = 0; instanceIndex < this.instances.length; instanceIndex++) {\n        var instance = this.instances[instanceIndex];\n        instance._syncSubMeshes();\n      }\n      return this;\n    }\n    /**\n     * Optimization of the mesh's indices, in case a mesh has duplicated vertices.\n     * The function will only reorder the indices and will not remove unused vertices to avoid problems with submeshes.\n     * This should be used together with the simplification to avoid disappearing triangles.\n     * @param successCallback an optional success callback to be called after the optimization finished.\n     * @returns the current mesh\n     */\n  }, {\n    key: \"optimizeIndices\",\n    value: function optimizeIndices(successCallback) {\n      var _this4 = this;\n      var indices = this.getIndices();\n      var positions = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positions || !indices) {\n        return this;\n      }\n      var vectorPositions = new Array();\n      for (var pos = 0; pos < positions.length; pos = pos + 3) {\n        vectorPositions.push(Vector3.FromArray(positions, pos));\n      }\n      var dupes = new Array();\n      AsyncLoop.SyncAsyncForLoop(vectorPositions.length, 40, function (iteration) {\n        var realPos = vectorPositions.length - 1 - iteration;\n        var testedPosition = vectorPositions[realPos];\n        for (var j = 0; j < realPos; ++j) {\n          var againstPosition = vectorPositions[j];\n          if (testedPosition.equals(againstPosition)) {\n            dupes[realPos] = j;\n            break;\n          }\n        }\n      }, function () {\n        for (var i = 0; i < indices.length; ++i) {\n          indices[i] = dupes[indices[i]] || indices[i];\n        }\n        //indices are now reordered\n        var originalSubMeshes = _this4.subMeshes.slice(0);\n        _this4.setIndices(indices);\n        _this4.subMeshes = originalSubMeshes;\n        if (successCallback) {\n          successCallback(_this4);\n        }\n      });\n      return this;\n    }\n    /**\n     * Serialize current mesh\n     * @param serializationObject defines the object which will receive the serialization data\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var serializationObject = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      serializationObject.name = this.name;\n      serializationObject.id = this.id;\n      serializationObject.uniqueId = this.uniqueId;\n      serializationObject.type = this.getClassName();\n      if (Tags && Tags.HasTags(this)) {\n        serializationObject.tags = Tags.GetTags(this);\n      }\n      serializationObject.position = this.position.asArray();\n      if (this.rotationQuaternion) {\n        serializationObject.rotationQuaternion = this.rotationQuaternion.asArray();\n      } else if (this.rotation) {\n        serializationObject.rotation = this.rotation.asArray();\n      }\n      serializationObject.scaling = this.scaling.asArray();\n      if (this._postMultiplyPivotMatrix) {\n        serializationObject.pivotMatrix = this.getPivotMatrix().asArray();\n      } else {\n        serializationObject.localMatrix = this.getPivotMatrix().asArray();\n      }\n      serializationObject.isEnabled = this.isEnabled(false);\n      serializationObject.isVisible = this.isVisible;\n      serializationObject.infiniteDistance = this.infiniteDistance;\n      serializationObject.pickable = this.isPickable;\n      serializationObject.receiveShadows = this.receiveShadows;\n      serializationObject.billboardMode = this.billboardMode;\n      serializationObject.visibility = this.visibility;\n      serializationObject.checkCollisions = this.checkCollisions;\n      serializationObject.isBlocker = this.isBlocker;\n      serializationObject.overrideMaterialSideOrientation = this.overrideMaterialSideOrientation;\n      // Parent\n      if (this.parent) {\n        this.parent._serializeAsParent(serializationObject);\n      }\n      // Geometry\n      serializationObject.isUnIndexed = this.isUnIndexed;\n      var geometry = this._geometry;\n      if (geometry && this.subMeshes) {\n        serializationObject.geometryUniqueId = geometry.uniqueId;\n        serializationObject.geometryId = geometry.id;\n        // SubMeshes\n        serializationObject.subMeshes = [];\n        for (var subIndex = 0; subIndex < this.subMeshes.length; subIndex++) {\n          var subMesh = this.subMeshes[subIndex];\n          serializationObject.subMeshes.push({\n            materialIndex: subMesh.materialIndex,\n            verticesStart: subMesh.verticesStart,\n            verticesCount: subMesh.verticesCount,\n            indexStart: subMesh.indexStart,\n            indexCount: subMesh.indexCount\n          });\n        }\n      }\n      // Material\n      if (this.material) {\n        if (!this.material.doNotSerialize) {\n          serializationObject.materialUniqueId = this.material.uniqueId;\n          serializationObject.materialId = this.material.id; // back compat\n        }\n      } else {\n        this.material = null;\n        serializationObject.materialUniqueId = this._scene.defaultMaterial.uniqueId;\n        serializationObject.materialId = this._scene.defaultMaterial.id; // back compat\n      }\n      // Morph targets\n      if (this.morphTargetManager) {\n        serializationObject.morphTargetManagerId = this.morphTargetManager.uniqueId;\n      }\n      // Skeleton\n      if (this.skeleton) {\n        serializationObject.skeletonId = this.skeleton.id;\n        serializationObject.numBoneInfluencers = this.numBoneInfluencers;\n      }\n      // Physics\n      //TODO implement correct serialization for physics impostors.\n      if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n        var impostor = this.getPhysicsImpostor();\n        if (impostor) {\n          serializationObject.physicsMass = impostor.getParam(\"mass\");\n          serializationObject.physicsFriction = impostor.getParam(\"friction\");\n          serializationObject.physicsRestitution = impostor.getParam(\"mass\");\n          serializationObject.physicsImpostor = impostor.type;\n        }\n      }\n      // Metadata\n      if (this.metadata) {\n        serializationObject.metadata = this.metadata;\n      }\n      // Instances\n      serializationObject.instances = [];\n      for (var index = 0; index < this.instances.length; index++) {\n        var instance = this.instances[index];\n        if (instance.doNotSerialize) {\n          continue;\n        }\n        var serializationInstance = {\n          name: instance.name,\n          id: instance.id,\n          isEnabled: instance.isEnabled(false),\n          isVisible: instance.isVisible,\n          isPickable: instance.isPickable,\n          checkCollisions: instance.checkCollisions,\n          position: instance.position.asArray(),\n          scaling: instance.scaling.asArray()\n        };\n        if (instance.parent) {\n          instance.parent._serializeAsParent(serializationInstance);\n        }\n        if (instance.rotationQuaternion) {\n          serializationInstance.rotationQuaternion = instance.rotationQuaternion.asArray();\n        } else if (instance.rotation) {\n          serializationInstance.rotation = instance.rotation.asArray();\n        }\n        // Physics\n        //TODO implement correct serialization for physics impostors.\n        if (this.getScene()._getComponent(SceneComponentConstants.NAME_PHYSICSENGINE)) {\n          var _impostor = instance.getPhysicsImpostor();\n          if (_impostor) {\n            serializationInstance.physicsMass = _impostor.getParam(\"mass\");\n            serializationInstance.physicsFriction = _impostor.getParam(\"friction\");\n            serializationInstance.physicsRestitution = _impostor.getParam(\"mass\");\n            serializationInstance.physicsImpostor = _impostor.type;\n          }\n        }\n        // Metadata\n        if (instance.metadata) {\n          serializationInstance.metadata = instance.metadata;\n        }\n        serializationObject.instances.push(serializationInstance);\n        // Animations\n        SerializationHelper.AppendSerializedAnimations(instance, serializationInstance);\n        serializationInstance.ranges = instance.serializeAnimationRanges();\n      }\n      // Thin instances\n      if (this._thinInstanceDataStorage.instancesCount && this._thinInstanceDataStorage.matrixData) {\n        serializationObject.thinInstances = {\n          instancesCount: this._thinInstanceDataStorage.instancesCount,\n          matrixData: Array.from(this._thinInstanceDataStorage.matrixData),\n          matrixBufferSize: this._thinInstanceDataStorage.matrixBufferSize,\n          enablePicking: this.thinInstanceEnablePicking\n        };\n        if (this._userThinInstanceBuffersStorage) {\n          var userThinInstance = {\n            data: {},\n            sizes: {},\n            strides: {}\n          };\n          for (var kind in this._userThinInstanceBuffersStorage.data) {\n            userThinInstance.data[kind] = Array.from(this._userThinInstanceBuffersStorage.data[kind]);\n            userThinInstance.sizes[kind] = this._userThinInstanceBuffersStorage.sizes[kind];\n            userThinInstance.strides[kind] = this._userThinInstanceBuffersStorage.strides[kind];\n          }\n          serializationObject.thinInstances.userThinInstance = userThinInstance;\n        }\n      }\n      // Animations\n      SerializationHelper.AppendSerializedAnimations(this, serializationObject);\n      serializationObject.ranges = this.serializeAnimationRanges();\n      // Layer mask\n      serializationObject.layerMask = this.layerMask;\n      // Alpha\n      serializationObject.alphaIndex = this.alphaIndex;\n      serializationObject.hasVertexAlpha = this.hasVertexAlpha;\n      // Overlay\n      serializationObject.overlayAlpha = this.overlayAlpha;\n      serializationObject.overlayColor = this.overlayColor.asArray();\n      serializationObject.renderOverlay = this.renderOverlay;\n      // Fog\n      serializationObject.applyFog = this.applyFog;\n      // Action Manager\n      if (this.actionManager) {\n        serializationObject.actions = this.actionManager.serialize(this.name);\n      }\n      return serializationObject;\n    }\n    /** @internal */\n  }, {\n    key: \"_syncGeometryWithMorphTargetManager\",\n    value: function _syncGeometryWithMorphTargetManager() {\n      if (!this.geometry) {\n        return;\n      }\n      this._markSubMeshesAsAttributesDirty();\n      var morphTargetManager = this._internalAbstractMeshDataInfo._morphTargetManager;\n      if (morphTargetManager && morphTargetManager.vertexCount) {\n        if (morphTargetManager.vertexCount !== this.getTotalVertices()) {\n          Logger.Error(\"Mesh is incompatible with morph targets. Targets and mesh must all have the same vertices count.\");\n          this.morphTargetManager = null;\n          return;\n        }\n        if (morphTargetManager.isUsingTextureForTargets) {\n          return;\n        }\n        for (var index = 0; index < morphTargetManager.numInfluencers; index++) {\n          var morphTarget = morphTargetManager.getActiveTarget(index);\n          var positions = morphTarget.getPositions();\n          if (!positions) {\n            Logger.Error(\"Invalid morph target. Target must have positions.\");\n            return;\n          }\n          this.geometry.setVerticesData(VertexBuffer.PositionKind + index, positions, false, 3);\n          var normals = morphTarget.getNormals();\n          if (normals) {\n            this.geometry.setVerticesData(VertexBuffer.NormalKind + index, normals, false, 3);\n          }\n          var tangents = morphTarget.getTangents();\n          if (tangents) {\n            this.geometry.setVerticesData(VertexBuffer.TangentKind + index, tangents, false, 3);\n          }\n          var uvs = morphTarget.getUVs();\n          if (uvs) {\n            this.geometry.setVerticesData(VertexBuffer.UVKind + \"_\" + index, uvs, false, 2);\n          }\n        }\n      } else {\n        var _index2 = 0;\n        // Positions\n        while (this.geometry.isVerticesDataPresent(VertexBuffer.PositionKind + _index2)) {\n          this.geometry.removeVerticesData(VertexBuffer.PositionKind + _index2);\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.NormalKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.NormalKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.TangentKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.TangentKind + _index2);\n          }\n          if (this.geometry.isVerticesDataPresent(VertexBuffer.UVKind + _index2)) {\n            this.geometry.removeVerticesData(VertexBuffer.UVKind + \"_\" + _index2);\n          }\n          _index2++;\n        }\n      }\n    }\n    /**\n     * Returns a new Mesh object parsed from the source provided.\n     * @param parsedMesh is the source\n     * @param scene defines the hosting scene\n     * @param rootUrl is the root URL to prefix the `delayLoadingFile` property with\n     * @returns a new Mesh\n     */\n  }, {\n    key: \"setPositionsForCPUSkinning\",\n    value:\n    // Skeletons\n    /**\n     * Prepare internal position array for software CPU skinning\n     * @returns original positions used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh\n     */\n    function setPositionsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var source = this.getVerticesData(VertexBuffer.PositionKind);\n        if (!source) {\n          return internalDataInfo._sourcePositions;\n        }\n        internalDataInfo._sourcePositions = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.PositionKind)) {\n          this.setVerticesData(VertexBuffer.PositionKind, source, true);\n        }\n      }\n      return internalDataInfo._sourcePositions;\n    }\n    /**\n     * Prepare internal normal array for software CPU skinning\n     * @returns original normals used for CPU skinning. Useful for integrating Morphing with skeletons in same mesh.\n     */\n  }, {\n    key: \"setNormalsForCPUSkinning\",\n    value: function setNormalsForCPUSkinning() {\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourceNormals) {\n        var source = this.getVerticesData(VertexBuffer.NormalKind);\n        if (!source) {\n          return internalDataInfo._sourceNormals;\n        }\n        internalDataInfo._sourceNormals = new Float32Array(source);\n        if (!this.isVertexBufferUpdatable(VertexBuffer.NormalKind)) {\n          this.setVerticesData(VertexBuffer.NormalKind, source, true);\n        }\n      }\n      return internalDataInfo._sourceNormals;\n    }\n    /**\n     * Updates the vertex buffer by applying transformation from the bones\n     * @param skeleton defines the skeleton to apply to current mesh\n     * @returns the current mesh\n     */\n  }, {\n    key: \"applySkeleton\",\n    value: function applySkeleton(skeleton) {\n      if (!this.geometry) {\n        return this;\n      }\n      if (this.geometry._softwareSkinningFrameId == this.getScene().getFrameId()) {\n        return this;\n      }\n      this.geometry._softwareSkinningFrameId = this.getScene().getFrameId();\n      if (!this.isVerticesDataPresent(VertexBuffer.PositionKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesIndicesKind)) {\n        return this;\n      }\n      if (!this.isVerticesDataPresent(VertexBuffer.MatricesWeightsKind)) {\n        return this;\n      }\n      var hasNormals = this.isVerticesDataPresent(VertexBuffer.NormalKind);\n      var internalDataInfo = this._internalMeshDataInfo;\n      if (!internalDataInfo._sourcePositions) {\n        var submeshes = this.subMeshes.slice();\n        this.setPositionsForCPUSkinning();\n        this.subMeshes = submeshes;\n      }\n      if (hasNormals && !internalDataInfo._sourceNormals) {\n        this.setNormalsForCPUSkinning();\n      }\n      // positionsData checks for not being Float32Array will only pass at most once\n      var positionsData = this.getVerticesData(VertexBuffer.PositionKind);\n      if (!positionsData) {\n        return this;\n      }\n      if (!(positionsData instanceof Float32Array)) {\n        positionsData = new Float32Array(positionsData);\n      }\n      // normalsData checks for not being Float32Array will only pass at most once\n      var normalsData = this.getVerticesData(VertexBuffer.NormalKind);\n      if (hasNormals) {\n        if (!normalsData) {\n          return this;\n        }\n        if (!(normalsData instanceof Float32Array)) {\n          normalsData = new Float32Array(normalsData);\n        }\n      }\n      var matricesIndicesData = this.getVerticesData(VertexBuffer.MatricesIndicesKind);\n      var matricesWeightsData = this.getVerticesData(VertexBuffer.MatricesWeightsKind);\n      if (!matricesWeightsData || !matricesIndicesData) {\n        return this;\n      }\n      var needExtras = this.numBoneInfluencers > 4;\n      var matricesIndicesExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesIndicesExtraKind) : null;\n      var matricesWeightsExtraData = needExtras ? this.getVerticesData(VertexBuffer.MatricesWeightsExtraKind) : null;\n      var skeletonMatrices = skeleton.getTransformMatrices(this);\n      var tempVector3 = Vector3.Zero();\n      var finalMatrix = new Matrix();\n      var tempMatrix = new Matrix();\n      var matWeightIdx = 0;\n      var inf;\n      for (var index = 0; index < positionsData.length; index += 3, matWeightIdx += 4) {\n        var weight = void 0;\n        for (inf = 0; inf < 4; inf++) {\n          weight = matricesWeightsData[matWeightIdx + inf];\n          if (weight > 0) {\n            Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesData[matWeightIdx + inf] * 16), weight, tempMatrix);\n            finalMatrix.addToSelf(tempMatrix);\n          }\n        }\n        if (needExtras) {\n          for (inf = 0; inf < 4; inf++) {\n            weight = matricesWeightsExtraData[matWeightIdx + inf];\n            if (weight > 0) {\n              Matrix.FromFloat32ArrayToRefScaled(skeletonMatrices, Math.floor(matricesIndicesExtraData[matWeightIdx + inf] * 16), weight, tempMatrix);\n              finalMatrix.addToSelf(tempMatrix);\n            }\n          }\n        }\n        Vector3.TransformCoordinatesFromFloatsToRef(internalDataInfo._sourcePositions[index], internalDataInfo._sourcePositions[index + 1], internalDataInfo._sourcePositions[index + 2], finalMatrix, tempVector3);\n        tempVector3.toArray(positionsData, index);\n        if (hasNormals) {\n          Vector3.TransformNormalFromFloatsToRef(internalDataInfo._sourceNormals[index], internalDataInfo._sourceNormals[index + 1], internalDataInfo._sourceNormals[index + 2], finalMatrix, tempVector3);\n          tempVector3.toArray(normalsData, index);\n        }\n        finalMatrix.reset();\n      }\n      this.updateVerticesData(VertexBuffer.PositionKind, positionsData);\n      if (hasNormals) {\n        this.updateVerticesData(VertexBuffer.NormalKind, normalsData);\n      }\n      return this;\n    }\n    // Tools\n    /**\n     * Returns an object containing a min and max Vector3 which are the minimum and maximum vectors of each mesh bounding box from the passed array, in the world coordinates\n     * @param meshes defines the list of meshes to scan\n     * @returns an object `{min:` Vector3`, max:` Vector3`}`\n     */\n  }, {\n    key: \"addInstance\",\n    value:\n    /**\n     * @internal\n     */\n    function addInstance(instance) {\n      instance._indexInSourceMeshInstanceArray = this.instances.length;\n      this.instances.push(instance);\n    }\n    /**\n     * @internal\n     */\n  }, {\n    key: \"removeInstance\",\n    value: function removeInstance(instance) {\n      // Remove from mesh\n      var index = instance._indexInSourceMeshInstanceArray;\n      if (index != -1) {\n        if (index !== this.instances.length - 1) {\n          var last = this.instances[this.instances.length - 1];\n          this.instances[index] = last;\n          last._indexInSourceMeshInstanceArray = index;\n        }\n        instance._indexInSourceMeshInstanceArray = -1;\n        this.instances.pop();\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_shouldConvertRHS\",\n    value: function _shouldConvertRHS() {\n      return this.overrideMaterialSideOrientation === Material.CounterClockWiseSideOrientation;\n    }\n  }], [{\n    key: \"_GetDefaultSideOrientation\",\n    value: function _GetDefaultSideOrientation(orientation) {\n      return orientation || Mesh.FRONTSIDE; // works as Mesh.FRONTSIDE is 0\n    }\n  }, {\n    key: \"_instancedMeshFactory\",\n    value: function _instancedMeshFactory(name, mesh) {\n      throw _WarnImport(\"InstancedMesh\");\n    }\n    /**\n     * @internal\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  }, {\n    key: \"_PhysicsImpostorParser\",\n    value: function _PhysicsImpostorParser(scene, physicObject, jsonObject) {\n      throw _WarnImport(\"PhysicsImpostor\");\n    }\n  }, {\n    key: \"Parse\",\n    value: function Parse(parsedMesh, scene, rootUrl) {\n      var mesh;\n      if (parsedMesh.type && parsedMesh.type === \"LinesMesh\") {\n        mesh = Mesh._LinesMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GroundMesh\") {\n        mesh = Mesh._GroundMeshParser(parsedMesh, scene);\n      } else if (parsedMesh.type && parsedMesh.type === \"GoldbergMesh\") {\n        mesh = Mesh._GoldbergMeshParser(parsedMesh, scene);\n      } else {\n        mesh = new Mesh(parsedMesh.name, scene);\n      }\n      mesh.id = parsedMesh.id;\n      mesh._waitingParsedUniqueId = parsedMesh.uniqueId;\n      if (Tags) {\n        Tags.AddTagsTo(mesh, parsedMesh.tags);\n      }\n      mesh.position = Vector3.FromArray(parsedMesh.position);\n      if (parsedMesh.metadata !== undefined) {\n        mesh.metadata = parsedMesh.metadata;\n      }\n      if (parsedMesh.rotationQuaternion) {\n        mesh.rotationQuaternion = Quaternion.FromArray(parsedMesh.rotationQuaternion);\n      } else if (parsedMesh.rotation) {\n        mesh.rotation = Vector3.FromArray(parsedMesh.rotation);\n      }\n      mesh.scaling = Vector3.FromArray(parsedMesh.scaling);\n      if (parsedMesh.localMatrix) {\n        mesh.setPreTransformMatrix(Matrix.FromArray(parsedMesh.localMatrix));\n      } else if (parsedMesh.pivotMatrix) {\n        mesh.setPivotMatrix(Matrix.FromArray(parsedMesh.pivotMatrix));\n      }\n      mesh.setEnabled(parsedMesh.isEnabled);\n      mesh.isVisible = parsedMesh.isVisible;\n      mesh.infiniteDistance = parsedMesh.infiniteDistance;\n      mesh.showBoundingBox = parsedMesh.showBoundingBox;\n      mesh.showSubMeshesBoundingBox = parsedMesh.showSubMeshesBoundingBox;\n      if (parsedMesh.applyFog !== undefined) {\n        mesh.applyFog = parsedMesh.applyFog;\n      }\n      if (parsedMesh.pickable !== undefined) {\n        mesh.isPickable = parsedMesh.pickable;\n      }\n      if (parsedMesh.alphaIndex !== undefined) {\n        mesh.alphaIndex = parsedMesh.alphaIndex;\n      }\n      mesh.receiveShadows = parsedMesh.receiveShadows;\n      mesh.billboardMode = parsedMesh.billboardMode;\n      if (parsedMesh.visibility !== undefined) {\n        mesh.visibility = parsedMesh.visibility;\n      }\n      mesh.checkCollisions = parsedMesh.checkCollisions;\n      mesh.overrideMaterialSideOrientation = parsedMesh.overrideMaterialSideOrientation;\n      if (parsedMesh.isBlocker !== undefined) {\n        mesh.isBlocker = parsedMesh.isBlocker;\n      }\n      mesh._shouldGenerateFlatShading = parsedMesh.useFlatShading;\n      // freezeWorldMatrix\n      if (parsedMesh.freezeWorldMatrix) {\n        mesh._waitingData.freezeWorldMatrix = parsedMesh.freezeWorldMatrix;\n      }\n      // Parent\n      if (parsedMesh.parentId !== undefined) {\n        mesh._waitingParentId = parsedMesh.parentId;\n      }\n      if (parsedMesh.parentInstanceIndex !== undefined) {\n        mesh._waitingParentInstanceIndex = parsedMesh.parentInstanceIndex;\n      }\n      // Actions\n      if (parsedMesh.actions !== undefined) {\n        mesh._waitingData.actions = parsedMesh.actions;\n      }\n      // Overlay\n      if (parsedMesh.overlayAlpha !== undefined) {\n        mesh.overlayAlpha = parsedMesh.overlayAlpha;\n      }\n      if (parsedMesh.overlayColor !== undefined) {\n        mesh.overlayColor = Color3.FromArray(parsedMesh.overlayColor);\n      }\n      if (parsedMesh.renderOverlay !== undefined) {\n        mesh.renderOverlay = parsedMesh.renderOverlay;\n      }\n      // Geometry\n      mesh.isUnIndexed = !!parsedMesh.isUnIndexed;\n      mesh.hasVertexAlpha = parsedMesh.hasVertexAlpha;\n      if (parsedMesh.delayLoadingFile) {\n        mesh.delayLoadState = 4;\n        mesh.delayLoadingFile = rootUrl + parsedMesh.delayLoadingFile;\n        mesh.buildBoundingInfo(Vector3.FromArray(parsedMesh.boundingBoxMinimum), Vector3.FromArray(parsedMesh.boundingBoxMaximum));\n        if (parsedMesh._binaryInfo) {\n          mesh._binaryInfo = parsedMesh._binaryInfo;\n        }\n        mesh._delayInfo = [];\n        if (parsedMesh.hasUVs) {\n          mesh._delayInfo.push(VertexBuffer.UVKind);\n        }\n        if (parsedMesh.hasUVs2) {\n          mesh._delayInfo.push(VertexBuffer.UV2Kind);\n        }\n        if (parsedMesh.hasUVs3) {\n          mesh._delayInfo.push(VertexBuffer.UV3Kind);\n        }\n        if (parsedMesh.hasUVs4) {\n          mesh._delayInfo.push(VertexBuffer.UV4Kind);\n        }\n        if (parsedMesh.hasUVs5) {\n          mesh._delayInfo.push(VertexBuffer.UV5Kind);\n        }\n        if (parsedMesh.hasUVs6) {\n          mesh._delayInfo.push(VertexBuffer.UV6Kind);\n        }\n        if (parsedMesh.hasColors) {\n          mesh._delayInfo.push(VertexBuffer.ColorKind);\n        }\n        if (parsedMesh.hasMatricesIndices) {\n          mesh._delayInfo.push(VertexBuffer.MatricesIndicesKind);\n        }\n        if (parsedMesh.hasMatricesWeights) {\n          mesh._delayInfo.push(VertexBuffer.MatricesWeightsKind);\n        }\n        mesh._delayLoadingFunction = Geometry._ImportGeometry;\n        if (SceneLoaderFlags.ForceFullSceneLoadingForIncremental) {\n          mesh._checkDelayState();\n        }\n      } else {\n        Geometry._ImportGeometry(parsedMesh, mesh);\n      }\n      // Material\n      if (parsedMesh.materialUniqueId) {\n        mesh._waitingMaterialId = parsedMesh.materialUniqueId;\n      } else if (parsedMesh.materialId) {\n        mesh._waitingMaterialId = parsedMesh.materialId;\n      }\n      // Morph targets\n      if (parsedMesh.morphTargetManagerId > -1) {\n        mesh.morphTargetManager = scene.getMorphTargetManagerById(parsedMesh.morphTargetManagerId);\n      }\n      // Skeleton\n      if (parsedMesh.skeletonId !== undefined && parsedMesh.skeletonId !== null) {\n        mesh.skeleton = scene.getLastSkeletonById(parsedMesh.skeletonId);\n        if (parsedMesh.numBoneInfluencers) {\n          mesh.numBoneInfluencers = parsedMesh.numBoneInfluencers;\n        }\n      }\n      // Animations\n      if (parsedMesh.animations) {\n        for (var animationIndex = 0; animationIndex < parsedMesh.animations.length; animationIndex++) {\n          var parsedAnimation = parsedMesh.animations[animationIndex];\n          var internalClass = GetClass(\"BABYLON.Animation\");\n          if (internalClass) {\n            mesh.animations.push(internalClass.Parse(parsedAnimation));\n          }\n        }\n        Node.ParseAnimationRanges(mesh, parsedMesh, scene);\n      }\n      if (parsedMesh.autoAnimate) {\n        scene.beginAnimation(mesh, parsedMesh.autoAnimateFrom, parsedMesh.autoAnimateTo, parsedMesh.autoAnimateLoop, parsedMesh.autoAnimateSpeed || 1.0);\n      }\n      // Layer Mask\n      if (parsedMesh.layerMask && !isNaN(parsedMesh.layerMask)) {\n        mesh.layerMask = Math.abs(parseInt(parsedMesh.layerMask));\n      } else {\n        mesh.layerMask = 0x0fffffff;\n      }\n      // Physics\n      if (parsedMesh.physicsImpostor) {\n        Mesh._PhysicsImpostorParser(scene, mesh, parsedMesh);\n      }\n      // Levels\n      if (parsedMesh.lodMeshIds) {\n        mesh._waitingData.lods = {\n          ids: parsedMesh.lodMeshIds,\n          distances: parsedMesh.lodDistances ? parsedMesh.lodDistances : null,\n          coverages: parsedMesh.lodCoverages ? parsedMesh.lodCoverages : null\n        };\n      }\n      // Instances\n      if (parsedMesh.instances) {\n        for (var index = 0; index < parsedMesh.instances.length; index++) {\n          var parsedInstance = parsedMesh.instances[index];\n          var instance = mesh.createInstance(parsedInstance.name);\n          if (parsedInstance.id) {\n            instance.id = parsedInstance.id;\n          }\n          if (Tags) {\n            if (parsedInstance.tags) {\n              Tags.AddTagsTo(instance, parsedInstance.tags);\n            } else {\n              Tags.AddTagsTo(instance, parsedMesh.tags);\n            }\n          }\n          instance.position = Vector3.FromArray(parsedInstance.position);\n          if (parsedInstance.metadata !== undefined) {\n            instance.metadata = parsedInstance.metadata;\n          }\n          if (parsedInstance.parentId !== undefined) {\n            instance._waitingParentId = parsedInstance.parentId;\n          }\n          if (parsedInstance.parentInstanceIndex !== undefined) {\n            instance._waitingParentInstanceIndex = parsedInstance.parentInstanceIndex;\n          }\n          if (parsedInstance.isEnabled !== undefined && parsedInstance.isEnabled !== null) {\n            instance.setEnabled(parsedInstance.isEnabled);\n          }\n          if (parsedInstance.isVisible !== undefined && parsedInstance.isVisible !== null) {\n            instance.isVisible = parsedInstance.isVisible;\n          }\n          if (parsedInstance.isPickable !== undefined && parsedInstance.isPickable !== null) {\n            instance.isPickable = parsedInstance.isPickable;\n          }\n          if (parsedInstance.rotationQuaternion) {\n            instance.rotationQuaternion = Quaternion.FromArray(parsedInstance.rotationQuaternion);\n          } else if (parsedInstance.rotation) {\n            instance.rotation = Vector3.FromArray(parsedInstance.rotation);\n          }\n          instance.scaling = Vector3.FromArray(parsedInstance.scaling);\n          if (parsedInstance.checkCollisions != undefined && parsedInstance.checkCollisions != null) {\n            instance.checkCollisions = parsedInstance.checkCollisions;\n          }\n          if (parsedInstance.pickable != undefined && parsedInstance.pickable != null) {\n            instance.isPickable = parsedInstance.pickable;\n          }\n          if (parsedInstance.showBoundingBox != undefined && parsedInstance.showBoundingBox != null) {\n            instance.showBoundingBox = parsedInstance.showBoundingBox;\n          }\n          if (parsedInstance.showSubMeshesBoundingBox != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.showSubMeshesBoundingBox = parsedInstance.showSubMeshesBoundingBox;\n          }\n          if (parsedInstance.alphaIndex != undefined && parsedInstance.showSubMeshesBoundingBox != null) {\n            instance.alphaIndex = parsedInstance.alphaIndex;\n          }\n          // Physics\n          if (parsedInstance.physicsImpostor) {\n            Mesh._PhysicsImpostorParser(scene, instance, parsedInstance);\n          }\n          // Animation\n          if (parsedInstance.animations) {\n            for (var _animationIndex = 0; _animationIndex < parsedInstance.animations.length; _animationIndex++) {\n              var _parsedAnimation = parsedInstance.animations[_animationIndex];\n              var _internalClass = GetClass(\"BABYLON.Animation\");\n              if (_internalClass) {\n                instance.animations.push(_internalClass.Parse(_parsedAnimation));\n              }\n            }\n            Node.ParseAnimationRanges(instance, parsedInstance, scene);\n            if (parsedInstance.autoAnimate) {\n              scene.beginAnimation(instance, parsedInstance.autoAnimateFrom, parsedInstance.autoAnimateTo, parsedInstance.autoAnimateLoop, parsedInstance.autoAnimateSpeed || 1.0);\n            }\n          }\n        }\n      }\n      // Thin instances\n      if (parsedMesh.thinInstances) {\n        var thinInstances = parsedMesh.thinInstances;\n        mesh.thinInstanceEnablePicking = !!thinInstances.enablePicking;\n        if (thinInstances.matrixData) {\n          mesh.thinInstanceSetBuffer(\"matrix\", new Float32Array(thinInstances.matrixData), 16, false);\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n          mesh._thinInstanceDataStorage.instancesCount = thinInstances.instancesCount;\n        } else {\n          mesh._thinInstanceDataStorage.matrixBufferSize = thinInstances.matrixBufferSize;\n        }\n        if (parsedMesh.thinInstances.userThinInstance) {\n          var userThinInstance = parsedMesh.thinInstances.userThinInstance;\n          for (var kind in userThinInstance.data) {\n            mesh.thinInstanceSetBuffer(kind, new Float32Array(userThinInstance.data[kind]), userThinInstance.strides[kind], false);\n            mesh._userThinInstanceBuffersStorage.sizes[kind] = userThinInstance.sizes[kind];\n          }\n        }\n      }\n      return mesh;\n    }\n  }, {\n    key: \"MinMax\",\n    value: function MinMax(meshes) {\n      var minVector = null;\n      var maxVector = null;\n      meshes.forEach(function (mesh) {\n        var boundingInfo = mesh.getBoundingInfo();\n        var boundingBox = boundingInfo.boundingBox;\n        if (!minVector || !maxVector) {\n          minVector = boundingBox.minimumWorld;\n          maxVector = boundingBox.maximumWorld;\n        } else {\n          minVector.minimizeInPlace(boundingBox.minimumWorld);\n          maxVector.maximizeInPlace(boundingBox.maximumWorld);\n        }\n      });\n      if (!minVector || !maxVector) {\n        return {\n          min: Vector3.Zero(),\n          max: Vector3.Zero()\n        };\n      }\n      return {\n        min: minVector,\n        max: maxVector\n      };\n    }\n    /**\n     * Returns the center of the `{min:` Vector3`, max:` Vector3`}` or the center of MinMax vector3 computed from a mesh array\n     * @param meshesOrMinMaxVector could be an array of meshes or a `{min:` Vector3`, max:` Vector3`}` object\n     * @returns a vector3\n     */\n  }, {\n    key: \"Center\",\n    value: function Center(meshesOrMinMaxVector) {\n      var minMaxVector = meshesOrMinMaxVector instanceof Array ? Mesh.MinMax(meshesOrMinMaxVector) : meshesOrMinMaxVector;\n      return Vector3.Center(minMaxVector.min, minMaxVector.max);\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshes\",\n    value: function MergeMeshes(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineSync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, false));\n    }\n    /**\n     * Merge the array of meshes into a single mesh for performance reasons.\n     * @param meshes array of meshes with the vertices to merge. Entries cannot be empty meshes.\n     * @param disposeSource when true (default), dispose of the vertices from the source meshes.\n     * @param allow32BitsIndices when the sum of the vertices > 64k, this must be set to true.\n     * @param meshSubclass (optional) can be set to a Mesh where the merged vertices will be inserted.\n     * @param subdivideWithSubMeshes when true (false default), subdivide mesh into subMeshes.\n     * @param multiMultiMaterials when true (false default), subdivide mesh into subMeshes with multiple materials, ignores subdivideWithSubMeshes.\n     * @returns a new mesh\n     */\n  }, {\n    key: \"MergeMeshesAsync\",\n    value: function MergeMeshesAsync(meshes) {\n      var disposeSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var allow32BitsIndices = arguments.length > 2 ? arguments[2] : undefined;\n      var meshSubclass = arguments.length > 3 ? arguments[3] : undefined;\n      var subdivideWithSubMeshes = arguments.length > 4 ? arguments[4] : undefined;\n      var multiMultiMaterials = arguments.length > 5 ? arguments[5] : undefined;\n      return runCoroutineAsync(Mesh._MergeMeshesCoroutine(meshes, disposeSource, allow32BitsIndices, meshSubclass, subdivideWithSubMeshes, multiMultiMaterials, true), createYieldingScheduler());\n    }\n  }, {\n    key: \"_MergeMeshesCoroutine\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function _MergeMeshesCoroutine(meshes) {\n      var disposeSource,\n        allow32BitsIndices,\n        meshSubclass,\n        subdivideWithSubMeshes,\n        multiMultiMaterials,\n        isAsync,\n        index,\n        totalVertices,\n        materialArray,\n        materialIndexArray,\n        indiceArray,\n        currentOverrideMaterialSideOrientation,\n        mesh,\n        material,\n        matIndex,\n        subIndex,\n        _subIndex,\n        _subIndex2,\n        source,\n        getVertexDataFromMesh,\n        _getVertexDataFromMes,\n        _getVertexDataFromMes2,\n        sourceVertexData,\n        sourceTransform,\n        meshVertexDatas,\n        i,\n        mergeCoroutine,\n        mergeCoroutineStep,\n        vertexData,\n        applyToCoroutine,\n        applyToCoroutineStep,\n        offset,\n        _iterator11,\n        _step12,\n        subMesh,\n        newMultiMaterial,\n        _args = arguments;\n      return _regeneratorRuntime.wrap(function _MergeMeshesCoroutine$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              disposeSource = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n              allow32BitsIndices = _args.length > 2 ? _args[2] : undefined;\n              meshSubclass = _args.length > 3 ? _args[3] : undefined;\n              subdivideWithSubMeshes = _args.length > 4 ? _args[4] : undefined;\n              multiMultiMaterials = _args.length > 5 ? _args[5] : undefined;\n              isAsync = _args.length > 6 ? _args[6] : undefined;\n              // Remove any null/undefined entries from the mesh array\n              meshes = meshes.filter(Boolean);\n              if (!(meshes.length === 0)) {\n                _context.next = 9;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 9:\n              if (allow32BitsIndices) {\n                _context.next = 20;\n                break;\n              }\n              totalVertices = 0; // Counting vertices\n              index = 0;\n            case 12:\n              if (!(index < meshes.length)) {\n                _context.next = 20;\n                break;\n              }\n              totalVertices += meshes[index].getTotalVertices();\n              if (!(totalVertices >= 65536)) {\n                _context.next = 17;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes because resulting mesh will have more than 65536 vertices. Please use allow32BitsIndices = true to use 32 bits indices\");\n              return _context.abrupt(\"return\", null);\n            case 17:\n              index++;\n              _context.next = 12;\n              break;\n            case 20:\n              if (multiMultiMaterials) {\n                subdivideWithSubMeshes = false;\n              }\n              materialArray = new Array();\n              materialIndexArray = new Array(); // Merge\n              indiceArray = new Array();\n              currentOverrideMaterialSideOrientation = meshes[0].overrideMaterialSideOrientation;\n              index = 0;\n            case 26:\n              if (!(index < meshes.length)) {\n                _context.next = 39;\n                break;\n              }\n              mesh = meshes[index];\n              if (!mesh.isAnInstance) {\n                _context.next = 31;\n                break;\n              }\n              Logger.Warn(\"Cannot merge instance meshes.\");\n              return _context.abrupt(\"return\", null);\n            case 31:\n              if (!(currentOverrideMaterialSideOrientation !== mesh.overrideMaterialSideOrientation)) {\n                _context.next = 34;\n                break;\n              }\n              Logger.Warn(\"Cannot merge meshes with different overrideMaterialSideOrientation values.\");\n              return _context.abrupt(\"return\", null);\n            case 34:\n              if (subdivideWithSubMeshes) {\n                indiceArray.push(mesh.getTotalIndices());\n              }\n              if (multiMultiMaterials) {\n                if (mesh.material) {\n                  material = mesh.material;\n                  if (material instanceof MultiMaterial) {\n                    for (matIndex = 0; matIndex < material.subMaterials.length; matIndex++) {\n                      if (materialArray.indexOf(material.subMaterials[matIndex]) < 0) {\n                        materialArray.push(material.subMaterials[matIndex]);\n                      }\n                    }\n                    for (subIndex = 0; subIndex < mesh.subMeshes.length; subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material.subMaterials[mesh.subMeshes[subIndex].materialIndex]));\n                      indiceArray.push(mesh.subMeshes[subIndex].indexCount);\n                    }\n                  } else {\n                    if (materialArray.indexOf(material) < 0) {\n                      materialArray.push(material);\n                    }\n                    for (_subIndex = 0; _subIndex < mesh.subMeshes.length; _subIndex++) {\n                      materialIndexArray.push(materialArray.indexOf(material));\n                      indiceArray.push(mesh.subMeshes[_subIndex].indexCount);\n                    }\n                  }\n                } else {\n                  for (_subIndex2 = 0; _subIndex2 < mesh.subMeshes.length; _subIndex2++) {\n                    materialIndexArray.push(0);\n                    indiceArray.push(mesh.subMeshes[_subIndex2].indexCount);\n                  }\n                }\n              }\n            case 36:\n              index++;\n              _context.next = 26;\n              break;\n            case 39:\n              source = meshes[0];\n              getVertexDataFromMesh = function getVertexDataFromMesh(mesh) {\n                var wm = mesh.computeWorldMatrix(true);\n                var vertexData = VertexData.ExtractFromMesh(mesh, false, false);\n                return [vertexData, wm];\n              };\n              _getVertexDataFromMes = getVertexDataFromMesh(source), _getVertexDataFromMes2 = _slicedToArray(_getVertexDataFromMes, 2), sourceVertexData = _getVertexDataFromMes2[0], sourceTransform = _getVertexDataFromMes2[1];\n              if (!isAsync) {\n                _context.next = 45;\n                break;\n              }\n              _context.next = 45;\n              return;\n            case 45:\n              meshVertexDatas = new Array(meshes.length - 1);\n              i = 1;\n            case 47:\n              if (!(i < meshes.length)) {\n                _context.next = 55;\n                break;\n              }\n              meshVertexDatas[i - 1] = getVertexDataFromMesh(meshes[i]);\n              if (!isAsync) {\n                _context.next = 52;\n                break;\n              }\n              _context.next = 52;\n              return;\n            case 52:\n              i++;\n              _context.next = 47;\n              break;\n            case 55:\n              mergeCoroutine = sourceVertexData._mergeCoroutine(sourceTransform, meshVertexDatas, allow32BitsIndices, isAsync, !disposeSource);\n              mergeCoroutineStep = mergeCoroutine.next();\n            case 57:\n              if (mergeCoroutineStep.done) {\n                _context.next = 64;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 61;\n                break;\n              }\n              _context.next = 61;\n              return;\n            case 61:\n              mergeCoroutineStep = mergeCoroutine.next();\n              _context.next = 57;\n              break;\n            case 64:\n              vertexData = mergeCoroutineStep.value;\n              if (!meshSubclass) {\n                meshSubclass = new Mesh(source.name + \"_merged\", source.getScene());\n              }\n              applyToCoroutine = vertexData._applyToCoroutine(meshSubclass, undefined, isAsync);\n              applyToCoroutineStep = applyToCoroutine.next();\n            case 68:\n              if (applyToCoroutineStep.done) {\n                _context.next = 75;\n                break;\n              }\n              if (!isAsync) {\n                _context.next = 72;\n                break;\n              }\n              _context.next = 72;\n              return;\n            case 72:\n              applyToCoroutineStep = applyToCoroutine.next();\n              _context.next = 68;\n              break;\n            case 75:\n              // Setting properties\n              meshSubclass.checkCollisions = source.checkCollisions;\n              meshSubclass.overrideMaterialSideOrientation = source.overrideMaterialSideOrientation;\n              // Cleaning\n              if (disposeSource) {\n                for (index = 0; index < meshes.length; index++) {\n                  meshes[index].dispose();\n                }\n              }\n              // Subdivide\n              if (subdivideWithSubMeshes || multiMultiMaterials) {\n                //-- removal of global submesh\n                meshSubclass.releaseSubMeshes();\n                index = 0;\n                offset = 0; //-- apply subdivision according to index table\n                while (index < indiceArray.length) {\n                  SubMesh.CreateFromIndices(0, offset, indiceArray[index], meshSubclass, undefined, false);\n                  offset += indiceArray[index];\n                  index++;\n                }\n                _iterator11 = _createForOfIteratorHelper(meshSubclass.subMeshes);\n                try {\n                  for (_iterator11.s(); !(_step12 = _iterator11.n()).done;) {\n                    subMesh = _step12.value;\n                    subMesh.refreshBoundingInfo();\n                  }\n                } catch (err) {\n                  _iterator11.e(err);\n                } finally {\n                  _iterator11.f();\n                }\n                meshSubclass.computeWorldMatrix(true);\n              }\n              if (multiMultiMaterials) {\n                newMultiMaterial = new MultiMaterial(source.name + \"_merged\", source.getScene());\n                newMultiMaterial.subMaterials = materialArray;\n                for (subIndex = 0; subIndex < meshSubclass.subMeshes.length; subIndex++) {\n                  meshSubclass.subMeshes[subIndex].materialIndex = materialIndexArray[subIndex];\n                }\n                meshSubclass.material = newMultiMaterial;\n              } else {\n                meshSubclass.material = source.material;\n              }\n              return _context.abrupt(\"return\", meshSubclass);\n            case 81:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _MergeMeshesCoroutine);\n    })\n  }]);\n  return Mesh;\n}(AbstractMesh);\n// Consts\n/**\n * Mesh side orientation : usually the external or front surface\n */\nMesh.FRONTSIDE = VertexData.FRONTSIDE;\n/**\n * Mesh side orientation : usually the internal or back surface\n */\nMesh.BACKSIDE = VertexData.BACKSIDE;\n/**\n * Mesh side orientation : both internal and external or front and back surfaces\n */\nMesh.DOUBLESIDE = VertexData.DOUBLESIDE;\n/**\n * Mesh side orientation : by default, `FRONTSIDE`\n */\nMesh.DEFAULTSIDE = VertexData.DEFAULTSIDE;\n/**\n * Mesh cap setting : no cap\n */\nMesh.NO_CAP = 0;\n/**\n * Mesh cap setting : one cap at the beginning of the mesh\n */\nMesh.CAP_START = 1;\n/**\n * Mesh cap setting : one cap at the end of the mesh\n */\nMesh.CAP_END = 2;\n/**\n * Mesh cap setting : two caps, one at the beginning  and one at the end of the mesh\n */\nMesh.CAP_ALL = 3;\n/**\n * Mesh pattern setting : no flip or rotate\n */\nMesh.NO_FLIP = 0;\n/**\n * Mesh pattern setting : flip (reflect in y axis) alternate tiles on each row or column\n */\nMesh.FLIP_TILE = 1;\n/**\n * Mesh pattern setting : rotate (180degs) alternate tiles on each row or column\n */\nMesh.ROTATE_TILE = 2;\n/**\n * Mesh pattern setting : flip (reflect in y axis) all tiles on alternate rows\n */\nMesh.FLIP_ROW = 3;\n/**\n * Mesh pattern setting : rotate (180degs) all tiles on alternate rows\n */\nMesh.ROTATE_ROW = 4;\n/**\n * Mesh pattern setting : flip and rotate alternate tiles on each row or column\n */\nMesh.FLIP_N_ROTATE_TILE = 5;\n/**\n * Mesh pattern setting : rotate pattern and rotate\n */\nMesh.FLIP_N_ROTATE_ROW = 6;\n/**\n * Mesh tile positioning : part tiles same on left/right or top/bottom\n */\nMesh.CENTER = 0;\n/**\n * Mesh tile positioning : part tiles on left\n */\nMesh.LEFT = 1;\n/**\n * Mesh tile positioning : part tiles on right\n */\nMesh.RIGHT = 2;\n/**\n * Mesh tile positioning : part tiles on top\n */\nMesh.TOP = 3;\n/**\n * Mesh tile positioning : part tiles on bottom\n */\nMesh.BOTTOM = 4;\n/**\n * Indicates that the instanced meshes should be sorted from back to front before rendering if their material is transparent\n */\nMesh.INSTANCEDMESH_SORT_TRANSPARENT = false;\n// Statics\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GroundMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GroundMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._GoldbergMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"GoldbergMesh\");\n};\n/**\n * @internal\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nMesh._LinesMeshParser = function (parsedMesh, scene) {\n  throw _WarnImport(\"LinesMesh\");\n};\nRegisterClass(\"BABYLON.Mesh\", Mesh);\n/**\n * @internal\n */\nMesh.prototype.setMaterialByID = function (id) {\n  return this.setMaterialById(id);\n};\nMesh.CreateDisc = Mesh.CreateDisc || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateBox = Mesh.CreateBox || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateSphere = Mesh.CreateSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCylinder = Mesh.CreateCylinder || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorusKnot = Mesh.CreateTorusKnot || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTorus = Mesh.CreateTorus || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePlane = Mesh.CreatePlane || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGround = Mesh.CreateGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTiledGround = Mesh.CreateTiledGround || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateGroundFromHeightMap = Mesh.CreateGroundFromHeightMap || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateTube = Mesh.CreateTube || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreatePolyhedron = Mesh.CreatePolyhedron || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateIcoSphere = Mesh.CreateIcoSphere || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateDecal = Mesh.CreateDecal || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.CreateCapsule = Mesh.CreateCapsule || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};\nMesh.ExtendToGoldberg = Mesh.ExtendToGoldberg || function () {\n  throw new Error(\"Import MeshBuilder to populate this function\");\n};"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","from","test","_unsupportedIterableToArray","length","i","F","s","done","value","e","_e2","f","TypeError","err","normalCompletion","didErr","step","next","_e3","return","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","valueOf","_isNativeReflectConstruct","result","Super","NewTarget","this","arguments","apply","_CreationDataStorage","_InstanceDataStorage","visibleInstances","batchCache","_InstancesBatch","batchCacheReplacementModeInFrozenMode","instancesBufferSize","mustReturn","renderSelf","hardwareInstancedRendering","_ThinInstanceDataStorage","instancesCount","matrixBuffer","previousMatrixBuffer","matrixBufferSize","matrixData","boundingVectors","worldMatrices","_InternalMeshDataInfo","_areNormalsFrozen","_source","meshMap","_preActivateId","_LODLevels","_useLODScreenCoverage","_effectiveMaterial","_forcedInstanceCount","Mesh","_AbstractMesh","_super","_this","scene","undefined","parent","source","doNotCloneChildren","clonePhysicsImpostor","_internalMeshDataInfo","delayLoadState","instances","_creationDataStorage","_geometry","_instanceDataStorage","_thinInstanceDataStorage","_shouldGenerateFlatShading","_originalBuilderSideOrientation","DEFAULTSIDE","overrideMaterialSideOrientation","ignoreCameraMaxZ","getScene","_onBeforeDraw","isInstance","world","effectiveMaterial","_uniformBuffer","transferToEffect","bindOnlyWorldMatrix","applyToMesh","useClonedMeshMap","uniqueId","_ranges","ranges","_name","hasOwnProperty","createAnimationRange","to","metadata","clone","setEnabled","isEnabled","setPivotMatrix","getPivotMatrix","id","material","directDescendants","getDescendants","index","child","morphTargetManager","getPhysicsEngine","physicsEngine","impostor","getImpostorForPhysicsObject","physicsImpostor","_index","particleSystems","system","emitter","skeleton","refreshBoundingInfo","computeWorldMatrix","getEngine","getCaps","instancedArrays","_onMeshReadyObserverAdded","observer","unregisterOnNextCall","isReady","onMeshReadyObservable","notifyObservers","_checkReadinessObserver","_scene","onBeforeRenderObservable","add","remove","onClonedObservable","key","get","set","_internalAbstractMeshDataInfo","_computeBonesUsingShaders","_sourcePositions","setVerticesData","_sourceNormals","_markSubMeshesAsAttributesDirty","_onBeforeRenderObservable","_onBeforeBindObservable","_onAfterRenderObservable","_onBetweenPassObservable","_onBeforeDrawObservable","callback","_onBeforeDrawObserver","onBeforeDrawObservable","_a","count","_unIndexed","instancesData","instancesPreviousData","manualUpdate","previousManualUpdate","newParent","options","onNewNodeCreated","instance","getTotalVertices","doNotInstantiate","createInstance","position","scaling","rotationQuaternion","rotation","_step","_iterator","getChildTransformNodes","getClassName","instantiateHierarchy","newSourcedMesh","fullDetails","ret","_waitingParentId","animations","ib","getIndices","vb","getVerticesData","_step2","_iterator2","_unBindEffect","sortingOrderFactor","sort","a","b","distanceOrScreenCoverage","mesh","_masterMesh","level","push","_sortLODLevels","distance","internalDataInfo","splice","camera","boundingSphere","bSphere","getBoundingInfo","distanceToCamera","mode","minZ","centerWorld","subtract","globalPosition","compareValue","compareSign","screenArea","meshArea","radiusWorld","Math","PI","onLODLevelSelection","_checkDelayState","_preActivate","_updateSubMeshesBoundingInfo","worldMatrixFromCache","kind","copyWhenShared","forceCopy","_b","data","_userInstancedBuffersStorage","vertexBuffers","getFloatData","meshes","getVertexBuffer","isVerticesDataPresent","_delayInfo","indexOf","isUpdatable","isVertexBufferUpdatable","forEach","kinds","getVerticesDataKinds","getTotalIndices","_c","_d","_e","_f","completeCheck","forceInstanceSupport","subMeshes","engine","hasThinInstances","mat","defaultMaterial","_storeEffectOnSubMeshes","_step3","_iterator3","subMesh","getMaterial","isReadyForSubMesh","_step4","currentRenderPassId","_iterator4","lightSources","light","generator","getShadowGenerator","getShadowMap","renderList","renderPassId","_step6","_iterator6","_subMesh","needAlphaBlendingForMesh","_step5","_iterator5","lod","overridenInstanceCount","sceneRenderId","getRenderId","renderId","intermediateDefaultRenderId","defaultRenderId","selfDefaultRenderId","_renderId","previousRenderId","isFrozen","doNotSyncBoundingInfo","thinInstanceRefreshBoundingInfo","edgesShareWithInstances","edgesRenderer","_renderingGroup","_edgesRenderers","pushNoDuplicate","customInstances","getWorldMatrix","applySkeleton","applyMorph","hasBoundingInfo","isLocked","bias","geometry","boundingBias","_refreshBoundingInfo","_getPositionData","force","totalVertices","totalIndices","needToRecreate","_step7","_iterator7","submesh","indexStart","indexCount","verticesStart","verticesCount","releaseSubMeshes","subdivisionSize","offset","synchronizeInstances","updatable","stride","vertexData","removeVerticesData","buffer","disposeExistingBuffer","setVerticesBuffer","updateExtends","makeItUnique","makeGeometryUnique","updateVerticesData","positionFunction","computeNormals","positions","indices","normals","oldGeometry","copy","releaseForMesh","setIndices","gpuMemoryOnly","updateIndices","toLeftHanded","effect","fillMode","indexToBind","isUsingTextureForTargets","_bind","_getLinesIndexBuffer","getIndexBuffer","vertexArrayObjects","getVertexBuffers","drawArraysType","forcedInstanceCount","drawElementsType","_linesIndexCount","func","removeCallback","onAfterRenderObservable","subMeshId","isReplacementMode","previousBatch","isInIntermediateRendering","_isInIntermediateRendering","onlyForInstances","_onlyForInstancesIntermediate","_onlyForInstances","isVisible","currentRenderId","batch","_id","visibleInstanceCount","instanceStorage","currentInstancesBufferSize","instancesBuffer","instancesPreviousBuffer","bufferSize","Float32Array","needsPreviousWorldMatrices","needUpdateBuffer","masterMeshPreviousWorldMatrix","copyToArray","copyFrom","INSTANCEDMESH_SORT_TRANSPARENT","activeCamera","getRenderingMesh","cameraPosition","instanceIndex","instanceMesh","_distanceToCamera","m1","m2","_instanceIndex","matrix","_previousWorldMatrix","dispose","strides","sizes","vertexArrayObject","createVertexBuffer","_invalidateInstanceVertexArrayObject","updateDirectly","_processInstancedBuffers","_activeIndices","addCount","_currentDrawContext","useInstancing","_draw","unbindInstanceAttributes","previousMatrixData","_thinInstanceCreateMatrixBuffer","renderingMesh","onBeforeDraw","_renderWithThinInstances","_renderWithInstances","instanceCount","visibleInstancesForSubMesh","_getInstancesRenderList","enableAlphaMode","effectiveMeshReplacement","_isActiveIntermediate","_isActive","_checkOcclusionQuery","_occlusionDataStorage","forceRenderingWhenOccluded","oldCameraMaxZ","oldCamera","maxZ","updateTransformMatrix","drawWrapper","getMesh","_actAsRegularMesh","instanceDataStorage","_wasPreviouslyReady","getEffect","setAlphaMode","alphaMode","_step8","_drawWrapper","_getDrawWrapper","_iterator8","_beforeRenderingMeshStage","action","sideOrientation","effectiveMesh","backFaceCulling","mainDeterminant","_getWorldMatrixDeterminant","reverse","_preBind","forceDepthWrite","setDepthWrite","forcePointsCloud","forceWireframe","bindForSubMesh","bind","separateCullingPass","setState","zOffset","cullBackFaces","stencil","zOffsetUnits","_processRendering","unbind","_step9","_iterator9","_afterRenderingMeshStage","performancePriority","_freeze","_normalizeSkinWeightsAndExtra","_normalizeSkinFourWeights","matricesWeights","numWeights","t","recip","matricesWeightsExtra","skinned","valid","report","numberNotSorted","missingWeights","maxUsedWeights","numberNotNormalized","numInfluences","usedWeightCounts","_a2","lastWeight","usedWeights","d","tolerance","_b2","abs","numBones","bones","matricesIndices","matricesIndicesExtra","numBadBoneIndices","_a3","_b3","load","_queueLoad","_this2","addPendingData","getBinaryData","delayLoadingFile","ArrayBuffer","_delayLoadingFunction","JSON","parse","_syncSubMeshes","removePendingData","offlineProvider","frustumPlanes","materials","multiMaterials","results","transform","submeshes","_resetPointsArrayCache","temp","toArray","normalize","determinant","flipFaces","bakeIndependenlyOfChildren","bakeTransformIntoVertices","resetLocalMatrix","_positions","_generatePointsArray","doNotRecurse","disposeMaterialAndTextures","clear","_step11","_iterator10","abstractMesh","_mesh","_disposeInstanceSpecificData","_disposeThinInstanceSpecificData","url","minHeight","maxHeight","onSuccess","uvOffset","uvScale","_this3","forceUpdate","onload","img","heightMapWidth","width","heightMapHeight","height","context","createCanvas","getContext","drawImage","getImageData","applyDisplacementMapFromBuffer","uvs","normal","uv","u","x","v","y","pos","r","g","gradient","scaleInPlace","kindIndex","vbs","newdata","updatableNormals","vertexBuffer","getData","previousSubmeshes","vertexIndex","getStrideSize","flipNormalGeneration","useRightHandedSystem","p1","p2","p3","p1p2","p3p2","localIndex","z","submeshIndex","previousOne","materialIndex","flipNormals","vertex_data","numberPerEdge","currentIndices","segments","tempIndices","uvPtr","normalsPtr","deltaPosition","deltaNormal","deltaUV","side","positionPtr","_i","j","k","idx","_k","_j","_k2","_j2","currentUVs","currentPositions","currentColors","colors","currentMatrixIndices","currentMatrixWeights","currentMatrixIndicesExtra","currentMatrixWeightsExtra","ptr","facet","matrixIndices","matrixWeights","matrixIndicesExtra","matrixWeightsExtra","pstring","indexPtr","uniquePositions","_j3","_k3","_k4","_k5","_k6","_k7","_k8","_k9","_instancedMeshFactory","successCallback","_this4","vectorPositions","dupes","iteration","realPos","testedPosition","againstPosition","equals","originalSubMeshes","serializationObject","type","tags","asArray","_postMultiplyPivotMatrix","pivotMatrix","localMatrix","infiniteDistance","pickable","isPickable","receiveShadows","billboardMode","visibility","checkCollisions","isBlocker","_serializeAsParent","isUnIndexed","geometryUniqueId","geometryId","subIndex","doNotSerialize","materialUniqueId","materialId","morphTargetManagerId","skeletonId","numBoneInfluencers","_getComponent","getPhysicsImpostor","physicsMass","getParam","physicsFriction","physicsRestitution","serializationInstance","_impostor","serializeAnimationRanges","thinInstances","enablePicking","thinInstanceEnablePicking","_userThinInstanceBuffersStorage","userThinInstance","layerMask","alphaIndex","hasVertexAlpha","overlayAlpha","overlayColor","renderOverlay","applyFog","actionManager","actions","serialize","_morphTargetManager","vertexCount","numInfluencers","morphTarget","getActiveTarget","getPositions","getNormals","tangents","getTangents","getUVs","_index2","_softwareSkinningFrameId","getFrameId","hasNormals","setPositionsForCPUSkinning","setNormalsForCPUSkinning","positionsData","normalsData","matricesIndicesData","matricesWeightsData","inf","needExtras","matricesIndicesExtraData","matricesWeightsExtraData","skeletonMatrices","getTransformMatrices","tempVector3","finalMatrix","tempMatrix","matWeightIdx","weight","floor","addToSelf","reset","_indexInSourceMeshInstanceArray","last","pop","orientation","FRONTSIDE","physicObject","jsonObject","parsedMesh","rootUrl","_LinesMeshParser","_GroundMeshParser","_GoldbergMeshParser","_waitingParsedUniqueId","setPreTransformMatrix","showBoundingBox","showSubMeshesBoundingBox","useFlatShading","freezeWorldMatrix","_waitingData","parentId","parentInstanceIndex","_waitingParentInstanceIndex","buildBoundingInfo","boundingBoxMinimum","boundingBoxMaximum","_binaryInfo","hasUVs","hasUVs2","hasUVs3","hasUVs4","hasUVs5","hasUVs6","hasColors","hasMatricesIndices","hasMatricesWeights","_waitingMaterialId","getMorphTargetManagerById","getLastSkeletonById","animationIndex","parsedAnimation","internalClass","Parse","N","autoAnimate","beginAnimation","autoAnimateFrom","autoAnimateTo","autoAnimateLoop","autoAnimateSpeed","isNaN","parseInt","_PhysicsImpostorParser","lodMeshIds","lods","ids","distances","lodDistances","coverages","lodCoverages","parsedInstance","_animationIndex","_parsedAnimation","_internalClass","thinInstanceSetBuffer","minVector","maxVector","boundingBox","minimizeInPlace","minimumWorld","maximizeInPlace","maximumWorld","min","max","meshesOrMinMaxVector","minMaxVector","MinMax","disposeSource","allow32BitsIndices","meshSubclass","subdivideWithSubMeshes","multiMultiMaterials","_MergeMeshesCoroutine","isAsync","materialArray","materialIndexArray","indiceArray","currentOverrideMaterialSideOrientation","matIndex","_subIndex","_subIndex2","getVertexDataFromMesh","_getVertexDataFromMes","_getVertexDataFromMes2","sourceVertexData","sourceTransform","meshVertexDatas","mergeCoroutine","mergeCoroutineStep","applyToCoroutine","applyToCoroutineStep","_iterator11","_step12","newMultiMaterial","_args","_context","prev","filter","abrupt","isAnInstance","subMaterials","wm","_mergeCoroutine","_applyToCoroutine","stop","BACKSIDE","DOUBLESIDE","NO_CAP","CAP_START","CAP_END","CAP_ALL","NO_FLIP","FLIP_TILE","ROTATE_TILE","FLIP_ROW","ROTATE_ROW","FLIP_N_ROTATE_TILE","FLIP_N_ROTATE_ROW","CENTER","LEFT","RIGHT","TOP","BOTTOM","setMaterialByID","setMaterialById","CreateDisc","Error","CreateBox","CreateSphere","CreateCylinder","CreateTorusKnot","CreateTorus","CreatePlane","CreateGround","CreateTiledGround","CreateGroundFromHeightMap","CreateTube","CreatePolyhedron","CreateIcoSphere","CreateDecal","CreateCapsule","ExtendToGoldberg"],"sourceRoot":""}